{"ast":null,"code":"/**\n * Prism: Lightweight, robust, elegant syntax highlighting\n * MIT license http://www.opensource.org/licenses/mit-license.php/\n * @author Lea Verou http://lea.verou.me\n */\n\n/**\n * prism-react-renderer:\n * This file has been modified to remove:\n * - globals and window dependency\n * - worker support\n * - highlightAll and other element dependent methods\n * - _.hooks helpers\n * - UMD/node-specific hacks\n * It has also been run through prettier\n */\nvar Prism = function () {\n  var uniqueId = 0;\n  var _ = {\n    util: {\n      encode: function (tokens) {\n        if (tokens instanceof Token) {\n          return new Token(tokens.type, _.util.encode(tokens.content), tokens.alias);\n        } else if (_.util.type(tokens) === \"Array\") {\n          return tokens.map(_.util.encode);\n        } else {\n          return tokens.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/\\u00a0/g, \" \");\n        }\n      },\n      type: function (o) {\n        return Object.prototype.toString.call(o).match(/\\[object (\\w+)\\]/)[1];\n      },\n      objId: function (obj) {\n        if (!obj[\"__id\"]) {\n          Object.defineProperty(obj, \"__id\", {\n            value: ++uniqueId\n          });\n        }\n        return obj[\"__id\"];\n      },\n      // Deep clone a language definition (e.g. to extend it)\n      clone: function (o, visited) {\n        var type = _.util.type(o);\n        visited = visited || {};\n        switch (type) {\n          case \"Object\":\n            if (visited[_.util.objId(o)]) {\n              return visited[_.util.objId(o)];\n            }\n            var clone = {};\n            visited[_.util.objId(o)] = clone;\n            for (var key in o) {\n              if (o.hasOwnProperty(key)) {\n                clone[key] = _.util.clone(o[key], visited);\n              }\n            }\n            return clone;\n          case \"Array\":\n            if (visited[_.util.objId(o)]) {\n              return visited[_.util.objId(o)];\n            }\n            var clone = [];\n            visited[_.util.objId(o)] = clone;\n            o.forEach(function (v, i) {\n              clone[i] = _.util.clone(v, visited);\n            });\n            return clone;\n        }\n        return o;\n      }\n    },\n    languages: {\n      extend: function (id, redef) {\n        var lang = _.util.clone(_.languages[id]);\n        for (var key in redef) {\n          lang[key] = redef[key];\n        }\n        return lang;\n      },\n      /**\n       * Insert a token before another token in a language literal\n       * As this needs to recreate the object (we cannot actually insert before keys in object literals),\n       * we cannot just provide an object, we need anobject and a key.\n       * @param inside The key (or language id) of the parent\n       * @param before The key to insert before. If not provided, the function appends instead.\n       * @param insert Object with the key/value pairs to insert\n       * @param root The object that contains `inside`. If equal to Prism.languages, it can be omitted.\n       */\n      insertBefore: function (inside, before, insert, root) {\n        root = root || _.languages;\n        var grammar = root[inside];\n        if (arguments.length == 2) {\n          insert = arguments[1];\n          for (var newToken in insert) {\n            if (insert.hasOwnProperty(newToken)) {\n              grammar[newToken] = insert[newToken];\n            }\n          }\n          return grammar;\n        }\n        var ret = {};\n        for (var token in grammar) {\n          if (grammar.hasOwnProperty(token)) {\n            if (token == before) {\n              for (var newToken in insert) {\n                if (insert.hasOwnProperty(newToken)) {\n                  ret[newToken] = insert[newToken];\n                }\n              }\n            }\n            ret[token] = grammar[token];\n          }\n        } // Update references in other language definitions\n\n        _.languages.DFS(_.languages, function (key, value) {\n          if (value === root[inside] && key != inside) {\n            this[key] = ret;\n          }\n        });\n        return root[inside] = ret;\n      },\n      // Traverse a language definition with Depth First Search\n      DFS: function (o, callback, type, visited) {\n        visited = visited || {};\n        for (var i in o) {\n          if (o.hasOwnProperty(i)) {\n            callback.call(o, i, o[i], type || i);\n            if (_.util.type(o[i]) === \"Object\" && !visited[_.util.objId(o[i])]) {\n              visited[_.util.objId(o[i])] = true;\n              _.languages.DFS(o[i], callback, null, visited);\n            } else if (_.util.type(o[i]) === \"Array\" && !visited[_.util.objId(o[i])]) {\n              visited[_.util.objId(o[i])] = true;\n              _.languages.DFS(o[i], callback, i, visited);\n            }\n          }\n        }\n      }\n    },\n    plugins: {},\n    highlight: function (text, grammar, language) {\n      var env = {\n        code: text,\n        grammar: grammar,\n        language: language\n      };\n      _.hooks.run(\"before-tokenize\", env);\n      env.tokens = _.tokenize(env.code, env.grammar);\n      _.hooks.run(\"after-tokenize\", env);\n      return Token.stringify(_.util.encode(env.tokens), env.language);\n    },\n    matchGrammar: function (text, strarr, grammar, index, startPos, oneshot, target) {\n      var Token = _.Token;\n      for (var token in grammar) {\n        if (!grammar.hasOwnProperty(token) || !grammar[token]) {\n          continue;\n        }\n        if (token == target) {\n          return;\n        }\n        var patterns = grammar[token];\n        patterns = _.util.type(patterns) === \"Array\" ? patterns : [patterns];\n        for (var j = 0; j < patterns.length; ++j) {\n          var pattern = patterns[j],\n            inside = pattern.inside,\n            lookbehind = !!pattern.lookbehind,\n            greedy = !!pattern.greedy,\n            lookbehindLength = 0,\n            alias = pattern.alias;\n          if (greedy && !pattern.pattern.global) {\n            // Without the global flag, lastIndex won't work\n            var flags = pattern.pattern.toString().match(/[imuy]*$/)[0];\n            pattern.pattern = RegExp(pattern.pattern.source, flags + \"g\");\n          }\n          pattern = pattern.pattern || pattern; // Don’t cache length as it changes during the loop\n\n          for (var i = index, pos = startPos; i < strarr.length; pos += strarr[i].length, ++i) {\n            var str = strarr[i];\n            if (strarr.length > text.length) {\n              // Something went terribly wrong, ABORT, ABORT!\n              return;\n            }\n            if (str instanceof Token) {\n              continue;\n            }\n            if (greedy && i != strarr.length - 1) {\n              pattern.lastIndex = pos;\n              var match = pattern.exec(text);\n              if (!match) {\n                break;\n              }\n              var from = match.index + (lookbehind ? match[1].length : 0),\n                to = match.index + match[0].length,\n                k = i,\n                p = pos;\n              for (var len = strarr.length; k < len && (p < to || !strarr[k].type && !strarr[k - 1].greedy); ++k) {\n                p += strarr[k].length; // Move the index i to the element in strarr that is closest to from\n\n                if (from >= p) {\n                  ++i;\n                  pos = p;\n                }\n              } // If strarr[i] is a Token, then the match starts inside another Token, which is invalid\n\n              if (strarr[i] instanceof Token) {\n                continue;\n              } // Number of tokens to delete and replace with the new match\n\n              delNum = k - i;\n              str = text.slice(pos, p);\n              match.index -= pos;\n            } else {\n              pattern.lastIndex = 0;\n              var match = pattern.exec(str),\n                delNum = 1;\n            }\n            if (!match) {\n              if (oneshot) {\n                break;\n              }\n              continue;\n            }\n            if (lookbehind) {\n              lookbehindLength = match[1] ? match[1].length : 0;\n            }\n            var from = match.index + lookbehindLength,\n              match = match[0].slice(lookbehindLength),\n              to = from + match.length,\n              before = str.slice(0, from),\n              after = str.slice(to);\n            var args = [i, delNum];\n            if (before) {\n              ++i;\n              pos += before.length;\n              args.push(before);\n            }\n            var wrapped = new Token(token, inside ? _.tokenize(match, inside) : match, alias, match, greedy);\n            args.push(wrapped);\n            if (after) {\n              args.push(after);\n            }\n            Array.prototype.splice.apply(strarr, args);\n            if (delNum != 1) {\n              _.matchGrammar(text, strarr, grammar, i, pos, true, token);\n            }\n            if (oneshot) {\n              break;\n            }\n          }\n        }\n      }\n    },\n    hooks: {\n      add: function () {},\n      run: function (name, env) {}\n    },\n    tokenize: function (text, grammar, language) {\n      var strarr = [text];\n      var rest = grammar.rest;\n      if (rest) {\n        for (var token in rest) {\n          grammar[token] = rest[token];\n        }\n        delete grammar.rest;\n      }\n      _.matchGrammar(text, strarr, grammar, 0, 0, false);\n      return strarr;\n    }\n  };\n  var Token = _.Token = function (type, content, alias, matchedStr, greedy) {\n    this.type = type;\n    this.content = content;\n    this.alias = alias; // Copy of the full string this token was created from\n\n    this.length = (matchedStr || \"\").length | 0;\n    this.greedy = !!greedy;\n  };\n  Token.stringify = function (o, language, parent) {\n    if (typeof o == \"string\") {\n      return o;\n    }\n    if (_.util.type(o) === \"Array\") {\n      return o.map(function (element) {\n        return Token.stringify(element, language, o);\n      }).join(\"\");\n    }\n    var env = {\n      type: o.type,\n      content: Token.stringify(o.content, language, parent),\n      tag: \"span\",\n      classes: [\"token\", o.type],\n      attributes: {},\n      language: language,\n      parent: parent\n    };\n    if (o.alias) {\n      var aliases = _.util.type(o.alias) === \"Array\" ? o.alias : [o.alias];\n      Array.prototype.push.apply(env.classes, aliases);\n    }\n    var attributes = Object.keys(env.attributes).map(function (name) {\n      return name + '=\"' + (env.attributes[name] || \"\").replace(/\"/g, \"&quot;\") + '\"';\n    }).join(\" \");\n    return \"<\" + env.tag + ' class=\"' + env.classes.join(\" \") + '\"' + (attributes ? \" \" + attributes : \"\") + \">\" + env.content + \"</\" + env.tag + \">\";\n  };\n  return _;\n}();\n\n/* This content is auto-generated to include some prismjs language components: */\n\n/* \"prismjs/components/prism-markup\" */\n\nPrism.languages.markup = {\n  'comment': /<!--[\\s\\S]*?-->/,\n  'prolog': /<\\?[\\s\\S]+?\\?>/,\n  'doctype': {\n    // https://www.w3.org/TR/xml/#NT-doctypedecl\n    pattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n    greedy: true,\n    inside: {\n      'internal-subset': {\n        pattern: /(\\[)[\\s\\S]+(?=\\]>$)/,\n        lookbehind: true,\n        greedy: true,\n        inside: null // see below\n      },\n\n      'string': {\n        pattern: /\"[^\"]*\"|'[^']*'/,\n        greedy: true\n      },\n      'punctuation': /^<!|>$|[[\\]]/,\n      'doctype-tag': /^DOCTYPE/,\n      'name': /[^\\s<>'\"]+/\n    }\n  },\n  'cdata': /<!\\[CDATA\\[[\\s\\S]*?]]>/i,\n  'tag': {\n    pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n    greedy: true,\n    inside: {\n      'tag': {\n        pattern: /^<\\/?[^\\s>\\/]+/,\n        inside: {\n          'punctuation': /^<\\/?/,\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      },\n      'attr-value': {\n        pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n        inside: {\n          'punctuation': [{\n            pattern: /^=/,\n            alias: 'attr-equals'\n          }, /\"|'/]\n        }\n      },\n      'punctuation': /\\/?>/,\n      'attr-name': {\n        pattern: /[^\\s>\\/]+/,\n        inside: {\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      }\n    }\n  },\n  'entity': [{\n    pattern: /&[\\da-z]{1,8};/i,\n    alias: 'named-entity'\n  }, /&#x?[\\da-f]{1,8};/i]\n};\nPrism.languages.markup['tag'].inside['attr-value'].inside['entity'] = Prism.languages.markup['entity'];\nPrism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup; // Plugin to make entity title show the real entity, idea by Roman Komarov\n\nPrism.hooks.add('wrap', function (env) {\n  if (env.type === 'entity') {\n    env.attributes['title'] = env.content.replace(/&amp;/, '&');\n  }\n});\nObject.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n  /**\n   * Adds an inlined language to markup.\n   *\n   * An example of an inlined language is CSS with `<style>` tags.\n   *\n   * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n   * case insensitive.\n   * @param {string} lang The language key.\n   * @example\n   * addInlined('style', 'css');\n   */\n  value: function addInlined(tagName, lang) {\n    var includedCdataInside = {};\n    includedCdataInside['language-' + lang] = {\n      pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n      lookbehind: true,\n      inside: Prism.languages[lang]\n    };\n    includedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n    var inside = {\n      'included-cdata': {\n        pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n        inside: includedCdataInside\n      }\n    };\n    inside['language-' + lang] = {\n      pattern: /[\\s\\S]+/,\n      inside: Prism.languages[lang]\n    };\n    var def = {};\n    def[tagName] = {\n      pattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () {\n        return tagName;\n      }), 'i'),\n      lookbehind: true,\n      greedy: true,\n      inside: inside\n    };\n    Prism.languages.insertBefore('markup', 'cdata', def);\n  }\n});\nPrism.languages.html = Prism.languages.markup;\nPrism.languages.mathml = Prism.languages.markup;\nPrism.languages.svg = Prism.languages.markup;\nPrism.languages.xml = Prism.languages.extend('markup', {});\nPrism.languages.ssml = Prism.languages.xml;\nPrism.languages.atom = Prism.languages.xml;\nPrism.languages.rss = Prism.languages.xml;\n/* \"prismjs/components/prism-bash\" */\n\n(function (Prism) {\n  // $ set | grep '^[A-Z][^[:space:]]*=' | cut -d= -f1 | tr '\\n' '|'\n  // + LC_ALL, RANDOM, REPLY, SECONDS.\n  // + make sure PS1..4 are here as they are not always set,\n  // - some useless things.\n  var envVars = '\\\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\\\b';\n  var commandAfterHeredoc = {\n    pattern: /(^([\"']?)\\w+\\2)[ \\t]+\\S.*/,\n    lookbehind: true,\n    alias: 'punctuation',\n    // this looks reasonably well in all themes\n    inside: null // see below\n  };\n\n  var insideString = {\n    'bash': commandAfterHeredoc,\n    'environment': {\n      pattern: RegExp(\"\\\\$\" + envVars),\n      alias: 'constant'\n    },\n    'variable': [\n    // [0]: Arithmetic Environment\n    {\n      pattern: /\\$?\\(\\([\\s\\S]+?\\)\\)/,\n      greedy: true,\n      inside: {\n        // If there is a $ sign at the beginning highlight $(( and )) as variable\n        'variable': [{\n          pattern: /(^\\$\\(\\([\\s\\S]+)\\)\\)/,\n          lookbehind: true\n        }, /^\\$\\(\\(/],\n        'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n        // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic\n        'operator': /--?|-=|\\+\\+?|\\+=|!=?|~|\\*\\*?|\\*=|\\/=?|%=?|<<=?|>>=?|<=?|>=?|==?|&&?|&=|\\^=?|\\|\\|?|\\|=|\\?|:/,\n        // If there is no $ sign at the beginning highlight (( and )) as punctuation\n        'punctuation': /\\(\\(?|\\)\\)?|,|;/\n      }\n    },\n    // [1]: Command Substitution\n    {\n      pattern: /\\$\\((?:\\([^)]+\\)|[^()])+\\)|`[^`]+`/,\n      greedy: true,\n      inside: {\n        'variable': /^\\$\\(|^`|\\)$|`$/\n      }\n    },\n    // [2]: Brace expansion\n    {\n      pattern: /\\$\\{[^}]+\\}/,\n      greedy: true,\n      inside: {\n        'operator': /:[-=?+]?|[!\\/]|##?|%%?|\\^\\^?|,,?/,\n        'punctuation': /[\\[\\]]/,\n        'environment': {\n          pattern: RegExp(\"(\\\\{)\" + envVars),\n          lookbehind: true,\n          alias: 'constant'\n        }\n      }\n    }, /\\$(?:\\w+|[#?*!@$])/],\n    // Escape sequences from echo and printf's manuals, and escaped quotes.\n    'entity': /\\\\(?:[abceEfnrtv\\\\\"]|O?[0-7]{1,3}|x[0-9a-fA-F]{1,2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})/\n  };\n  Prism.languages.bash = {\n    'shebang': {\n      pattern: /^#!\\s*\\/.*/,\n      alias: 'important'\n    },\n    'comment': {\n      pattern: /(^|[^\"{\\\\$])#.*/,\n      lookbehind: true\n    },\n    'function-name': [\n    // a) function foo {\n    // b) foo() {\n    // c) function foo() {\n    // but not “foo {”\n    {\n      // a) and c)\n      pattern: /(\\bfunction\\s+)\\w+(?=(?:\\s*\\(?:\\s*\\))?\\s*\\{)/,\n      lookbehind: true,\n      alias: 'function'\n    }, {\n      // b)\n      pattern: /\\b\\w+(?=\\s*\\(\\s*\\)\\s*\\{)/,\n      alias: 'function'\n    }],\n    // Highlight variable names as variables in for and select beginnings.\n    'for-or-select': {\n      pattern: /(\\b(?:for|select)\\s+)\\w+(?=\\s+in\\s)/,\n      alias: 'variable',\n      lookbehind: true\n    },\n    // Highlight variable names as variables in the left-hand part\n    // of assignments (“=” and “+=”).\n    'assign-left': {\n      pattern: /(^|[\\s;|&]|[<>]\\()\\w+(?=\\+?=)/,\n      inside: {\n        'environment': {\n          pattern: RegExp(\"(^|[\\\\s;|&]|[<>]\\\\()\" + envVars),\n          lookbehind: true,\n          alias: 'constant'\n        }\n      },\n      alias: 'variable',\n      lookbehind: true\n    },\n    'string': [\n    // Support for Here-documents https://en.wikipedia.org/wiki/Here_document\n    {\n      pattern: /((?:^|[^<])<<-?\\s*)(\\w+?)\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\2/,\n      lookbehind: true,\n      greedy: true,\n      inside: insideString\n    },\n    // Here-document with quotes around the tag\n    // → No expansion (so no “inside”).\n    {\n      pattern: /((?:^|[^<])<<-?\\s*)([\"'])(\\w+)\\2\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\3/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'bash': commandAfterHeredoc\n      }\n    },\n    // “Normal” string\n    {\n      pattern: /(^|[^\\\\](?:\\\\\\\\)*)([\"'])(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|\\$(?!\\()|`[^`]+`|(?!\\2)[^\\\\`$])*\\2/,\n      lookbehind: true,\n      greedy: true,\n      inside: insideString\n    }],\n    'environment': {\n      pattern: RegExp(\"\\\\$?\" + envVars),\n      alias: 'constant'\n    },\n    'variable': insideString.variable,\n    'function': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:add|apropos|apt|aptitude|apt-cache|apt-get|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    'keyword': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:if|then|else|elif|fi|for|while|in|case|esac|function|select|do|done|until)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    // https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\n    'builtin': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:\\.|:|break|cd|continue|eval|exec|exit|export|getopts|hash|pwd|readonly|return|shift|test|times|trap|umask|unset|alias|bind|builtin|caller|command|declare|echo|enable|help|let|local|logout|mapfile|printf|read|readarray|source|type|typeset|ulimit|unalias|set|shopt)(?=$|[)\\s;|&])/,\n      lookbehind: true,\n      // Alias added to make those easier to distinguish from strings.\n      alias: 'class-name'\n    },\n    'boolean': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:true|false)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    'file-descriptor': {\n      pattern: /\\B&\\d\\b/,\n      alias: 'important'\n    },\n    'operator': {\n      // Lots of redirections here, but not just that.\n      pattern: /\\d?<>|>\\||\\+=|==?|!=?|=~|<<[<-]?|[&\\d]?>>|\\d?[<>]&?|&[>&]?|\\|[&|]?|<=?|>=?/,\n      inside: {\n        'file-descriptor': {\n          pattern: /^\\d/,\n          alias: 'important'\n        }\n      }\n    },\n    'punctuation': /\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];\\\\]/,\n    'number': {\n      pattern: /(^|\\s)(?:[1-9]\\d*|0)(?:[.,]\\d+)?\\b/,\n      lookbehind: true\n    }\n  };\n  commandAfterHeredoc.inside = Prism.languages.bash;\n  /* Patterns in command substitution. */\n\n  var toBeCopied = ['comment', 'function-name', 'for-or-select', 'assign-left', 'string', 'environment', 'function', 'keyword', 'builtin', 'boolean', 'file-descriptor', 'operator', 'punctuation', 'number'];\n  var inside = insideString.variable[1].inside;\n  for (var i = 0; i < toBeCopied.length; i++) {\n    inside[toBeCopied[i]] = Prism.languages.bash[toBeCopied[i]];\n  }\n  Prism.languages.shell = Prism.languages.bash;\n})(Prism);\n/* \"prismjs/components/prism-clike\" */\n\nPrism.languages.clike = {\n  'comment': [{\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    lookbehind: true,\n    greedy: true\n  }, {\n    pattern: /(^|[^\\\\:])\\/\\/.*/,\n    lookbehind: true,\n    greedy: true\n  }],\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /(\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n    lookbehind: true,\n    inside: {\n      'punctuation': /[.\\\\]/\n    }\n  },\n  'keyword': /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n  'boolean': /\\b(?:true|false)\\b/,\n  'function': /\\w+(?=\\()/,\n  'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n  'operator': /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n  'punctuation': /[{}[\\];(),.:]/\n};\n/* \"prismjs/components/prism-c\" */\n\nPrism.languages.c = Prism.languages.extend('clike', {\n  'comment': {\n    pattern: /\\/\\/(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n?|\\n|(?![\\r\\n])))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /(\\b(?:enum|struct)\\s+(?:__attribute__\\s*\\(\\([\\s\\S]*?\\)\\)\\s*)?)\\w+|\\b[a-z]\\w*_t\\b/,\n    lookbehind: true\n  },\n  'keyword': /\\b(?:__attribute__|_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\\b/,\n  'function': /[a-z_]\\w*(?=\\s*\\()/i,\n  'number': /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,\n  'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/\n});\nPrism.languages.insertBefore('c', 'string', {\n  'macro': {\n    // allow for multiline macro definitions\n    // spaces after the # character compile fine with gcc\n    pattern: /(^\\s*)#\\s*[a-z](?:[^\\r\\n\\\\/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n    lookbehind: true,\n    greedy: true,\n    alias: 'property',\n    inside: {\n      'string': [{\n        // highlight the path of the include statement as a string\n        pattern: /^(#\\s*include\\s*)<[^>]+>/,\n        lookbehind: true\n      }, Prism.languages.c['string']],\n      'comment': Prism.languages.c['comment'],\n      'macro-name': [{\n        pattern: /(^#\\s*define\\s+)\\w+\\b(?!\\()/i,\n        lookbehind: true\n      }, {\n        pattern: /(^#\\s*define\\s+)\\w+\\b(?=\\()/i,\n        lookbehind: true,\n        alias: 'function'\n      }],\n      // highlight macro directives as keywords\n      'directive': {\n        pattern: /^(#\\s*)[a-z]+/,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      'directive-hash': /^#/,\n      'punctuation': /##|\\\\(?=[\\r\\n])/,\n      'expression': {\n        pattern: /\\S[\\s\\S]*/,\n        inside: Prism.languages.c\n      }\n    }\n  },\n  // highlight predefined macros as constants\n  'constant': /\\b(?:__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|stdin|stdout|stderr)\\b/\n});\ndelete Prism.languages.c['boolean'];\n/* \"prismjs/components/prism-cpp\" */\n\n(function (Prism) {\n  var keyword = /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char8_t|char16_t|char32_t|class|compl|concept|const|consteval|constexpr|constinit|const_cast|continue|co_await|co_return|co_yield|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|float|for|friend|goto|if|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/;\n  Prism.languages.cpp = Prism.languages.extend('c', {\n    'class-name': [{\n      pattern: RegExp(/(\\b(?:class|concept|enum|struct|typename)\\s+)(?!<keyword>)\\w+/.source.replace(/<keyword>/g, function () {\n        return keyword.source;\n      })),\n      lookbehind: true\n    },\n    // This is intended to capture the class name of method implementations like:\n    //   void foo::bar() const {}\n    // However! The `foo` in the above example could also be a namespace, so we only capture the class name if\n    // it starts with an uppercase letter. This approximation should give decent results.\n    /\\b[A-Z]\\w*(?=\\s*::\\s*\\w+\\s*\\()/,\n    // This will capture the class name before destructors like:\n    //   Foo::~Foo() {}\n    /\\b[A-Z_]\\w*(?=\\s*::\\s*~\\w+\\s*\\()/i,\n    // This also intends to capture the class name of method implementations but here the class has template\n    // parameters, so it can't be a namespace (until C++ adds generic namespaces).\n    /\\w+(?=\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\\s*::\\s*\\w+\\s*\\()/],\n    'keyword': keyword,\n    'number': {\n      pattern: /(?:\\b0b[01']+|\\b0x(?:[\\da-f']+(?:\\.[\\da-f']*)?|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+(?:\\.[\\d']*)?|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]{0,4}/i,\n      greedy: true\n    },\n    'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|<=>|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,\n    'boolean': /\\b(?:true|false)\\b/\n  });\n  Prism.languages.insertBefore('cpp', 'string', {\n    'raw-string': {\n      pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n      alias: 'string',\n      greedy: true\n    }\n  });\n  Prism.languages.insertBefore('cpp', 'class-name', {\n    // the base clause is an optional list of parent classes\n    // https://en.cppreference.com/w/cpp/language/class\n    'base-clause': {\n      pattern: /(\\b(?:class|struct)\\s+\\w+\\s*:\\s*)[^;{}\"'\\s]+(?:\\s+[^;{}\"'\\s]+)*(?=\\s*[;{])/,\n      lookbehind: true,\n      greedy: true,\n      inside: Prism.languages.extend('cpp', {})\n    }\n  });\n  Prism.languages.insertBefore('inside', 'operator', {\n    // All untokenized words that are not namespaces should be class names\n    'class-name': /\\b[a-z_]\\w*\\b(?!\\s*::)/i\n  }, Prism.languages.cpp['base-clause']);\n})(Prism);\n/* \"prismjs/components/prism-css\" */\n\n(function (Prism) {\n  var string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n  Prism.languages.css = {\n    'comment': /\\/\\*[\\s\\S]*?\\*\\//,\n    'atrule': {\n      pattern: /@[\\w-](?:[^;{\\s]|\\s+(?![\\s{]))*(?:;|(?=\\s*\\{))/,\n      inside: {\n        'rule': /^@[\\w-]+/,\n        'selector-function-argument': {\n          pattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\n          lookbehind: true,\n          alias: 'selector'\n        },\n        'keyword': {\n          pattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n          lookbehind: true\n        } // See rest below\n      }\n    },\n\n    'url': {\n      // https://drafts.csswg.org/css-values-3/#urls\n      pattern: RegExp('\\\\burl\\\\((?:' + string.source + '|' + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + ')\\\\)', 'i'),\n      greedy: true,\n      inside: {\n        'function': /^url/i,\n        'punctuation': /^\\(|\\)$/,\n        'string': {\n          pattern: RegExp('^' + string.source + '$'),\n          alias: 'url'\n        }\n      }\n    },\n    'selector': RegExp('[^{}\\\\s](?:[^{};\"\\'\\\\s]|\\\\s+(?![\\\\s{])|' + string.source + ')*(?=\\\\s*\\\\{)'),\n    'string': {\n      pattern: string,\n      greedy: true\n    },\n    'property': /(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\n    'important': /!important\\b/i,\n    'function': /[-a-z0-9]+(?=\\()/i,\n    'punctuation': /[(){};:,]/\n  };\n  Prism.languages.css['atrule'].inside.rest = Prism.languages.css;\n  var markup = Prism.languages.markup;\n  if (markup) {\n    markup.tag.addInlined('style', 'css');\n    Prism.languages.insertBefore('inside', 'attr-value', {\n      'style-attr': {\n        pattern: /(^|[\"'\\s])style\\s*=\\s*(?:\"[^\"]*\"|'[^']*')/i,\n        lookbehind: true,\n        inside: {\n          'attr-value': {\n            pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n            inside: {\n              'style': {\n                pattern: /([\"'])[\\s\\S]+(?=[\"']$)/,\n                lookbehind: true,\n                alias: 'language-css',\n                inside: Prism.languages.css\n              },\n              'punctuation': [{\n                pattern: /^=/,\n                alias: 'attr-equals'\n              }, /\"|'/]\n            }\n          },\n          'attr-name': /^style/i\n        }\n      }\n    }, markup.tag);\n  }\n})(Prism);\n/* \"prismjs/components/prism-css-extras\" */\n\n(function (Prism) {\n  var string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n  var selectorInside;\n  Prism.languages.css.selector = {\n    pattern: Prism.languages.css.selector,\n    inside: selectorInside = {\n      'pseudo-element': /:(?:after|before|first-letter|first-line|selection)|::[-\\w]+/,\n      'pseudo-class': /:[-\\w]+/,\n      'class': /\\.[-\\w]+/,\n      'id': /#[-\\w]+/,\n      'attribute': {\n        pattern: RegExp('\\\\[(?:[^[\\\\]\"\\']|' + string.source + ')*\\\\]'),\n        greedy: true,\n        inside: {\n          'punctuation': /^\\[|\\]$/,\n          'case-sensitivity': {\n            pattern: /(\\s)[si]$/i,\n            lookbehind: true,\n            alias: 'keyword'\n          },\n          'namespace': {\n            pattern: /^(\\s*)(?:(?!\\s)[-*\\w\\xA0-\\uFFFF])*\\|(?!=)/,\n            lookbehind: true,\n            inside: {\n              'punctuation': /\\|$/\n            }\n          },\n          'attr-name': {\n            pattern: /^(\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+/,\n            lookbehind: true\n          },\n          'attr-value': [string, {\n            pattern: /(=\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+(?=\\s*$)/,\n            lookbehind: true\n          }],\n          'operator': /[|~*^$]?=/\n        }\n      },\n      'n-th': [{\n        pattern: /(\\(\\s*)[+-]?\\d*[\\dn](?:\\s*[+-]\\s*\\d+)?(?=\\s*\\))/,\n        lookbehind: true,\n        inside: {\n          'number': /[\\dn]+/,\n          'operator': /[+-]/\n        }\n      }, {\n        pattern: /(\\(\\s*)(?:even|odd)(?=\\s*\\))/i,\n        lookbehind: true\n      }],\n      'combinator': />|\\+|~|\\|\\|/,\n      // the `tag` token has been existed and removed.\n      // because we can't find a perfect tokenize to match it.\n      // if you want to add it, please read https://github.com/PrismJS/prism/pull/2373 first.\n      'punctuation': /[(),]/\n    }\n  };\n  Prism.languages.css['atrule'].inside['selector-function-argument'].inside = selectorInside;\n  Prism.languages.insertBefore('css', 'property', {\n    'variable': {\n      pattern: /(^|[^-\\w\\xA0-\\uFFFF])--(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*/i,\n      lookbehind: true\n    }\n  });\n  var unit = {\n    pattern: /(\\b\\d+)(?:%|[a-z]+\\b)/,\n    lookbehind: true\n  }; // 123 -123 .123 -.123 12.3 -12.3\n\n  var number = {\n    pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n    lookbehind: true\n  };\n  Prism.languages.insertBefore('css', 'function', {\n    'operator': {\n      pattern: /(\\s)[+\\-*\\/](?=\\s)/,\n      lookbehind: true\n    },\n    // CAREFUL!\n    // Previewers and Inline color use hexcode and color.\n    'hexcode': {\n      pattern: /\\B#(?:[\\da-f]{1,2}){3,4}\\b/i,\n      alias: 'color'\n    },\n    'color': [/\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i, {\n      pattern: /\\b(?:rgb|hsl)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:rgb|hsl)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n      inside: {\n        'unit': unit,\n        'number': number,\n        'function': /[\\w-]+(?=\\()/,\n        'punctuation': /[(),]/\n      }\n    }],\n    // it's important that there is no boundary assertion after the hex digits\n    'entity': /\\\\[\\da-f]{1,8}/i,\n    'unit': unit,\n    'number': number\n  });\n})(Prism);\n/* \"prismjs/components/prism-javascript\" */\n\nPrism.languages.javascript = Prism.languages.extend('clike', {\n  'class-name': [Prism.languages.clike['class-name'], {\n    pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:prototype|constructor))/,\n    lookbehind: true\n  }],\n  'keyword': [{\n    pattern: /((?:^|})\\s*)(?:catch|finally)\\b/,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|(?:get|set)(?=\\s*[\\[$\\w\\xA0-\\uFFFF])|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n    lookbehind: true\n  }],\n  // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n  'function': /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n  'number': /\\b(?:(?:0[xX](?:[\\dA-Fa-f](?:_[\\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\\d(?:_\\d)?)+n|NaN|Infinity)\\b|(?:\\b(?:\\d(?:_\\d)?)+\\.?(?:\\d(?:_\\d)?)*|\\B\\.(?:\\d(?:_\\d)?)+)(?:[Ee][+-]?(?:\\d(?:_\\d)?)+)?/,\n  'operator': /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n});\nPrism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/;\nPrism.languages.insertBefore('javascript', 'keyword', {\n  'regex': {\n    pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyus]{0,6}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/,\n    lookbehind: true,\n    greedy: true,\n    inside: {\n      'regex-source': {\n        pattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n        lookbehind: true,\n        alias: 'language-regex',\n        inside: Prism.languages.regex\n      },\n      'regex-flags': /[a-z]+$/,\n      'regex-delimiter': /^\\/|\\/$/\n    }\n  },\n  // This must be declared before keyword because we use \"function\" inside the look-forward\n  'function-variable': {\n    pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n    alias: 'function'\n  },\n  'parameter': [{\n    pattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }],\n  'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\nPrism.languages.insertBefore('javascript', 'string', {\n  'template-string': {\n    pattern: /`(?:\\\\[\\s\\S]|\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}|(?!\\${)[^\\\\`])*`/,\n    greedy: true,\n    inside: {\n      'template-punctuation': {\n        pattern: /^`|`$/,\n        alias: 'string'\n      },\n      'interpolation': {\n        pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}/,\n        lookbehind: true,\n        inside: {\n          'interpolation-punctuation': {\n            pattern: /^\\${|}$/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.javascript\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  }\n});\nif (Prism.languages.markup) {\n  Prism.languages.markup.tag.addInlined('script', 'javascript');\n}\nPrism.languages.js = Prism.languages.javascript;\n/* \"prismjs/components/prism-jsx\" */\n\n(function (Prism) {\n  var javascript = Prism.util.clone(Prism.languages.javascript);\n  Prism.languages.jsx = Prism.languages.extend('markup', javascript);\n  Prism.languages.jsx.tag.pattern = /<\\/?(?:[\\w.:-]+(?:\\s+(?:[\\w.:$-]+(?:=(?:\"(?:\\\\[^]|[^\\\\\"])*\"|'(?:\\\\[^]|[^\\\\'])*'|[^\\s{'\">=]+|\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])+\\}))?|\\{\\s*\\.{3}\\s*[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\s*\\}))*\\s*\\/?)?>/i;\n  Prism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/i;\n  Prism.languages.jsx.tag.inside['attr-value'].pattern = /=(?!\\{)(?:\"(?:\\\\[^]|[^\\\\\"])*\"|'(?:\\\\[^]|[^\\\\'])*'|[^\\s'\">]+)/i;\n  Prism.languages.jsx.tag.inside['tag'].inside['class-name'] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/;\n  Prism.languages.insertBefore('inside', 'attr-name', {\n    'spread': {\n      pattern: /\\{\\s*\\.{3}\\s*[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\s*\\}/,\n      inside: {\n        'punctuation': /\\.{3}|[{}.]/,\n        'attr-value': /\\w+/\n      }\n    }\n  }, Prism.languages.jsx.tag);\n  Prism.languages.insertBefore('inside', 'attr-value', {\n    'script': {\n      // Allow for two levels of nesting\n      pattern: /=(?:\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])+\\})/i,\n      inside: {\n        'script-punctuation': {\n          pattern: /^=(?={)/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.jsx\n      },\n      'alias': 'language-javascript'\n    }\n  }, Prism.languages.jsx.tag); // The following will handle plain text inside tags\n\n  var stringifyToken = function (token) {\n    if (!token) {\n      return '';\n    }\n    if (typeof token === 'string') {\n      return token;\n    }\n    if (typeof token.content === 'string') {\n      return token.content;\n    }\n    return token.content.map(stringifyToken).join('');\n  };\n  var walkTokens = function (tokens) {\n    var openedTags = [];\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n      var notTagNorBrace = false;\n      if (typeof token !== 'string') {\n        if (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {\n          // We found a tag, now find its kind\n          if (token.content[0].content[0].content === '</') {\n            // Closing tag\n            if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {\n              // Pop matching opening tag\n              openedTags.pop();\n            }\n          } else {\n            if (token.content[token.content.length - 1].content === '/>') ;else {\n              // Opening tag\n              openedTags.push({\n                tagName: stringifyToken(token.content[0].content[1]),\n                openedBraces: 0\n              });\n            }\n          }\n        } else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{') {\n          // Here we might have entered a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces++;\n        } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {\n          // Here we might have left a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces--;\n        } else {\n          notTagNorBrace = true;\n        }\n      }\n      if (notTagNorBrace || typeof token === 'string') {\n        if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n          // Here we are inside a tag, and not inside a JSX context.\n          // That's plain text: drop any tokens matched.\n          var plainText = stringifyToken(token); // And merge text with adjacent text\n\n          if (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {\n            plainText += stringifyToken(tokens[i + 1]);\n            tokens.splice(i + 1, 1);\n          }\n          if (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {\n            plainText = stringifyToken(tokens[i - 1]) + plainText;\n            tokens.splice(i - 1, 1);\n            i--;\n          }\n          tokens[i] = new Prism.Token('plain-text', plainText, null, plainText);\n        }\n      }\n      if (token.content && typeof token.content !== 'string') {\n        walkTokens(token.content);\n      }\n    }\n  };\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'jsx' && env.language !== 'tsx') {\n      return;\n    }\n    walkTokens(env.tokens);\n  });\n})(Prism);\n/* \"prismjs/components/prism-js-extras\" */\n\n(function (Prism) {\n  Prism.languages.insertBefore('javascript', 'function-variable', {\n    'method-variable': {\n      pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function-variable'].pattern.source),\n      lookbehind: true,\n      alias: ['function-variable', 'method', 'function', 'property-access']\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'function', {\n    'method': {\n      pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function'].source),\n      lookbehind: true,\n      alias: ['function', 'property-access']\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'constant', {\n    'known-class-name': [{\n      // standard built-ins\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\n      pattern: /\\b(?:(?:(?:Uint|Int)(?:8|16|32)|Uint8Clamped|Float(?:32|64))?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|(?:Weak)?(?:Set|Map)|WebAssembly)\\b/,\n      alias: 'class-name'\n    }, {\n      // errors\n      pattern: /\\b(?:[A-Z]\\w*)Error\\b/,\n      alias: 'class-name'\n    }]\n  });\n  /**\n   * Replaces the `<ID>` placeholder in the given pattern with a pattern for general JS identifiers.\n   *\n   * @param {string} source\n   * @param {string} [flags]\n   * @returns {RegExp}\n   */\n\n  function withId(source, flags) {\n    return RegExp(source.replace(/<ID>/g, function () {\n      return /(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/.source;\n    }), flags);\n  }\n  Prism.languages.insertBefore('javascript', 'keyword', {\n    'imports': {\n      // https://tc39.es/ecma262/#sec-imports\n      pattern: withId(/(\\bimport\\b\\s*)(?:<ID>(?:\\s*,\\s*(?:\\*\\s*as\\s+<ID>|\\{[^{}]*\\}))?|\\*\\s*as\\s+<ID>|\\{[^{}]*\\})(?=\\s*\\bfrom\\b)/.source),\n      lookbehind: true,\n      inside: Prism.languages.javascript\n    },\n    'exports': {\n      // https://tc39.es/ecma262/#sec-exports\n      pattern: withId(/(\\bexport\\b\\s*)(?:\\*(?:\\s*as\\s+<ID>)?(?=\\s*\\bfrom\\b)|\\{[^{}]*\\})/.source),\n      lookbehind: true,\n      inside: Prism.languages.javascript\n    }\n  });\n  Prism.languages.javascript['keyword'].unshift({\n    pattern: /\\b(?:as|default|export|from|import)\\b/,\n    alias: 'module'\n  }, {\n    pattern: /\\b(?:await|break|catch|continue|do|else|for|finally|if|return|switch|throw|try|while|yield)\\b/,\n    alias: 'control-flow'\n  }, {\n    pattern: /\\bnull\\b/,\n    alias: ['null', 'nil']\n  }, {\n    pattern: /\\bundefined\\b/,\n    alias: 'nil'\n  });\n  Prism.languages.insertBefore('javascript', 'operator', {\n    'spread': {\n      pattern: /\\.{3}/,\n      alias: 'operator'\n    },\n    'arrow': {\n      pattern: /=>/,\n      alias: 'operator'\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'punctuation', {\n    'property-access': {\n      pattern: withId(/(\\.\\s*)#?<ID>/.source),\n      lookbehind: true\n    },\n    'maybe-class-name': {\n      pattern: /(^|[^$\\w\\xA0-\\uFFFF])[A-Z][$\\w\\xA0-\\uFFFF]+/,\n      lookbehind: true\n    },\n    'dom': {\n      // this contains only a few commonly used DOM variables\n      pattern: /\\b(?:document|location|navigator|performance|(?:local|session)Storage|window)\\b/,\n      alias: 'variable'\n    },\n    'console': {\n      pattern: /\\bconsole(?=\\s*\\.)/,\n      alias: 'class-name'\n    }\n  }); // add 'maybe-class-name' to tokens which might be a class name\n\n  var maybeClassNameTokens = ['function', 'function-variable', 'method', 'method-variable', 'property-access'];\n  for (var i = 0; i < maybeClassNameTokens.length; i++) {\n    var token = maybeClassNameTokens[i];\n    var value = Prism.languages.javascript[token]; // convert regex to object\n\n    if (Prism.util.type(value) === 'RegExp') {\n      value = Prism.languages.javascript[token] = {\n        pattern: value\n      };\n    } // keep in mind that we don't support arrays\n\n    var inside = value.inside || {};\n    value.inside = inside;\n    inside['maybe-class-name'] = /^[A-Z][\\s\\S]*/;\n  }\n})(Prism);\n/* \"prismjs/components/prism-coffeescript\" */\n\n(function (Prism) {\n  // Ignore comments starting with { to privilege string interpolation highlighting\n  var comment = /#(?!\\{).+/,\n    interpolation = {\n      pattern: /#\\{[^}]+\\}/,\n      alias: 'variable'\n    };\n  Prism.languages.coffeescript = Prism.languages.extend('javascript', {\n    'comment': comment,\n    'string': [\n    // Strings are multiline\n    {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: true\n    }, {\n      // Strings are multiline\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }],\n    'keyword': /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n    'class-member': {\n      pattern: /@(?!\\d)\\w+/,\n      alias: 'variable'\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'comment', {\n    'multiline-comment': {\n      pattern: /###[\\s\\S]+?###/,\n      alias: 'comment'\n    },\n    // Block regexp can contain comments and interpolation\n    'block-regex': {\n      pattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n      alias: 'regex',\n      inside: {\n        'comment': comment,\n        'interpolation': interpolation\n      }\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'string', {\n    'inline-javascript': {\n      pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n      inside: {\n        'delimiter': {\n          pattern: /^`|`$/,\n          alias: 'punctuation'\n        },\n        'script': {\n          pattern: /[\\s\\S]+/,\n          alias: 'language-javascript',\n          inside: Prism.languages.javascript\n        }\n      }\n    },\n    // Block strings\n    'multiline-string': [{\n      pattern: /'''[\\s\\S]*?'''/,\n      greedy: true,\n      alias: 'string'\n    }, {\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        interpolation: interpolation\n      }\n    }]\n  });\n  Prism.languages.insertBefore('coffeescript', 'keyword', {\n    // Object property\n    'property': /(?!\\d)\\w+(?=\\s*:(?!:))/\n  });\n  delete Prism.languages.coffeescript['template-string'];\n  Prism.languages.coffee = Prism.languages.coffeescript;\n})(Prism);\n/* \"prismjs/components/prism-diff\" */\n\n(function (Prism) {\n  Prism.languages.diff = {\n    'coord': [\n    // Match all kinds of coord lines (prefixed by \"+++\", \"---\" or \"***\").\n    /^(?:\\*{3}|-{3}|\\+{3}).*$/m,\n    // Match \"@@ ... @@\" coord lines in unified diff.\n    /^@@.*@@$/m,\n    // Match coord lines in normal diff (starts with a number).\n    /^\\d.*$/m] // deleted, inserted, unchanged, diff\n  };\n  /**\n   * A map from the name of a block to its line prefix.\n   *\n   * @type {Object<string, string>}\n   */\n\n  var PREFIXES = {\n    'deleted-sign': '-',\n    'deleted-arrow': '<',\n    'inserted-sign': '+',\n    'inserted-arrow': '>',\n    'unchanged': ' ',\n    'diff': '!'\n  }; // add a token for each prefix\n\n  Object.keys(PREFIXES).forEach(function (name) {\n    var prefix = PREFIXES[name];\n    var alias = [];\n    if (!/^\\w+$/.test(name)) {\n      // \"deleted-sign\" -> \"deleted\"\n      alias.push(/\\w+/.exec(name)[0]);\n    }\n    if (name === \"diff\") {\n      alias.push(\"bold\");\n    }\n    Prism.languages.diff[name] = {\n      pattern: RegExp('^(?:[' + prefix + '].*(?:\\r\\n?|\\n|(?![\\\\s\\\\S])))+', 'm'),\n      alias: alias,\n      inside: {\n        'line': {\n          pattern: /(.)(?=[\\s\\S]).*(?:\\r\\n?|\\n)?/,\n          lookbehind: true\n        },\n        'prefix': {\n          pattern: /[\\s\\S]/,\n          alias: /\\w+/.exec(name)[0]\n        }\n      }\n    };\n  }); // make prefixes available to Diff plugin\n\n  Object.defineProperty(Prism.languages.diff, 'PREFIXES', {\n    value: PREFIXES\n  });\n})(Prism);\n/* \"prismjs/components/prism-git\" */\n\nPrism.languages.git = {\n  /*\n   * A simple one line comment like in a git status command\n   * For instance:\n   * $ git status\n   * # On branch infinite-scroll\n   * # Your branch and 'origin/sharedBranches/frontendTeam/infinite-scroll' have diverged,\n   * # and have 1 and 2 different commits each, respectively.\n   * nothing to commit (working directory clean)\n   */\n  'comment': /^#.*/m,\n  /*\n   * Regexp to match the changed lines in a git diff output. Check the example below.\n   */\n  'deleted': /^[-–].*/m,\n  'inserted': /^\\+.*/m,\n  /*\n   * a string (double and simple quote)\n   */\n  'string': /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/m,\n  /*\n   * a git command. It starts with a random prompt finishing by a $, then \"git\" then some other parameters\n   * For instance:\n   * $ git add file.txt\n   */\n  'command': {\n    pattern: /^.*\\$ git .*$/m,\n    inside: {\n      /*\n       * A git command can contain a parameter starting by a single or a double dash followed by a string\n       * For instance:\n       * $ git diff --cached\n       * $ git log -p\n       */\n      'parameter': /\\s--?\\w+/m\n    }\n  },\n  /*\n   * Coordinates displayed in a git diff command\n   * For instance:\n   * $ git diff\n   * diff --git file.txt file.txt\n   * index 6214953..1d54a52 100644\n   * --- file.txt\n   * +++ file.txt\n   * @@ -1 +1,2 @@\n   * -Here's my tetx file\n   * +Here's my text file\n   * +And this is the second line\n   */\n  'coord': /^@@.*@@$/m,\n  /*\n   * Match a \"commit [SHA1]\" line in a git log output.\n   * For instance:\n   * $ git log\n   * commit a11a14ef7e26f2ca62d4b35eac455ce636d0dc09\n   * Author: lgiraudel\n   * Date:   Mon Feb 17 11:18:34 2014 +0100\n   *\n   *     Add of a new line\n   */\n  'commit-sha1': /^commit \\w{40}$/m\n};\n/* \"prismjs/components/prism-go\" */\n\nPrism.languages.go = Prism.languages.extend('clike', {\n  'string': {\n    pattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n    greedy: true\n  },\n  'keyword': /\\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b/,\n  'boolean': /\\b(?:_|iota|nil|true|false)\\b/,\n  'number': /(?:\\b0x[a-f\\d]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[-+]?\\d+)?)i?/i,\n  'operator': /[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\./,\n  'builtin': /\\b(?:bool|byte|complex(?:64|128)|error|float(?:32|64)|rune|string|u?int(?:8|16|32|64)?|uintptr|append|cap|close|complex|copy|delete|imag|len|make|new|panic|print(?:ln)?|real|recover)\\b/\n});\ndelete Prism.languages.go['class-name'];\n/* \"prismjs/components/prism-graphql\" */\n\nPrism.languages.graphql = {\n  'comment': /#.*/,\n  'description': {\n    pattern: /(?:\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")(?=\\s*[a-z_])/i,\n    greedy: true,\n    alias: 'string',\n    inside: {\n      'language-markdown': {\n        pattern: /(^\"(?:\"\")?)(?!\\1)[\\s\\S]+(?=\\1$)/,\n        lookbehind: true,\n        inside: Prism.languages.markdown\n      }\n    }\n  },\n  'string': {\n    pattern: /\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n    greedy: true\n  },\n  'number': /(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n  'boolean': /\\b(?:true|false)\\b/,\n  'variable': /\\$[a-z_]\\w*/i,\n  'directive': {\n    pattern: /@[a-z_]\\w*/i,\n    alias: 'function'\n  },\n  'attr-name': {\n    pattern: /[a-z_]\\w*(?=\\s*(?:\\((?:[^()\"]|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")*\\))?:)/i,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /(\\b(?:enum|implements|interface|on|scalar|type|union)\\s+|&\\s*)[a-zA-Z_]\\w*/,\n    lookbehind: true\n  },\n  'fragment': {\n    pattern: /(\\bfragment\\s+|\\.{3}\\s*(?!on\\b))[a-zA-Z_]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'keyword': /\\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\\b/,\n  'operator': /[!=|&]|\\.{3}/,\n  'punctuation': /[!(){}\\[\\]:=,]/,\n  'constant': /\\b(?!ID\\b)[A-Z][A-Z_\\d]*\\b/\n};\n/* \"prismjs/components/prism-markup-templating\" */\n\n(function (Prism) {\n  /**\n   * Returns the placeholder for the given language id and index.\n   *\n   * @param {string} language\n   * @param {string|number} index\n   * @returns {string}\n   */\n  function getPlaceholder(language, index) {\n    return '___' + language.toUpperCase() + index + '___';\n  }\n  Object.defineProperties(Prism.languages['markup-templating'] = {}, {\n    buildPlaceholders: {\n      /**\n       * Tokenize all inline templating expressions matching `placeholderPattern`.\n       *\n       * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n       * `true` will be replaced.\n       *\n       * @param {object} env The environment of the `before-tokenize` hook.\n       * @param {string} language The language id.\n       * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n       * @param {(match: string) => boolean} [replaceFilter]\n       */\n      value: function (env, language, placeholderPattern, replaceFilter) {\n        if (env.language !== language) {\n          return;\n        }\n        var tokenStack = env.tokenStack = [];\n        env.code = env.code.replace(placeholderPattern, function (match) {\n          if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n            return match;\n          }\n          var i = tokenStack.length;\n          var placeholder; // Check for existing strings\n\n          while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {\n            ++i;\n          } // Create a sparse array\n\n          tokenStack[i] = match;\n          return placeholder;\n        }); // Switch the grammar to markup\n\n        env.grammar = Prism.languages.markup;\n      }\n    },\n    tokenizePlaceholders: {\n      /**\n       * Replace placeholders with proper tokens after tokenizing.\n       *\n       * @param {object} env The environment of the `after-tokenize` hook.\n       * @param {string} language The language id.\n       */\n      value: function (env, language) {\n        if (env.language !== language || !env.tokenStack) {\n          return;\n        } // Switch the grammar back\n\n        env.grammar = Prism.languages[language];\n        var j = 0;\n        var keys = Object.keys(env.tokenStack);\n        function walkTokens(tokens) {\n          for (var i = 0; i < tokens.length; i++) {\n            // all placeholders are replaced already\n            if (j >= keys.length) {\n              break;\n            }\n            var token = tokens[i];\n            if (typeof token === 'string' || token.content && typeof token.content === 'string') {\n              var k = keys[j];\n              var t = env.tokenStack[k];\n              var s = typeof token === 'string' ? token : token.content;\n              var placeholder = getPlaceholder(language, k);\n              var index = s.indexOf(placeholder);\n              if (index > -1) {\n                ++j;\n                var before = s.substring(0, index);\n                var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);\n                var after = s.substring(index + placeholder.length);\n                var replacement = [];\n                if (before) {\n                  replacement.push.apply(replacement, walkTokens([before]));\n                }\n                replacement.push(middle);\n                if (after) {\n                  replacement.push.apply(replacement, walkTokens([after]));\n                }\n                if (typeof token === 'string') {\n                  tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                } else {\n                  token.content = replacement;\n                }\n              }\n            } else if (token.content\n            /* && typeof token.content !== 'string' */) {\n              walkTokens(token.content);\n            }\n          }\n          return tokens;\n        }\n        walkTokens(env.tokens);\n      }\n    }\n  });\n})(Prism);\n/* \"prismjs/components/prism-handlebars\" */\n\n(function (Prism) {\n  Prism.languages.handlebars = {\n    'comment': /\\{\\{![\\s\\S]*?\\}\\}/,\n    'delimiter': {\n      pattern: /^\\{\\{\\{?|\\}\\}\\}?$/i,\n      alias: 'punctuation'\n    },\n    'string': /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n    'boolean': /\\b(?:true|false)\\b/,\n    'block': {\n      pattern: /^(\\s*(?:~\\s*)?)[#\\/]\\S+?(?=\\s*(?:~\\s*)?$|\\s)/i,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    'brackets': {\n      pattern: /\\[[^\\]]+\\]/,\n      inside: {\n        punctuation: /\\[|\\]/,\n        variable: /[\\s\\S]+/\n      }\n    },\n    'punctuation': /[!\"#%&':()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]/,\n    'variable': /[^!\"#%&'()*+,\\/;<=>@\\[\\\\\\]^`{|}~\\s]+/\n  };\n  Prism.hooks.add('before-tokenize', function (env) {\n    var handlebarsPattern = /\\{\\{\\{[\\s\\S]+?\\}\\}\\}|\\{\\{[\\s\\S]+?\\}\\}/g;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'handlebars', handlebarsPattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'handlebars');\n  });\n})(Prism);\n/* \"prismjs/components/prism-json\" */\n// https://www.json.org/json-en.html\n\nPrism.languages.json = {\n  'property': {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,\n    greedy: true\n  },\n  'string': {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,\n    greedy: true\n  },\n  'comment': {\n    pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    greedy: true\n  },\n  'number': /-?\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n  'punctuation': /[{}[\\],]/,\n  'operator': /:/,\n  'boolean': /\\b(?:true|false)\\b/,\n  'null': {\n    pattern: /\\bnull\\b/,\n    alias: 'keyword'\n  }\n};\nPrism.languages.webmanifest = Prism.languages.json;\n/* \"prismjs/components/prism-less\" */\n\n/* FIXME :\n :extend() is not handled specifically : its highlighting is buggy.\n Mixin usage must be inside a ruleset to be highlighted.\n At-rules (e.g. import) containing interpolations are buggy.\n Detached rulesets are highlighted as at-rules.\n A comment before a mixin usage prevents the latter to be properly highlighted.\n */\n\nPrism.languages.less = Prism.languages.extend('css', {\n  'comment': [/\\/\\*[\\s\\S]*?\\*\\//, {\n    pattern: /(^|[^\\\\])\\/\\/.*/,\n    lookbehind: true\n  }],\n  'atrule': {\n    pattern: /@[\\w-](?:\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n    inside: {\n      'punctuation': /[:()]/\n    }\n  },\n  // selectors and mixins are considered the same\n  'selector': {\n    pattern: /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};@\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n    inside: {\n      // mixin parameters\n      'variable': /@+[\\w-]+/\n    }\n  },\n  'property': /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/i,\n  'operator': /[+\\-*\\/]/\n});\nPrism.languages.insertBefore('less', 'property', {\n  'variable': [\n  // Variable declaration (the colon must be consumed!)\n  {\n    pattern: /@[\\w-]+\\s*:/,\n    inside: {\n      \"punctuation\": /:/\n    }\n  },\n  // Variable usage\n  /@@?[\\w-]+/],\n  'mixin-usage': {\n    pattern: /([{;]\\s*)[.#](?!\\d)[\\w-].*?(?=[(;])/,\n    lookbehind: true,\n    alias: 'function'\n  }\n});\n/* \"prismjs/components/prism-makefile\" */\n\nPrism.languages.makefile = {\n  'comment': {\n    pattern: /(^|[^\\\\])#(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/,\n    lookbehind: true\n  },\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  // Built-in target names\n  'builtin': /\\.[A-Z][^:#=\\s]+(?=\\s*:(?!=))/,\n  // Targets\n  'symbol': {\n    pattern: /^(?:[^:=\\s]|[ \\t]+(?![\\s:]))+(?=\\s*:(?!=))/m,\n    inside: {\n      'variable': /\\$+(?:(?!\\$)[^(){}:#=\\s]+|(?=[({]))/\n    }\n  },\n  'variable': /\\$+(?:(?!\\$)[^(){}:#=\\s]+|\\([@*%<^+?][DF]\\)|(?=[({]))/,\n  'keyword': [\n  // Directives\n  /-include\\b|\\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\\b/,\n  // Functions\n  {\n    pattern: /(\\()(?:addsuffix|abspath|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:s|list)?)(?=[ \\t])/,\n    lookbehind: true\n  }],\n  'operator': /(?:::|[?:+!])?=|[|@]/,\n  'punctuation': /[:;(){}]/\n};\n/* \"prismjs/components/prism-markdown\" */\n\n(function (Prism) {\n  // Allow only one line break\n  var inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\n|\\r\\n?)(?!\\n|\\r\\n?))/.source;\n  /**\n   * This function is intended for the creation of the bold or italic pattern.\n   *\n   * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\n   *\n   * _Note:_ Keep in mind that this adds a capturing group.\n   *\n   * @param {string} pattern\n   * @returns {RegExp}\n   */\n\n  function createInline(pattern) {\n    pattern = pattern.replace(/<inner>/g, function () {\n      return inner;\n    });\n    return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')');\n  }\n  var tableCell = /(?:\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source;\n  var tableRow = /\\|?__(?:\\|__)+\\|?(?:(?:\\n|\\r\\n?)|(?![\\s\\S]))/.source.replace(/__/g, function () {\n    return tableCell;\n  });\n  var tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\n|\\r\\n?)/.source;\n  Prism.languages.markdown = Prism.languages.extend('markup', {});\n  Prism.languages.insertBefore('markdown', 'prolog', {\n    'front-matter-block': {\n      pattern: /(^(?:\\s*[\\r\\n])?)---(?!.)[\\s\\S]*?[\\r\\n]---(?!.)/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'punctuation': /^---|---$/,\n        'font-matter': {\n          pattern: /\\S+(?:\\s+\\S+)*/,\n          alias: ['yaml', 'language-yaml'],\n          inside: Prism.languages.yaml\n        }\n      }\n    },\n    'blockquote': {\n      // > ...\n      pattern: /^>(?:[\\t ]*>)*/m,\n      alias: 'punctuation'\n    },\n    'table': {\n      pattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),\n      inside: {\n        'table-data-rows': {\n          pattern: RegExp('^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'),\n          lookbehind: true,\n          inside: {\n            'table-data': {\n              pattern: RegExp(tableCell),\n              inside: Prism.languages.markdown\n            },\n            'punctuation': /\\|/\n          }\n        },\n        'table-line': {\n          pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\n          lookbehind: true,\n          inside: {\n            'punctuation': /\\||:?-{3,}:?/\n          }\n        },\n        'table-header-row': {\n          pattern: RegExp('^' + tableRow + '$'),\n          inside: {\n            'table-header': {\n              pattern: RegExp(tableCell),\n              alias: 'important',\n              inside: Prism.languages.markdown\n            },\n            'punctuation': /\\|/\n          }\n        }\n      }\n    },\n    'code': [{\n      // Prefixed by 4 spaces or 1 tab and preceded by an empty line\n      pattern: /((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,\n      lookbehind: true,\n      alias: 'keyword'\n    }, {\n      // `code`\n      // ``code``\n      pattern: /``.+?``|`[^`\\r\\n]+`/,\n      alias: 'keyword'\n    }, {\n      // ```optional language\n      // code block\n      // ```\n      pattern: /^```[\\s\\S]*?^```$/m,\n      greedy: true,\n      inside: {\n        'code-block': {\n          pattern: /^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,\n          lookbehind: true\n        },\n        'code-language': {\n          pattern: /^(```).+/,\n          lookbehind: true\n        },\n        'punctuation': /```/\n      }\n    }],\n    'title': [{\n      // title 1\n      // =======\n      // title 2\n      // -------\n      pattern: /\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,\n      alias: 'important',\n      inside: {\n        punctuation: /==+$|--+$/\n      }\n    }, {\n      // # title 1\n      // ###### title 6\n      pattern: /(^\\s*)#.+/m,\n      lookbehind: true,\n      alias: 'important',\n      inside: {\n        punctuation: /^#+|#+$/\n      }\n    }],\n    'hr': {\n      // ***\n      // ---\n      // * * *\n      // -----------\n      pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'list': {\n      // * item\n      // + item\n      // - item\n      // 1. item\n      pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'url-reference': {\n      // [id]: http://example.com \"Optional title\"\n      // [id]: http://example.com 'Optional title'\n      // [id]: http://example.com (Optional title)\n      // [id]: <http://example.com> \"Optional title\"\n      pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n      inside: {\n        'variable': {\n          pattern: /^(!?\\[)[^\\]]+/,\n          lookbehind: true\n        },\n        'string': /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n        'punctuation': /^[\\[\\]!:]|[<>]/\n      },\n      alias: 'url'\n    },\n    'bold': {\n      // **strong**\n      // __strong__\n      // allow one nested instance of italic text using the same delimiter\n      pattern: createInline(/\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\b|\\*\\*(?:(?!\\*)<inner>|\\*(?:(?!\\*)<inner>)+\\*)+\\*\\*/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^..)[\\s\\S]+(?=..$)/,\n          lookbehind: true,\n          inside: {} // see below\n        },\n\n        'punctuation': /\\*\\*|__/\n      }\n    },\n    'italic': {\n      // *em*\n      // _em_\n      // allow one nested instance of bold text using the same delimiter\n      pattern: createInline(/\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\b|\\*(?:(?!\\*)<inner>|\\*\\*(?:(?!\\*)<inner>)+\\*\\*)+\\*/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^.)[\\s\\S]+(?=.$)/,\n          lookbehind: true,\n          inside: {} // see below\n        },\n\n        'punctuation': /[*_]/\n      }\n    },\n    'strike': {\n      // ~~strike through~~\n      // ~strike~\n      pattern: createInline(/(~~?)(?:(?!~)<inner>)+?\\2/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n          lookbehind: true,\n          inside: {} // see below\n        },\n\n        'punctuation': /~~?/\n      }\n    },\n    'url': {\n      // [example](http://example.com \"Optional title\")\n      // [example][id]\n      // [example] [id]\n      pattern: createInline(/!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)|[ \\t]?\\[(?:(?!\\])<inner>)+\\])/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'operator': /^!/,\n        'content': {\n          pattern: /(^\\[)[^\\]]+(?=\\])/,\n          lookbehind: true,\n          inside: {} // see below\n        },\n\n        'variable': {\n          pattern: /(^\\][ \\t]?\\[)[^\\]]+(?=\\]$)/,\n          lookbehind: true\n        },\n        'url': {\n          pattern: /(^\\]\\()[^\\s)]+/,\n          lookbehind: true\n        },\n        'string': {\n          pattern: /(^[ \\t]+)\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/,\n          lookbehind: true\n        }\n      }\n    }\n  });\n  ['url', 'bold', 'italic', 'strike'].forEach(function (token) {\n    ['url', 'bold', 'italic', 'strike'].forEach(function (inside) {\n      if (token !== inside) {\n        Prism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];\n      }\n    });\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'markdown' && env.language !== 'md') {\n      return;\n    }\n    function walkTokens(tokens) {\n      if (!tokens || typeof tokens === 'string') {\n        return;\n      }\n      for (var i = 0, l = tokens.length; i < l; i++) {\n        var token = tokens[i];\n        if (token.type !== 'code') {\n          walkTokens(token.content);\n          continue;\n        }\n        /*\n         * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\n         * is optional. But the grammar is defined so that there is only one case we have to handle:\n         *\n         * token.content = [\n         *     <span class=\"punctuation\">```</span>,\n         *     <span class=\"code-language\">xxxx</span>,\n         *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\n         *     <span class=\"code-block\">...</span>,\n         *     '\\n', // exactly one new lines again\n         *     <span class=\"punctuation\">```</span>\n         * ];\n         */\n\n        var codeLang = token.content[1];\n        var codeBlock = token.content[3];\n        if (codeLang && codeBlock && codeLang.type === 'code-language' && codeBlock.type === 'code-block' && typeof codeLang.content === 'string') {\n          // this might be a language that Prism does not support\n          // do some replacements to support C++, C#, and F#\n          var lang = codeLang.content.replace(/\\b#/g, 'sharp').replace(/\\b\\+\\+/g, 'pp'); // only use the first word\n\n          lang = (/[a-z][\\w-]*/i.exec(lang) || [''])[0].toLowerCase();\n          var alias = 'language-' + lang; // add alias\n\n          if (!codeBlock.alias) {\n            codeBlock.alias = [alias];\n          } else if (typeof codeBlock.alias === 'string') {\n            codeBlock.alias = [codeBlock.alias, alias];\n          } else {\n            codeBlock.alias.push(alias);\n          }\n        }\n      }\n    }\n    walkTokens(env.tokens);\n  });\n  Prism.hooks.add('wrap', function (env) {\n    if (env.type !== 'code-block') {\n      return;\n    }\n    var codeLang = '';\n    for (var i = 0, l = env.classes.length; i < l; i++) {\n      var cls = env.classes[i];\n      var match = /language-(.+)/.exec(cls);\n      if (match) {\n        codeLang = match[1];\n        break;\n      }\n    }\n    var grammar = Prism.languages[codeLang];\n    if (!grammar) {\n      if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\n        var id = 'md-' + new Date().valueOf() + '-' + Math.floor(Math.random() * 1e16);\n        env.attributes['id'] = id;\n        Prism.plugins.autoloader.loadLanguages(codeLang, function () {\n          var ele = document.getElementById(id);\n          if (ele) {\n            ele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);\n          }\n        });\n      }\n    } else {\n      // reverse Prism.util.encode\n      var code = env.content.replace(/&lt;/g, '<').replace(/&amp;/g, '&');\n      env.content = Prism.highlight(code, grammar, codeLang);\n    }\n  });\n  Prism.languages.md = Prism.languages.markdown;\n})(Prism);\n/* \"prismjs/components/prism-objectivec\" */\n\nPrism.languages.objectivec = Prism.languages.extend('c', {\n  'string': /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|@\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n  'keyword': /\\b(?:asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while|in|self|super)\\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\\b/,\n  'operator': /-[->]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/@]/\n});\ndelete Prism.languages.objectivec['class-name'];\nPrism.languages.objc = Prism.languages.objectivec;\n/* \"prismjs/components/prism-ocaml\" */\n\nPrism.languages.ocaml = {\n  'comment': /\\(\\*[\\s\\S]*?\\*\\)/,\n  'string': [{\n    pattern: /\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  }, {\n    pattern: /(['`])(?:\\\\(?:\\d+|x[\\da-f]+|.)|(?!\\1)[^\\\\\\r\\n])\\1/i,\n    greedy: true\n  }],\n  'number': /\\b(?:0x[\\da-f][\\da-f_]+|(?:0[bo])?\\d[\\d_]*(?:\\.[\\d_]*)?(?:e[+-]?[\\d_]+)?)/i,\n  'directive': {\n    pattern: /\\B#\\w+/,\n    alias: 'important'\n  },\n  'label': {\n    pattern: /\\B~\\w+/,\n    alias: 'function'\n  },\n  'type-variable': {\n    pattern: /\\B'\\w+/,\n    alias: 'function'\n  },\n  'variant': {\n    pattern: /`\\w+/,\n    alias: 'variable'\n  },\n  'module': {\n    pattern: /\\b[A-Z]\\w+/,\n    alias: 'variable'\n  },\n  // For the list of keywords and operators,\n  // see: http://caml.inria.fr/pub/docs/manual-ocaml/lex.html#sec84\n  'keyword': /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|value|virtual|when|where|while|with)\\b/,\n  'boolean': /\\b(?:false|true)\\b/,\n  // Custom operators are allowed\n  'operator': /:=|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lsl|lsr|lxor|mod|or)\\b/,\n  'punctuation': /[(){}\\[\\]|.,:;]|\\b_\\b/\n};\n/* \"prismjs/components/prism-python\" */\n\nPrism.languages.python = {\n  'comment': {\n    pattern: /(^|[^\\\\])#.*/,\n    lookbehind: true\n  },\n  'string-interpolation': {\n    pattern: /(?:f|rf|fr)(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2)/i,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        // \"{\" <expression> <optional \"!s\", \"!r\", or \"!a\"> <optional \":\" format specifier> \"}\"\n        pattern: /((?:^|[^{])(?:{{)*){(?!{)(?:[^{}]|{(?!{)(?:[^{}]|{(?!{)(?:[^{}])+})+})+}/,\n        lookbehind: true,\n        inside: {\n          'format-spec': {\n            pattern: /(:)[^:(){}]+(?=}$)/,\n            lookbehind: true\n          },\n          'conversion-option': {\n            pattern: /![sra](?=[:}]$)/,\n            alias: 'punctuation'\n          },\n          rest: null\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  },\n  'triple-quoted-string': {\n    pattern: /(?:[rub]|rb|br)?(\"\"\"|''')[\\s\\S]*?\\1/i,\n    greedy: true,\n    alias: 'string'\n  },\n  'string': {\n    pattern: /(?:[rub]|rb|br)?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/i,\n    greedy: true\n  },\n  'function': {\n    pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,\n    lookbehind: true\n  },\n  'class-name': {\n    pattern: /(\\bclass\\s+)\\w+/i,\n    lookbehind: true\n  },\n  'decorator': {\n    pattern: /(^\\s*)@\\w+(?:\\.\\w+)*/im,\n    lookbehind: true,\n    alias: ['annotation', 'punctuation'],\n    inside: {\n      'punctuation': /\\./\n    }\n  },\n  'keyword': /\\b(?:and|as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b/,\n  'builtin': /\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,\n  'boolean': /\\b(?:True|False|None)\\b/,\n  'number': /(?:\\b(?=\\d)|\\B(?=\\.))(?:0[bo])?(?:(?:\\d|0x[\\da-f])[\\da-f]*(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?j?\\b/i,\n  'operator': /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n  'punctuation': /[{}[\\];(),.:]/\n};\nPrism.languages.python['string-interpolation'].inside['interpolation'].inside.rest = Prism.languages.python;\nPrism.languages.py = Prism.languages.python;\n/* \"prismjs/components/prism-reason\" */\n\nPrism.languages.reason = Prism.languages.extend('clike', {\n  'string': {\n    pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  },\n  // 'class-name' must be matched *after* 'constructor' defined below\n  'class-name': /\\b[A-Z]\\w*/,\n  'keyword': /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,\n  'operator': /\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:mod|land|lor|lxor|lsl|lsr|asr)\\b/\n});\nPrism.languages.insertBefore('reason', 'class-name', {\n  'character': {\n    pattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,\n    alias: 'string'\n  },\n  'constructor': {\n    // Negative look-ahead prevents from matching things like String.capitalize\n    pattern: /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,\n    alias: 'variable'\n  },\n  'label': {\n    pattern: /\\b[a-z]\\w*(?=::)/,\n    alias: 'symbol'\n  }\n}); // We can't match functions property, so let's not even try.\n\ndelete Prism.languages.reason.function;\n/* \"prismjs/components/prism-sass\" */\n\n(function (Prism) {\n  Prism.languages.sass = Prism.languages.extend('css', {\n    // Sass comments don't need to be closed, only indented\n    'comment': {\n      pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('sass', 'atrule', {\n    // We want to consume the whole line\n    'atrule-line': {\n      // Includes support for = and + shortcuts\n      pattern: /^(?:[ \\t]*)[@+=].+/m,\n      inside: {\n        'atrule': /(?:@[\\w-]+|[+=])/m\n      }\n    }\n  });\n  delete Prism.languages.sass.atrule;\n  var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n  var operator = [/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/, {\n    pattern: /(\\s+)-(?=\\s)/,\n    lookbehind: true\n  }];\n  Prism.languages.insertBefore('sass', 'property', {\n    // We want to consume the whole line\n    'variable-line': {\n      pattern: /^[ \\t]*\\$.+/m,\n      inside: {\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator\n      }\n    },\n    // We want to consume the whole line\n    'property-line': {\n      pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,\n      inside: {\n        'property': [/[^:\\s]+(?=\\s*:)/, {\n          pattern: /(:)[^:\\s]+/,\n          lookbehind: true\n        }],\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator,\n        'important': Prism.languages.sass.important\n      }\n    }\n  });\n  delete Prism.languages.sass.property;\n  delete Prism.languages.sass.important; // Now that whole lines for other patterns are consumed,\n  // what's left should be selectors\n\n  Prism.languages.insertBefore('sass', 'punctuation', {\n    'selector': {\n      pattern: /([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/,\n      lookbehind: true\n    }\n  });\n})(Prism);\n/* \"prismjs/components/prism-scss\" */\n\nPrism.languages.scss = Prism.languages.extend('css', {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n    lookbehind: true\n  },\n  'atrule': {\n    pattern: /@[\\w-](?:\\([^()]+\\)|[^()\\s]|\\s+(?!\\s))*?(?=\\s+[{;])/,\n    inside: {\n      'rule': /@[\\w-]+/ // See rest below\n    }\n  },\n\n  // url, compassified\n  'url': /(?:[-a-z]+-)?url(?=\\()/i,\n  // CSS selector regex is not appropriate for Sass\n  // since there can be lot more things (var, @ directive, nesting..)\n  // a selector must start at the end of a property or after a brace (end of other rules or nesting)\n  // it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable\n  // the end of a selector is found when there is no rules in it ( {} or {\\s}) or if there is a property (because an interpolated var\n  // can \"pass\" as a selector- e.g: proper#{$erty})\n  // this one was hard to do, so please be careful if you edit this one :)\n  'selector': {\n    // Initial look-ahead is used to prevent matching of blank selectors\n    pattern: /(?=\\S)[^@;{}()]?(?:[^@;{}()\\s]|\\s+(?!\\s)|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}][^:{}]*[:{][^}]+))/m,\n    inside: {\n      'parent': {\n        pattern: /&/,\n        alias: 'important'\n      },\n      'placeholder': /%[-\\w]+/,\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  },\n  'property': {\n    pattern: /(?:[-\\w]|\\$[-\\w]|#\\{\\$[-\\w]+\\})+(?=\\s*:)/,\n    inside: {\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  }\n});\nPrism.languages.insertBefore('scss', 'atrule', {\n  'keyword': [/@(?:if|else(?: if)?|forward|for|each|while|import|use|extend|debug|warn|mixin|include|function|return|content)\\b/i, {\n    pattern: /( +)(?:from|through)(?= )/,\n    lookbehind: true\n  }]\n});\nPrism.languages.insertBefore('scss', 'important', {\n  // var and interpolated vars\n  'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n});\nPrism.languages.insertBefore('scss', 'function', {\n  'module-modifier': {\n    pattern: /\\b(?:as|with|show|hide)\\b/i,\n    alias: 'keyword'\n  },\n  'placeholder': {\n    pattern: /%[-\\w]+/,\n    alias: 'selector'\n  },\n  'statement': {\n    pattern: /\\B!(?:default|optional)\\b/i,\n    alias: 'keyword'\n  },\n  'boolean': /\\b(?:true|false)\\b/,\n  'null': {\n    pattern: /\\bnull\\b/,\n    alias: 'keyword'\n  },\n  'operator': {\n    pattern: /(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|or|not)(?=\\s)/,\n    lookbehind: true\n  }\n});\nPrism.languages.scss['atrule'].inside.rest = Prism.languages.scss;\n/* \"prismjs/components/prism-sql\" */\n\nPrism.languages.sql = {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,\n    lookbehind: true\n  },\n  'variable': [{\n    pattern: /@([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1/,\n    greedy: true\n  }, /@[\\w.$]+/],\n  'string': {\n    pattern: /(^|[^@\\\\])(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\]|\\2\\2)*\\2/,\n    greedy: true,\n    lookbehind: true\n  },\n  'function': /\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\s*\\()/i,\n  // Should we highlight user defined functions too?\n  'keyword': /\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:_INSERT|COL)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:S|ING)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\b/i,\n  'boolean': /\\b(?:TRUE|FALSE|NULL)\\b/i,\n  'number': /\\b0x[\\da-f]+\\b|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+\\b/i,\n  'operator': /[-+*\\/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\b(?:AND|BETWEEN|IN|LIKE|NOT|OR|IS|DIV|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\b/i,\n  'punctuation': /[;[\\]()`,.]/\n};\n/* \"prismjs/components/prism-stylus\" */\n\n(function (Prism) {\n  var unit = {\n    pattern: /(\\b\\d+)(?:%|[a-z]+)/,\n    lookbehind: true\n  }; // 123 -123 .123 -.123 12.3 -12.3\n\n  var number = {\n    pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n    lookbehind: true\n  };\n  var inside = {\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    },\n    'url': {\n      pattern: /url\\(([\"']?).*?\\1\\)/i,\n      greedy: true\n    },\n    'string': {\n      pattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\n      greedy: true\n    },\n    'interpolation': null,\n    // See below\n    'func': null,\n    // See below\n    'important': /\\B!(?:important|optional)\\b/i,\n    'keyword': {\n      pattern: /(^|\\s+)(?:(?:if|else|for|return|unless)(?=\\s+|$)|@[\\w-]+)/,\n      lookbehind: true\n    },\n    'hexcode': /#[\\da-f]{3,6}/i,\n    'color': [/\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i, {\n      pattern: /\\b(?:rgb|hsl)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:rgb|hsl)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n      inside: {\n        'unit': unit,\n        'number': number,\n        'function': /[\\w-]+(?=\\()/,\n        'punctuation': /[(),]/\n      }\n    }],\n    'entity': /\\\\[\\da-f]{1,8}/i,\n    'unit': unit,\n    'boolean': /\\b(?:true|false)\\b/,\n    'operator': [\n    // We want non-word chars around \"-\" because it is\n    // accepted in property names.\n    /~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.{2,3}|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/],\n    'number': number,\n    'punctuation': /[{}()\\[\\];:,]/\n  };\n  inside['interpolation'] = {\n    pattern: /\\{[^\\r\\n}:]+\\}/,\n    alias: 'variable',\n    inside: {\n      'delimiter': {\n        pattern: /^{|}$/,\n        alias: 'punctuation'\n      },\n      rest: inside\n    }\n  };\n  inside['func'] = {\n    pattern: /[\\w-]+\\([^)]*\\).*/,\n    inside: {\n      'function': /^[^(]+/,\n      rest: inside\n    }\n  };\n  Prism.languages.stylus = {\n    'atrule-declaration': {\n      pattern: /(^\\s*)@.+/m,\n      lookbehind: true,\n      inside: {\n        'atrule': /^@[\\w-]+/,\n        rest: inside\n      }\n    },\n    'variable-declaration': {\n      pattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:\\{[^{}]*\\}|\\S.*|$)/m,\n      lookbehind: true,\n      inside: {\n        'variable': /^\\S+/,\n        rest: inside\n      }\n    },\n    'statement': {\n      pattern: /(^[ \\t]*)(?:if|else|for|return|unless)[ \\t].+/m,\n      lookbehind: true,\n      inside: {\n        'keyword': /^\\S+/,\n        rest: inside\n      }\n    },\n    // A property/value pair cannot end with a comma or a brace\n    // It cannot have indented content unless it ended with a semicolon\n    'property-declaration': {\n      pattern: /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)(?!\\s)[^{\\r\\n]*(?:;|[^{\\r\\n,](?=$)(?!(?:\\r?\\n|\\r)(?:\\{|\\2[ \\t]+)))/m,\n      lookbehind: true,\n      inside: {\n        'property': {\n          pattern: /^[^\\s:]+/,\n          inside: {\n            'interpolation': inside.interpolation\n          }\n        },\n        rest: inside\n      }\n    },\n    // A selector can contain parentheses only as part of a pseudo-element\n    // It can span multiple lines.\n    // It must end with a comma or an accolade or have indented content.\n    'selector': {\n      pattern: /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t]+)))/m,\n      lookbehind: true,\n      inside: {\n        'interpolation': inside.interpolation,\n        'comment': inside.comment,\n        'punctuation': /[{},]/\n      }\n    },\n    'func': inside.func,\n    'string': inside.string,\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true,\n      greedy: true\n    },\n    'interpolation': inside.interpolation,\n    'punctuation': /[{}()\\[\\];:.]/\n  };\n})(Prism);\n/* \"prismjs/components/prism-typescript\" */\n\n(function (Prism) {\n  Prism.languages.typescript = Prism.languages.extend('javascript', {\n    'class-name': {\n      pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n      lookbehind: true,\n      greedy: true,\n      inside: null // see below\n    },\n\n    // From JavaScript Prism keyword list and TypeScript language spec: https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#221-reserved-words\n    'keyword': /\\b(?:abstract|as|asserts|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|undefined|var|void|while|with|yield)\\b/,\n    'builtin': /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/\n  }); // doesn't work with TS because TS is too complex\n\n  delete Prism.languages.typescript['parameter']; // a version of typescript specifically for highlighting types\n\n  var typeInside = Prism.languages.extend('typescript', {});\n  delete typeInside['class-name'];\n  Prism.languages.typescript['class-name'].inside = typeInside;\n  Prism.languages.insertBefore('typescript', 'function', {\n    'generic-function': {\n      // e.g. foo<T extends \"bar\" | \"baz\">( ...\n      pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n      greedy: true,\n      inside: {\n        'function': /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n        'generic': {\n          pattern: /<[\\s\\S]+/,\n          // everything after the first <\n          alias: 'class-name',\n          inside: typeInside\n        }\n      }\n    }\n  });\n  Prism.languages.ts = Prism.languages.typescript;\n})(Prism);\n/* \"prismjs/components/prism-tsx\" */\n\n(function (Prism) {\n  var typescript = Prism.util.clone(Prism.languages.typescript);\n  Prism.languages.tsx = Prism.languages.extend('jsx', typescript); // This will prevent collisions between TSX tags and TS generic types.\n  // Idea by https://github.com/karlhorky\n  // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n\n  var tag = Prism.languages.tsx.tag;\n  tag.pattern = RegExp(/(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')', tag.pattern.flags);\n  tag.lookbehind = true;\n})(Prism);\n/* \"prismjs/components/prism-wasm\" */\n\nPrism.languages.wasm = {\n  'comment': [/\\(;[\\s\\S]*?;\\)/, {\n    pattern: /;;.*/,\n    greedy: true\n  }],\n  'string': {\n    pattern: /\"(?:\\\\[\\s\\S]|[^\"\\\\])*\"/,\n    greedy: true\n  },\n  'keyword': [{\n    pattern: /\\b(?:align|offset)=/,\n    inside: {\n      'operator': /=/\n    }\n  }, {\n    pattern: /\\b(?:(?:f32|f64|i32|i64)(?:\\.(?:abs|add|and|ceil|clz|const|convert_[su]\\/i(?:32|64)|copysign|ctz|demote\\/f64|div(?:_[su])?|eqz?|extend_[su]\\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\\/f32|reinterpret\\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\\/f(?:32|64))?|wrap\\/i64|xor))?|memory\\.(?:grow|size))\\b/,\n    inside: {\n      'punctuation': /\\./\n    }\n  }, /\\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\\b/],\n  'variable': /\\$[\\w!#$%&'*+\\-./:<=>?@\\\\^_`|~]+/i,\n  'number': /[+-]?\\b(?:\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:[eE][+-]?\\d(?:_?\\d)*)?|0x[\\da-fA-F](?:_?[\\da-fA-F])*(?:\\.[\\da-fA-F](?:_?[\\da-fA-D])*)?(?:[pP][+-]?\\d(?:_?\\d)*)?)\\b|\\binf\\b|\\bnan(?::0x[\\da-fA-F](?:_?[\\da-fA-D])*)?\\b/,\n  'punctuation': /[()]/\n};\n/* \"prismjs/components/prism-yaml\" */\n\n(function (Prism) {\n  // https://yaml.org/spec/1.2/spec.html#c-ns-anchor-property\n  // https://yaml.org/spec/1.2/spec.html#c-ns-alias-node\n  var anchorOrAlias = /[*&][^\\s[\\]{},]+/; // https://yaml.org/spec/1.2/spec.html#c-ns-tag-property\n\n  var tag = /!(?:<[\\w\\-%#;/?:@&=+$,.!~*'()[\\]]+>|(?:[a-zA-Z\\d-]*!)?[\\w\\-%#;/?:@&=+$.~*'()]+)?/; // https://yaml.org/spec/1.2/spec.html#c-ns-properties(n,c)\n\n  var properties = '(?:' + tag.source + '(?:[ \\t]+' + anchorOrAlias.source + ')?|' + anchorOrAlias.source + '(?:[ \\t]+' + tag.source + ')?)'; // https://yaml.org/spec/1.2/spec.html#ns-plain(n,c)\n  // This is a simplified version that doesn't support \"#\" and multiline keys\n  // All these long scarry character classes are simplified versions of YAML's characters\n\n  var plainKey = /(?:[^\\s\\x00-\\x08\\x0e-\\x1f!\"#%&'*,\\-:>?@[\\]`{|}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]|[?:-]<PLAIN>)(?:[ \\t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source.replace(/<PLAIN>/g, function () {\n    return /[^\\s\\x00-\\x08\\x0e-\\x1f,[\\]{}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]/.source;\n  });\n  var string = /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\\\\\r\\n]|\\\\.)*'/.source;\n  /**\n   *\n   * @param {string} value\n   * @param {string} [flags]\n   * @returns {RegExp}\n   */\n\n  function createValuePattern(value, flags) {\n    flags = (flags || '').replace(/m/g, '') + 'm'; // add m flag\n\n    var pattern = /([:\\-,[{]\\s*(?:\\s<<prop>>[ \\t]+)?)(?:<<value>>)(?=[ \\t]*(?:$|,|]|}|(?:[\\r\\n]\\s*)?#))/.source.replace(/<<prop>>/g, function () {\n      return properties;\n    }).replace(/<<value>>/g, function () {\n      return value;\n    });\n    return RegExp(pattern, flags);\n  }\n  Prism.languages.yaml = {\n    'scalar': {\n      pattern: RegExp(/([\\-:]\\s*(?:\\s<<prop>>[ \\t]+)?[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)\\S[^\\r\\n]*(?:\\2[^\\r\\n]+)*)/.source.replace(/<<prop>>/g, function () {\n        return properties;\n      })),\n      lookbehind: true,\n      alias: 'string'\n    },\n    'comment': /#.*/,\n    'key': {\n      pattern: RegExp(/((?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:<<prop>>[ \\t]+)?)<<key>>(?=\\s*:\\s)/.source.replace(/<<prop>>/g, function () {\n        return properties;\n      }).replace(/<<key>>/g, function () {\n        return '(?:' + plainKey + '|' + string + ')';\n      })),\n      lookbehind: true,\n      greedy: true,\n      alias: 'atrule'\n    },\n    'directive': {\n      pattern: /(^[ \\t]*)%.+/m,\n      lookbehind: true,\n      alias: 'important'\n    },\n    'datetime': {\n      pattern: createValuePattern(/\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?(?:[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?))?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?/.source),\n      lookbehind: true,\n      alias: 'number'\n    },\n    'boolean': {\n      pattern: createValuePattern(/true|false/.source, 'i'),\n      lookbehind: true,\n      alias: 'important'\n    },\n    'null': {\n      pattern: createValuePattern(/null|~/.source, 'i'),\n      lookbehind: true,\n      alias: 'important'\n    },\n    'string': {\n      pattern: createValuePattern(string),\n      lookbehind: true,\n      greedy: true\n    },\n    'number': {\n      pattern: createValuePattern(/[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+(?:\\.\\d*)?|\\.?\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)/.source, 'i'),\n      lookbehind: true\n    },\n    'tag': tag,\n    'important': anchorOrAlias,\n    'punctuation': /---|[:[\\]{}\\-,|>?]|\\.\\.\\./\n  };\n  Prism.languages.yml = Prism.languages.yaml;\n})(Prism);\nexport default Prism;","map":{"version":3,"names":["Prism","uniqueId","_","util","encode","tokens","Token","type","content","alias","map","replace","o","Object","prototype","toString","call","match","objId","obj","defineProperty","value","clone","visited","key","hasOwnProperty","forEach","v","i","languages","extend","id","redef","lang","insertBefore","inside","before","insert","root","grammar","arguments","length","newToken","ret","token","DFS","callback","plugins","highlight","text","language","env","code","hooks","run","tokenize","stringify","matchGrammar","strarr","index","startPos","oneshot","target","patterns","j","pattern","lookbehind","greedy","lookbehindLength","global","flags","RegExp","source","pos","str","lastIndex","exec","from","to","k","p","len","delNum","slice","after","args","push","wrapped","Array","splice","apply","add","name","rest","matchedStr","parent","element","join","tag","classes","attributes","aliases","keys","markup","addInlined","tagName","includedCdataInside","def","html","mathml","svg","xml","ssml","atom","rss","envVars","commandAfterHeredoc","insideString","bash","variable","toBeCopied","shell","clike","c","keyword","cpp","string","css","selectorInside","selector","unit","number","javascript","regex","js","jsx","stringifyToken","walkTokens","openedTags","notTagNorBrace","pop","openedBraces","plainText","withId","unshift","maybeClassNameTokens","comment","interpolation","coffeescript","coffee","diff","PREFIXES","prefix","test","git","go","graphql","markdown","getPlaceholder","toUpperCase","defineProperties","buildPlaceholders","placeholderPattern","replaceFilter","tokenStack","placeholder","indexOf","tokenizePlaceholders","t","s","substring","middle","replacement","concat","handlebars","punctuation","handlebarsPattern","json","webmanifest","less","makefile","inner","createInline","tableCell","tableRow","tableLine","yaml","l","codeLang","codeBlock","toLowerCase","cls","autoloader","Date","valueOf","Math","floor","random","loadLanguages","ele","document","getElementById","innerHTML","textContent","md","objectivec","objc","ocaml","python","py","reason","function","sass","atrule","operator","important","property","scss","sql","stylus","func","typescript","typeInside","ts","tsx","wasm","anchorOrAlias","properties","plainKey","createValuePattern","yml"],"sources":["/Users/arturo.velazquez/Documents/GIT/SWE/TEMPLATES/react.my-asin-manager/node_modules/prism-react-renderer/prism/index.js"],"sourcesContent":["/**\n * Prism: Lightweight, robust, elegant syntax highlighting\n * MIT license http://www.opensource.org/licenses/mit-license.php/\n * @author Lea Verou http://lea.verou.me\n */\n\n/**\n * prism-react-renderer:\n * This file has been modified to remove:\n * - globals and window dependency\n * - worker support\n * - highlightAll and other element dependent methods\n * - _.hooks helpers\n * - UMD/node-specific hacks\n * It has also been run through prettier\n */\nvar Prism = function () {\n  var uniqueId = 0;\n  var _ = {\n    util: {\n      encode: function (tokens) {\n        if (tokens instanceof Token) {\n          return new Token(tokens.type, _.util.encode(tokens.content), tokens.alias);\n        } else if (_.util.type(tokens) === \"Array\") {\n          return tokens.map(_.util.encode);\n        } else {\n          return tokens.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/\\u00a0/g, \" \");\n        }\n      },\n      type: function (o) {\n        return Object.prototype.toString.call(o).match(/\\[object (\\w+)\\]/)[1];\n      },\n      objId: function (obj) {\n        if (!obj[\"__id\"]) {\n          Object.defineProperty(obj, \"__id\", {\n            value: ++uniqueId\n          });\n        }\n\n        return obj[\"__id\"];\n      },\n      // Deep clone a language definition (e.g. to extend it)\n      clone: function (o, visited) {\n        var type = _.util.type(o);\n\n        visited = visited || {};\n\n        switch (type) {\n          case \"Object\":\n            if (visited[_.util.objId(o)]) {\n              return visited[_.util.objId(o)];\n            }\n\n            var clone = {};\n            visited[_.util.objId(o)] = clone;\n\n            for (var key in o) {\n              if (o.hasOwnProperty(key)) {\n                clone[key] = _.util.clone(o[key], visited);\n              }\n            }\n\n            return clone;\n\n          case \"Array\":\n            if (visited[_.util.objId(o)]) {\n              return visited[_.util.objId(o)];\n            }\n\n            var clone = [];\n            visited[_.util.objId(o)] = clone;\n            o.forEach(function (v, i) {\n              clone[i] = _.util.clone(v, visited);\n            });\n            return clone;\n        }\n\n        return o;\n      }\n    },\n    languages: {\n      extend: function (id, redef) {\n        var lang = _.util.clone(_.languages[id]);\n\n        for (var key in redef) {\n          lang[key] = redef[key];\n        }\n\n        return lang;\n      },\n\n      /**\n       * Insert a token before another token in a language literal\n       * As this needs to recreate the object (we cannot actually insert before keys in object literals),\n       * we cannot just provide an object, we need anobject and a key.\n       * @param inside The key (or language id) of the parent\n       * @param before The key to insert before. If not provided, the function appends instead.\n       * @param insert Object with the key/value pairs to insert\n       * @param root The object that contains `inside`. If equal to Prism.languages, it can be omitted.\n       */\n      insertBefore: function (inside, before, insert, root) {\n        root = root || _.languages;\n        var grammar = root[inside];\n\n        if (arguments.length == 2) {\n          insert = arguments[1];\n\n          for (var newToken in insert) {\n            if (insert.hasOwnProperty(newToken)) {\n              grammar[newToken] = insert[newToken];\n            }\n          }\n\n          return grammar;\n        }\n\n        var ret = {};\n\n        for (var token in grammar) {\n          if (grammar.hasOwnProperty(token)) {\n            if (token == before) {\n              for (var newToken in insert) {\n                if (insert.hasOwnProperty(newToken)) {\n                  ret[newToken] = insert[newToken];\n                }\n              }\n            }\n\n            ret[token] = grammar[token];\n          }\n        } // Update references in other language definitions\n\n\n        _.languages.DFS(_.languages, function (key, value) {\n          if (value === root[inside] && key != inside) {\n            this[key] = ret;\n          }\n        });\n\n        return root[inside] = ret;\n      },\n      // Traverse a language definition with Depth First Search\n      DFS: function (o, callback, type, visited) {\n        visited = visited || {};\n\n        for (var i in o) {\n          if (o.hasOwnProperty(i)) {\n            callback.call(o, i, o[i], type || i);\n\n            if (_.util.type(o[i]) === \"Object\" && !visited[_.util.objId(o[i])]) {\n              visited[_.util.objId(o[i])] = true;\n\n              _.languages.DFS(o[i], callback, null, visited);\n            } else if (_.util.type(o[i]) === \"Array\" && !visited[_.util.objId(o[i])]) {\n              visited[_.util.objId(o[i])] = true;\n\n              _.languages.DFS(o[i], callback, i, visited);\n            }\n          }\n        }\n      }\n    },\n    plugins: {},\n    highlight: function (text, grammar, language) {\n      var env = {\n        code: text,\n        grammar: grammar,\n        language: language\n      };\n\n      _.hooks.run(\"before-tokenize\", env);\n\n      env.tokens = _.tokenize(env.code, env.grammar);\n\n      _.hooks.run(\"after-tokenize\", env);\n\n      return Token.stringify(_.util.encode(env.tokens), env.language);\n    },\n    matchGrammar: function (text, strarr, grammar, index, startPos, oneshot, target) {\n      var Token = _.Token;\n\n      for (var token in grammar) {\n        if (!grammar.hasOwnProperty(token) || !grammar[token]) {\n          continue;\n        }\n\n        if (token == target) {\n          return;\n        }\n\n        var patterns = grammar[token];\n        patterns = _.util.type(patterns) === \"Array\" ? patterns : [patterns];\n\n        for (var j = 0; j < patterns.length; ++j) {\n          var pattern = patterns[j],\n              inside = pattern.inside,\n              lookbehind = !!pattern.lookbehind,\n              greedy = !!pattern.greedy,\n              lookbehindLength = 0,\n              alias = pattern.alias;\n\n          if (greedy && !pattern.pattern.global) {\n            // Without the global flag, lastIndex won't work\n            var flags = pattern.pattern.toString().match(/[imuy]*$/)[0];\n            pattern.pattern = RegExp(pattern.pattern.source, flags + \"g\");\n          }\n\n          pattern = pattern.pattern || pattern; // Don’t cache length as it changes during the loop\n\n          for (var i = index, pos = startPos; i < strarr.length; pos += strarr[i].length, ++i) {\n            var str = strarr[i];\n\n            if (strarr.length > text.length) {\n              // Something went terribly wrong, ABORT, ABORT!\n              return;\n            }\n\n            if (str instanceof Token) {\n              continue;\n            }\n\n            if (greedy && i != strarr.length - 1) {\n              pattern.lastIndex = pos;\n              var match = pattern.exec(text);\n\n              if (!match) {\n                break;\n              }\n\n              var from = match.index + (lookbehind ? match[1].length : 0),\n                  to = match.index + match[0].length,\n                  k = i,\n                  p = pos;\n\n              for (var len = strarr.length; k < len && (p < to || !strarr[k].type && !strarr[k - 1].greedy); ++k) {\n                p += strarr[k].length; // Move the index i to the element in strarr that is closest to from\n\n                if (from >= p) {\n                  ++i;\n                  pos = p;\n                }\n              } // If strarr[i] is a Token, then the match starts inside another Token, which is invalid\n\n\n              if (strarr[i] instanceof Token) {\n                continue;\n              } // Number of tokens to delete and replace with the new match\n\n\n              delNum = k - i;\n              str = text.slice(pos, p);\n              match.index -= pos;\n            } else {\n              pattern.lastIndex = 0;\n              var match = pattern.exec(str),\n                  delNum = 1;\n            }\n\n            if (!match) {\n              if (oneshot) {\n                break;\n              }\n\n              continue;\n            }\n\n            if (lookbehind) {\n              lookbehindLength = match[1] ? match[1].length : 0;\n            }\n\n            var from = match.index + lookbehindLength,\n                match = match[0].slice(lookbehindLength),\n                to = from + match.length,\n                before = str.slice(0, from),\n                after = str.slice(to);\n            var args = [i, delNum];\n\n            if (before) {\n              ++i;\n              pos += before.length;\n              args.push(before);\n            }\n\n            var wrapped = new Token(token, inside ? _.tokenize(match, inside) : match, alias, match, greedy);\n            args.push(wrapped);\n\n            if (after) {\n              args.push(after);\n            }\n\n            Array.prototype.splice.apply(strarr, args);\n\n            if (delNum != 1) {\n              _.matchGrammar(text, strarr, grammar, i, pos, true, token);\n            }\n\n            if (oneshot) {\n              break;\n            }\n          }\n        }\n      }\n    },\n    hooks: {\n      add: function () {},\n      run: function (name, env) {}\n    },\n    tokenize: function (text, grammar, language) {\n      var strarr = [text];\n      var rest = grammar.rest;\n\n      if (rest) {\n        for (var token in rest) {\n          grammar[token] = rest[token];\n        }\n\n        delete grammar.rest;\n      }\n\n      _.matchGrammar(text, strarr, grammar, 0, 0, false);\n\n      return strarr;\n    }\n  };\n\n  var Token = _.Token = function (type, content, alias, matchedStr, greedy) {\n    this.type = type;\n    this.content = content;\n    this.alias = alias; // Copy of the full string this token was created from\n\n    this.length = (matchedStr || \"\").length | 0;\n    this.greedy = !!greedy;\n  };\n\n  Token.stringify = function (o, language, parent) {\n    if (typeof o == \"string\") {\n      return o;\n    }\n\n    if (_.util.type(o) === \"Array\") {\n      return o.map(function (element) {\n        return Token.stringify(element, language, o);\n      }).join(\"\");\n    }\n\n    var env = {\n      type: o.type,\n      content: Token.stringify(o.content, language, parent),\n      tag: \"span\",\n      classes: [\"token\", o.type],\n      attributes: {},\n      language: language,\n      parent: parent\n    };\n\n    if (o.alias) {\n      var aliases = _.util.type(o.alias) === \"Array\" ? o.alias : [o.alias];\n      Array.prototype.push.apply(env.classes, aliases);\n    }\n\n    var attributes = Object.keys(env.attributes).map(function (name) {\n      return name + '=\"' + (env.attributes[name] || \"\").replace(/\"/g, \"&quot;\") + '\"';\n    }).join(\" \");\n    return \"<\" + env.tag + ' class=\"' + env.classes.join(\" \") + '\"' + (attributes ? \" \" + attributes : \"\") + \">\" + env.content + \"</\" + env.tag + \">\";\n  };\n\n  return _;\n}();\n\n/* This content is auto-generated to include some prismjs language components: */\n\n/* \"prismjs/components/prism-markup\" */\n\nPrism.languages.markup = {\n  'comment': /<!--[\\s\\S]*?-->/,\n  'prolog': /<\\?[\\s\\S]+?\\?>/,\n  'doctype': {\n    // https://www.w3.org/TR/xml/#NT-doctypedecl\n    pattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n    greedy: true,\n    inside: {\n      'internal-subset': {\n        pattern: /(\\[)[\\s\\S]+(?=\\]>$)/,\n        lookbehind: true,\n        greedy: true,\n        inside: null // see below\n\n      },\n      'string': {\n        pattern: /\"[^\"]*\"|'[^']*'/,\n        greedy: true\n      },\n      'punctuation': /^<!|>$|[[\\]]/,\n      'doctype-tag': /^DOCTYPE/,\n      'name': /[^\\s<>'\"]+/\n    }\n  },\n  'cdata': /<!\\[CDATA\\[[\\s\\S]*?]]>/i,\n  'tag': {\n    pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n    greedy: true,\n    inside: {\n      'tag': {\n        pattern: /^<\\/?[^\\s>\\/]+/,\n        inside: {\n          'punctuation': /^<\\/?/,\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      },\n      'attr-value': {\n        pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n        inside: {\n          'punctuation': [{\n            pattern: /^=/,\n            alias: 'attr-equals'\n          }, /\"|'/]\n        }\n      },\n      'punctuation': /\\/?>/,\n      'attr-name': {\n        pattern: /[^\\s>\\/]+/,\n        inside: {\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      }\n    }\n  },\n  'entity': [{\n    pattern: /&[\\da-z]{1,8};/i,\n    alias: 'named-entity'\n  }, /&#x?[\\da-f]{1,8};/i]\n};\nPrism.languages.markup['tag'].inside['attr-value'].inside['entity'] = Prism.languages.markup['entity'];\nPrism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup; // Plugin to make entity title show the real entity, idea by Roman Komarov\n\nPrism.hooks.add('wrap', function (env) {\n  if (env.type === 'entity') {\n    env.attributes['title'] = env.content.replace(/&amp;/, '&');\n  }\n});\nObject.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n  /**\n   * Adds an inlined language to markup.\n   *\n   * An example of an inlined language is CSS with `<style>` tags.\n   *\n   * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n   * case insensitive.\n   * @param {string} lang The language key.\n   * @example\n   * addInlined('style', 'css');\n   */\n  value: function addInlined(tagName, lang) {\n    var includedCdataInside = {};\n    includedCdataInside['language-' + lang] = {\n      pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n      lookbehind: true,\n      inside: Prism.languages[lang]\n    };\n    includedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n    var inside = {\n      'included-cdata': {\n        pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n        inside: includedCdataInside\n      }\n    };\n    inside['language-' + lang] = {\n      pattern: /[\\s\\S]+/,\n      inside: Prism.languages[lang]\n    };\n    var def = {};\n    def[tagName] = {\n      pattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () {\n        return tagName;\n      }), 'i'),\n      lookbehind: true,\n      greedy: true,\n      inside: inside\n    };\n    Prism.languages.insertBefore('markup', 'cdata', def);\n  }\n});\nPrism.languages.html = Prism.languages.markup;\nPrism.languages.mathml = Prism.languages.markup;\nPrism.languages.svg = Prism.languages.markup;\nPrism.languages.xml = Prism.languages.extend('markup', {});\nPrism.languages.ssml = Prism.languages.xml;\nPrism.languages.atom = Prism.languages.xml;\nPrism.languages.rss = Prism.languages.xml;\n/* \"prismjs/components/prism-bash\" */\n\n(function (Prism) {\n  // $ set | grep '^[A-Z][^[:space:]]*=' | cut -d= -f1 | tr '\\n' '|'\n  // + LC_ALL, RANDOM, REPLY, SECONDS.\n  // + make sure PS1..4 are here as they are not always set,\n  // - some useless things.\n  var envVars = '\\\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\\\b';\n  var commandAfterHeredoc = {\n    pattern: /(^([\"']?)\\w+\\2)[ \\t]+\\S.*/,\n    lookbehind: true,\n    alias: 'punctuation',\n    // this looks reasonably well in all themes\n    inside: null // see below\n\n  };\n  var insideString = {\n    'bash': commandAfterHeredoc,\n    'environment': {\n      pattern: RegExp(\"\\\\$\" + envVars),\n      alias: 'constant'\n    },\n    'variable': [// [0]: Arithmetic Environment\n    {\n      pattern: /\\$?\\(\\([\\s\\S]+?\\)\\)/,\n      greedy: true,\n      inside: {\n        // If there is a $ sign at the beginning highlight $(( and )) as variable\n        'variable': [{\n          pattern: /(^\\$\\(\\([\\s\\S]+)\\)\\)/,\n          lookbehind: true\n        }, /^\\$\\(\\(/],\n        'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n        // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic\n        'operator': /--?|-=|\\+\\+?|\\+=|!=?|~|\\*\\*?|\\*=|\\/=?|%=?|<<=?|>>=?|<=?|>=?|==?|&&?|&=|\\^=?|\\|\\|?|\\|=|\\?|:/,\n        // If there is no $ sign at the beginning highlight (( and )) as punctuation\n        'punctuation': /\\(\\(?|\\)\\)?|,|;/\n      }\n    }, // [1]: Command Substitution\n    {\n      pattern: /\\$\\((?:\\([^)]+\\)|[^()])+\\)|`[^`]+`/,\n      greedy: true,\n      inside: {\n        'variable': /^\\$\\(|^`|\\)$|`$/\n      }\n    }, // [2]: Brace expansion\n    {\n      pattern: /\\$\\{[^}]+\\}/,\n      greedy: true,\n      inside: {\n        'operator': /:[-=?+]?|[!\\/]|##?|%%?|\\^\\^?|,,?/,\n        'punctuation': /[\\[\\]]/,\n        'environment': {\n          pattern: RegExp(\"(\\\\{)\" + envVars),\n          lookbehind: true,\n          alias: 'constant'\n        }\n      }\n    }, /\\$(?:\\w+|[#?*!@$])/],\n    // Escape sequences from echo and printf's manuals, and escaped quotes.\n    'entity': /\\\\(?:[abceEfnrtv\\\\\"]|O?[0-7]{1,3}|x[0-9a-fA-F]{1,2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})/\n  };\n  Prism.languages.bash = {\n    'shebang': {\n      pattern: /^#!\\s*\\/.*/,\n      alias: 'important'\n    },\n    'comment': {\n      pattern: /(^|[^\"{\\\\$])#.*/,\n      lookbehind: true\n    },\n    'function-name': [// a) function foo {\n    // b) foo() {\n    // c) function foo() {\n    // but not “foo {”\n    {\n      // a) and c)\n      pattern: /(\\bfunction\\s+)\\w+(?=(?:\\s*\\(?:\\s*\\))?\\s*\\{)/,\n      lookbehind: true,\n      alias: 'function'\n    }, {\n      // b)\n      pattern: /\\b\\w+(?=\\s*\\(\\s*\\)\\s*\\{)/,\n      alias: 'function'\n    }],\n    // Highlight variable names as variables in for and select beginnings.\n    'for-or-select': {\n      pattern: /(\\b(?:for|select)\\s+)\\w+(?=\\s+in\\s)/,\n      alias: 'variable',\n      lookbehind: true\n    },\n    // Highlight variable names as variables in the left-hand part\n    // of assignments (“=” and “+=”).\n    'assign-left': {\n      pattern: /(^|[\\s;|&]|[<>]\\()\\w+(?=\\+?=)/,\n      inside: {\n        'environment': {\n          pattern: RegExp(\"(^|[\\\\s;|&]|[<>]\\\\()\" + envVars),\n          lookbehind: true,\n          alias: 'constant'\n        }\n      },\n      alias: 'variable',\n      lookbehind: true\n    },\n    'string': [// Support for Here-documents https://en.wikipedia.org/wiki/Here_document\n    {\n      pattern: /((?:^|[^<])<<-?\\s*)(\\w+?)\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\2/,\n      lookbehind: true,\n      greedy: true,\n      inside: insideString\n    }, // Here-document with quotes around the tag\n    // → No expansion (so no “inside”).\n    {\n      pattern: /((?:^|[^<])<<-?\\s*)([\"'])(\\w+)\\2\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\3/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'bash': commandAfterHeredoc\n      }\n    }, // “Normal” string\n    {\n      pattern: /(^|[^\\\\](?:\\\\\\\\)*)([\"'])(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|\\$(?!\\()|`[^`]+`|(?!\\2)[^\\\\`$])*\\2/,\n      lookbehind: true,\n      greedy: true,\n      inside: insideString\n    }],\n    'environment': {\n      pattern: RegExp(\"\\\\$?\" + envVars),\n      alias: 'constant'\n    },\n    'variable': insideString.variable,\n    'function': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:add|apropos|apt|aptitude|apt-cache|apt-get|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    'keyword': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:if|then|else|elif|fi|for|while|in|case|esac|function|select|do|done|until)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    // https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\n    'builtin': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:\\.|:|break|cd|continue|eval|exec|exit|export|getopts|hash|pwd|readonly|return|shift|test|times|trap|umask|unset|alias|bind|builtin|caller|command|declare|echo|enable|help|let|local|logout|mapfile|printf|read|readarray|source|type|typeset|ulimit|unalias|set|shopt)(?=$|[)\\s;|&])/,\n      lookbehind: true,\n      // Alias added to make those easier to distinguish from strings.\n      alias: 'class-name'\n    },\n    'boolean': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:true|false)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    'file-descriptor': {\n      pattern: /\\B&\\d\\b/,\n      alias: 'important'\n    },\n    'operator': {\n      // Lots of redirections here, but not just that.\n      pattern: /\\d?<>|>\\||\\+=|==?|!=?|=~|<<[<-]?|[&\\d]?>>|\\d?[<>]&?|&[>&]?|\\|[&|]?|<=?|>=?/,\n      inside: {\n        'file-descriptor': {\n          pattern: /^\\d/,\n          alias: 'important'\n        }\n      }\n    },\n    'punctuation': /\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];\\\\]/,\n    'number': {\n      pattern: /(^|\\s)(?:[1-9]\\d*|0)(?:[.,]\\d+)?\\b/,\n      lookbehind: true\n    }\n  };\n  commandAfterHeredoc.inside = Prism.languages.bash;\n  /* Patterns in command substitution. */\n\n  var toBeCopied = ['comment', 'function-name', 'for-or-select', 'assign-left', 'string', 'environment', 'function', 'keyword', 'builtin', 'boolean', 'file-descriptor', 'operator', 'punctuation', 'number'];\n  var inside = insideString.variable[1].inside;\n\n  for (var i = 0; i < toBeCopied.length; i++) {\n    inside[toBeCopied[i]] = Prism.languages.bash[toBeCopied[i]];\n  }\n\n  Prism.languages.shell = Prism.languages.bash;\n})(Prism);\n/* \"prismjs/components/prism-clike\" */\n\n\nPrism.languages.clike = {\n  'comment': [{\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    lookbehind: true,\n    greedy: true\n  }, {\n    pattern: /(^|[^\\\\:])\\/\\/.*/,\n    lookbehind: true,\n    greedy: true\n  }],\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /(\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n    lookbehind: true,\n    inside: {\n      'punctuation': /[.\\\\]/\n    }\n  },\n  'keyword': /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n  'boolean': /\\b(?:true|false)\\b/,\n  'function': /\\w+(?=\\()/,\n  'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n  'operator': /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n  'punctuation': /[{}[\\];(),.:]/\n};\n/* \"prismjs/components/prism-c\" */\n\nPrism.languages.c = Prism.languages.extend('clike', {\n  'comment': {\n    pattern: /\\/\\/(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n?|\\n|(?![\\r\\n])))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /(\\b(?:enum|struct)\\s+(?:__attribute__\\s*\\(\\([\\s\\S]*?\\)\\)\\s*)?)\\w+|\\b[a-z]\\w*_t\\b/,\n    lookbehind: true\n  },\n  'keyword': /\\b(?:__attribute__|_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\\b/,\n  'function': /[a-z_]\\w*(?=\\s*\\()/i,\n  'number': /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,\n  'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/\n});\nPrism.languages.insertBefore('c', 'string', {\n  'macro': {\n    // allow for multiline macro definitions\n    // spaces after the # character compile fine with gcc\n    pattern: /(^\\s*)#\\s*[a-z](?:[^\\r\\n\\\\/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n    lookbehind: true,\n    greedy: true,\n    alias: 'property',\n    inside: {\n      'string': [{\n        // highlight the path of the include statement as a string\n        pattern: /^(#\\s*include\\s*)<[^>]+>/,\n        lookbehind: true\n      }, Prism.languages.c['string']],\n      'comment': Prism.languages.c['comment'],\n      'macro-name': [{\n        pattern: /(^#\\s*define\\s+)\\w+\\b(?!\\()/i,\n        lookbehind: true\n      }, {\n        pattern: /(^#\\s*define\\s+)\\w+\\b(?=\\()/i,\n        lookbehind: true,\n        alias: 'function'\n      }],\n      // highlight macro directives as keywords\n      'directive': {\n        pattern: /^(#\\s*)[a-z]+/,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      'directive-hash': /^#/,\n      'punctuation': /##|\\\\(?=[\\r\\n])/,\n      'expression': {\n        pattern: /\\S[\\s\\S]*/,\n        inside: Prism.languages.c\n      }\n    }\n  },\n  // highlight predefined macros as constants\n  'constant': /\\b(?:__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|stdin|stdout|stderr)\\b/\n});\ndelete Prism.languages.c['boolean'];\n/* \"prismjs/components/prism-cpp\" */\n\n(function (Prism) {\n  var keyword = /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char8_t|char16_t|char32_t|class|compl|concept|const|consteval|constexpr|constinit|const_cast|continue|co_await|co_return|co_yield|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|float|for|friend|goto|if|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/;\n  Prism.languages.cpp = Prism.languages.extend('c', {\n    'class-name': [{\n      pattern: RegExp(/(\\b(?:class|concept|enum|struct|typename)\\s+)(?!<keyword>)\\w+/.source.replace(/<keyword>/g, function () {\n        return keyword.source;\n      })),\n      lookbehind: true\n    }, // This is intended to capture the class name of method implementations like:\n    //   void foo::bar() const {}\n    // However! The `foo` in the above example could also be a namespace, so we only capture the class name if\n    // it starts with an uppercase letter. This approximation should give decent results.\n    /\\b[A-Z]\\w*(?=\\s*::\\s*\\w+\\s*\\()/, // This will capture the class name before destructors like:\n    //   Foo::~Foo() {}\n    /\\b[A-Z_]\\w*(?=\\s*::\\s*~\\w+\\s*\\()/i, // This also intends to capture the class name of method implementations but here the class has template\n    // parameters, so it can't be a namespace (until C++ adds generic namespaces).\n    /\\w+(?=\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\\s*::\\s*\\w+\\s*\\()/],\n    'keyword': keyword,\n    'number': {\n      pattern: /(?:\\b0b[01']+|\\b0x(?:[\\da-f']+(?:\\.[\\da-f']*)?|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+(?:\\.[\\d']*)?|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]{0,4}/i,\n      greedy: true\n    },\n    'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|<=>|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,\n    'boolean': /\\b(?:true|false)\\b/\n  });\n  Prism.languages.insertBefore('cpp', 'string', {\n    'raw-string': {\n      pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n      alias: 'string',\n      greedy: true\n    }\n  });\n  Prism.languages.insertBefore('cpp', 'class-name', {\n    // the base clause is an optional list of parent classes\n    // https://en.cppreference.com/w/cpp/language/class\n    'base-clause': {\n      pattern: /(\\b(?:class|struct)\\s+\\w+\\s*:\\s*)[^;{}\"'\\s]+(?:\\s+[^;{}\"'\\s]+)*(?=\\s*[;{])/,\n      lookbehind: true,\n      greedy: true,\n      inside: Prism.languages.extend('cpp', {})\n    }\n  });\n  Prism.languages.insertBefore('inside', 'operator', {\n    // All untokenized words that are not namespaces should be class names\n    'class-name': /\\b[a-z_]\\w*\\b(?!\\s*::)/i\n  }, Prism.languages.cpp['base-clause']);\n})(Prism);\n/* \"prismjs/components/prism-css\" */\n\n\n(function (Prism) {\n  var string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n  Prism.languages.css = {\n    'comment': /\\/\\*[\\s\\S]*?\\*\\//,\n    'atrule': {\n      pattern: /@[\\w-](?:[^;{\\s]|\\s+(?![\\s{]))*(?:;|(?=\\s*\\{))/,\n      inside: {\n        'rule': /^@[\\w-]+/,\n        'selector-function-argument': {\n          pattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\n          lookbehind: true,\n          alias: 'selector'\n        },\n        'keyword': {\n          pattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n          lookbehind: true\n        } // See rest below\n\n      }\n    },\n    'url': {\n      // https://drafts.csswg.org/css-values-3/#urls\n      pattern: RegExp('\\\\burl\\\\((?:' + string.source + '|' + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + ')\\\\)', 'i'),\n      greedy: true,\n      inside: {\n        'function': /^url/i,\n        'punctuation': /^\\(|\\)$/,\n        'string': {\n          pattern: RegExp('^' + string.source + '$'),\n          alias: 'url'\n        }\n      }\n    },\n    'selector': RegExp('[^{}\\\\s](?:[^{};\"\\'\\\\s]|\\\\s+(?![\\\\s{])|' + string.source + ')*(?=\\\\s*\\\\{)'),\n    'string': {\n      pattern: string,\n      greedy: true\n    },\n    'property': /(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\n    'important': /!important\\b/i,\n    'function': /[-a-z0-9]+(?=\\()/i,\n    'punctuation': /[(){};:,]/\n  };\n  Prism.languages.css['atrule'].inside.rest = Prism.languages.css;\n  var markup = Prism.languages.markup;\n\n  if (markup) {\n    markup.tag.addInlined('style', 'css');\n    Prism.languages.insertBefore('inside', 'attr-value', {\n      'style-attr': {\n        pattern: /(^|[\"'\\s])style\\s*=\\s*(?:\"[^\"]*\"|'[^']*')/i,\n        lookbehind: true,\n        inside: {\n          'attr-value': {\n            pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n            inside: {\n              'style': {\n                pattern: /([\"'])[\\s\\S]+(?=[\"']$)/,\n                lookbehind: true,\n                alias: 'language-css',\n                inside: Prism.languages.css\n              },\n              'punctuation': [{\n                pattern: /^=/,\n                alias: 'attr-equals'\n              }, /\"|'/]\n            }\n          },\n          'attr-name': /^style/i\n        }\n      }\n    }, markup.tag);\n  }\n})(Prism);\n/* \"prismjs/components/prism-css-extras\" */\n\n\n(function (Prism) {\n  var string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n  var selectorInside;\n  Prism.languages.css.selector = {\n    pattern: Prism.languages.css.selector,\n    inside: selectorInside = {\n      'pseudo-element': /:(?:after|before|first-letter|first-line|selection)|::[-\\w]+/,\n      'pseudo-class': /:[-\\w]+/,\n      'class': /\\.[-\\w]+/,\n      'id': /#[-\\w]+/,\n      'attribute': {\n        pattern: RegExp('\\\\[(?:[^[\\\\]\"\\']|' + string.source + ')*\\\\]'),\n        greedy: true,\n        inside: {\n          'punctuation': /^\\[|\\]$/,\n          'case-sensitivity': {\n            pattern: /(\\s)[si]$/i,\n            lookbehind: true,\n            alias: 'keyword'\n          },\n          'namespace': {\n            pattern: /^(\\s*)(?:(?!\\s)[-*\\w\\xA0-\\uFFFF])*\\|(?!=)/,\n            lookbehind: true,\n            inside: {\n              'punctuation': /\\|$/\n            }\n          },\n          'attr-name': {\n            pattern: /^(\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+/,\n            lookbehind: true\n          },\n          'attr-value': [string, {\n            pattern: /(=\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+(?=\\s*$)/,\n            lookbehind: true\n          }],\n          'operator': /[|~*^$]?=/\n        }\n      },\n      'n-th': [{\n        pattern: /(\\(\\s*)[+-]?\\d*[\\dn](?:\\s*[+-]\\s*\\d+)?(?=\\s*\\))/,\n        lookbehind: true,\n        inside: {\n          'number': /[\\dn]+/,\n          'operator': /[+-]/\n        }\n      }, {\n        pattern: /(\\(\\s*)(?:even|odd)(?=\\s*\\))/i,\n        lookbehind: true\n      }],\n      'combinator': />|\\+|~|\\|\\|/,\n      // the `tag` token has been existed and removed.\n      // because we can't find a perfect tokenize to match it.\n      // if you want to add it, please read https://github.com/PrismJS/prism/pull/2373 first.\n      'punctuation': /[(),]/\n    }\n  };\n  Prism.languages.css['atrule'].inside['selector-function-argument'].inside = selectorInside;\n  Prism.languages.insertBefore('css', 'property', {\n    'variable': {\n      pattern: /(^|[^-\\w\\xA0-\\uFFFF])--(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*/i,\n      lookbehind: true\n    }\n  });\n  var unit = {\n    pattern: /(\\b\\d+)(?:%|[a-z]+\\b)/,\n    lookbehind: true\n  }; // 123 -123 .123 -.123 12.3 -12.3\n\n  var number = {\n    pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n    lookbehind: true\n  };\n  Prism.languages.insertBefore('css', 'function', {\n    'operator': {\n      pattern: /(\\s)[+\\-*\\/](?=\\s)/,\n      lookbehind: true\n    },\n    // CAREFUL!\n    // Previewers and Inline color use hexcode and color.\n    'hexcode': {\n      pattern: /\\B#(?:[\\da-f]{1,2}){3,4}\\b/i,\n      alias: 'color'\n    },\n    'color': [/\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i, {\n      pattern: /\\b(?:rgb|hsl)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:rgb|hsl)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n      inside: {\n        'unit': unit,\n        'number': number,\n        'function': /[\\w-]+(?=\\()/,\n        'punctuation': /[(),]/\n      }\n    }],\n    // it's important that there is no boundary assertion after the hex digits\n    'entity': /\\\\[\\da-f]{1,8}/i,\n    'unit': unit,\n    'number': number\n  });\n})(Prism);\n/* \"prismjs/components/prism-javascript\" */\n\n\nPrism.languages.javascript = Prism.languages.extend('clike', {\n  'class-name': [Prism.languages.clike['class-name'], {\n    pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:prototype|constructor))/,\n    lookbehind: true\n  }],\n  'keyword': [{\n    pattern: /((?:^|})\\s*)(?:catch|finally)\\b/,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|(?:get|set)(?=\\s*[\\[$\\w\\xA0-\\uFFFF])|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n    lookbehind: true\n  }],\n  // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n  'function': /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n  'number': /\\b(?:(?:0[xX](?:[\\dA-Fa-f](?:_[\\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\\d(?:_\\d)?)+n|NaN|Infinity)\\b|(?:\\b(?:\\d(?:_\\d)?)+\\.?(?:\\d(?:_\\d)?)*|\\B\\.(?:\\d(?:_\\d)?)+)(?:[Ee][+-]?(?:\\d(?:_\\d)?)+)?/,\n  'operator': /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n});\nPrism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/;\nPrism.languages.insertBefore('javascript', 'keyword', {\n  'regex': {\n    pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyus]{0,6}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/,\n    lookbehind: true,\n    greedy: true,\n    inside: {\n      'regex-source': {\n        pattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n        lookbehind: true,\n        alias: 'language-regex',\n        inside: Prism.languages.regex\n      },\n      'regex-flags': /[a-z]+$/,\n      'regex-delimiter': /^\\/|\\/$/\n    }\n  },\n  // This must be declared before keyword because we use \"function\" inside the look-forward\n  'function-variable': {\n    pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n    alias: 'function'\n  },\n  'parameter': [{\n    pattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }],\n  'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\nPrism.languages.insertBefore('javascript', 'string', {\n  'template-string': {\n    pattern: /`(?:\\\\[\\s\\S]|\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}|(?!\\${)[^\\\\`])*`/,\n    greedy: true,\n    inside: {\n      'template-punctuation': {\n        pattern: /^`|`$/,\n        alias: 'string'\n      },\n      'interpolation': {\n        pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}/,\n        lookbehind: true,\n        inside: {\n          'interpolation-punctuation': {\n            pattern: /^\\${|}$/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.javascript\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  }\n});\n\nif (Prism.languages.markup) {\n  Prism.languages.markup.tag.addInlined('script', 'javascript');\n}\n\nPrism.languages.js = Prism.languages.javascript;\n/* \"prismjs/components/prism-jsx\" */\n\n(function (Prism) {\n  var javascript = Prism.util.clone(Prism.languages.javascript);\n  Prism.languages.jsx = Prism.languages.extend('markup', javascript);\n  Prism.languages.jsx.tag.pattern = /<\\/?(?:[\\w.:-]+(?:\\s+(?:[\\w.:$-]+(?:=(?:\"(?:\\\\[^]|[^\\\\\"])*\"|'(?:\\\\[^]|[^\\\\'])*'|[^\\s{'\">=]+|\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])+\\}))?|\\{\\s*\\.{3}\\s*[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\s*\\}))*\\s*\\/?)?>/i;\n  Prism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/i;\n  Prism.languages.jsx.tag.inside['attr-value'].pattern = /=(?!\\{)(?:\"(?:\\\\[^]|[^\\\\\"])*\"|'(?:\\\\[^]|[^\\\\'])*'|[^\\s'\">]+)/i;\n  Prism.languages.jsx.tag.inside['tag'].inside['class-name'] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/;\n  Prism.languages.insertBefore('inside', 'attr-name', {\n    'spread': {\n      pattern: /\\{\\s*\\.{3}\\s*[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\s*\\}/,\n      inside: {\n        'punctuation': /\\.{3}|[{}.]/,\n        'attr-value': /\\w+/\n      }\n    }\n  }, Prism.languages.jsx.tag);\n  Prism.languages.insertBefore('inside', 'attr-value', {\n    'script': {\n      // Allow for two levels of nesting\n      pattern: /=(?:\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])+\\})/i,\n      inside: {\n        'script-punctuation': {\n          pattern: /^=(?={)/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.jsx\n      },\n      'alias': 'language-javascript'\n    }\n  }, Prism.languages.jsx.tag); // The following will handle plain text inside tags\n\n  var stringifyToken = function (token) {\n    if (!token) {\n      return '';\n    }\n\n    if (typeof token === 'string') {\n      return token;\n    }\n\n    if (typeof token.content === 'string') {\n      return token.content;\n    }\n\n    return token.content.map(stringifyToken).join('');\n  };\n\n  var walkTokens = function (tokens) {\n    var openedTags = [];\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n      var notTagNorBrace = false;\n\n      if (typeof token !== 'string') {\n        if (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {\n          // We found a tag, now find its kind\n          if (token.content[0].content[0].content === '</') {\n            // Closing tag\n            if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {\n              // Pop matching opening tag\n              openedTags.pop();\n            }\n          } else {\n            if (token.content[token.content.length - 1].content === '/>') ; else {\n              // Opening tag\n              openedTags.push({\n                tagName: stringifyToken(token.content[0].content[1]),\n                openedBraces: 0\n              });\n            }\n          }\n        } else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{') {\n          // Here we might have entered a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces++;\n        } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {\n          // Here we might have left a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces--;\n        } else {\n          notTagNorBrace = true;\n        }\n      }\n\n      if (notTagNorBrace || typeof token === 'string') {\n        if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n          // Here we are inside a tag, and not inside a JSX context.\n          // That's plain text: drop any tokens matched.\n          var plainText = stringifyToken(token); // And merge text with adjacent text\n\n          if (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {\n            plainText += stringifyToken(tokens[i + 1]);\n            tokens.splice(i + 1, 1);\n          }\n\n          if (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {\n            plainText = stringifyToken(tokens[i - 1]) + plainText;\n            tokens.splice(i - 1, 1);\n            i--;\n          }\n\n          tokens[i] = new Prism.Token('plain-text', plainText, null, plainText);\n        }\n      }\n\n      if (token.content && typeof token.content !== 'string') {\n        walkTokens(token.content);\n      }\n    }\n  };\n\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'jsx' && env.language !== 'tsx') {\n      return;\n    }\n\n    walkTokens(env.tokens);\n  });\n})(Prism);\n/* \"prismjs/components/prism-js-extras\" */\n\n\n(function (Prism) {\n  Prism.languages.insertBefore('javascript', 'function-variable', {\n    'method-variable': {\n      pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function-variable'].pattern.source),\n      lookbehind: true,\n      alias: ['function-variable', 'method', 'function', 'property-access']\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'function', {\n    'method': {\n      pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function'].source),\n      lookbehind: true,\n      alias: ['function', 'property-access']\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'constant', {\n    'known-class-name': [{\n      // standard built-ins\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\n      pattern: /\\b(?:(?:(?:Uint|Int)(?:8|16|32)|Uint8Clamped|Float(?:32|64))?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|(?:Weak)?(?:Set|Map)|WebAssembly)\\b/,\n      alias: 'class-name'\n    }, {\n      // errors\n      pattern: /\\b(?:[A-Z]\\w*)Error\\b/,\n      alias: 'class-name'\n    }]\n  });\n  /**\n   * Replaces the `<ID>` placeholder in the given pattern with a pattern for general JS identifiers.\n   *\n   * @param {string} source\n   * @param {string} [flags]\n   * @returns {RegExp}\n   */\n\n  function withId(source, flags) {\n    return RegExp(source.replace(/<ID>/g, function () {\n      return /(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/.source;\n    }), flags);\n  }\n\n  Prism.languages.insertBefore('javascript', 'keyword', {\n    'imports': {\n      // https://tc39.es/ecma262/#sec-imports\n      pattern: withId(/(\\bimport\\b\\s*)(?:<ID>(?:\\s*,\\s*(?:\\*\\s*as\\s+<ID>|\\{[^{}]*\\}))?|\\*\\s*as\\s+<ID>|\\{[^{}]*\\})(?=\\s*\\bfrom\\b)/.source),\n      lookbehind: true,\n      inside: Prism.languages.javascript\n    },\n    'exports': {\n      // https://tc39.es/ecma262/#sec-exports\n      pattern: withId(/(\\bexport\\b\\s*)(?:\\*(?:\\s*as\\s+<ID>)?(?=\\s*\\bfrom\\b)|\\{[^{}]*\\})/.source),\n      lookbehind: true,\n      inside: Prism.languages.javascript\n    }\n  });\n  Prism.languages.javascript['keyword'].unshift({\n    pattern: /\\b(?:as|default|export|from|import)\\b/,\n    alias: 'module'\n  }, {\n    pattern: /\\b(?:await|break|catch|continue|do|else|for|finally|if|return|switch|throw|try|while|yield)\\b/,\n    alias: 'control-flow'\n  }, {\n    pattern: /\\bnull\\b/,\n    alias: ['null', 'nil']\n  }, {\n    pattern: /\\bundefined\\b/,\n    alias: 'nil'\n  });\n  Prism.languages.insertBefore('javascript', 'operator', {\n    'spread': {\n      pattern: /\\.{3}/,\n      alias: 'operator'\n    },\n    'arrow': {\n      pattern: /=>/,\n      alias: 'operator'\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'punctuation', {\n    'property-access': {\n      pattern: withId(/(\\.\\s*)#?<ID>/.source),\n      lookbehind: true\n    },\n    'maybe-class-name': {\n      pattern: /(^|[^$\\w\\xA0-\\uFFFF])[A-Z][$\\w\\xA0-\\uFFFF]+/,\n      lookbehind: true\n    },\n    'dom': {\n      // this contains only a few commonly used DOM variables\n      pattern: /\\b(?:document|location|navigator|performance|(?:local|session)Storage|window)\\b/,\n      alias: 'variable'\n    },\n    'console': {\n      pattern: /\\bconsole(?=\\s*\\.)/,\n      alias: 'class-name'\n    }\n  }); // add 'maybe-class-name' to tokens which might be a class name\n\n  var maybeClassNameTokens = ['function', 'function-variable', 'method', 'method-variable', 'property-access'];\n\n  for (var i = 0; i < maybeClassNameTokens.length; i++) {\n    var token = maybeClassNameTokens[i];\n    var value = Prism.languages.javascript[token]; // convert regex to object\n\n    if (Prism.util.type(value) === 'RegExp') {\n      value = Prism.languages.javascript[token] = {\n        pattern: value\n      };\n    } // keep in mind that we don't support arrays\n\n\n    var inside = value.inside || {};\n    value.inside = inside;\n    inside['maybe-class-name'] = /^[A-Z][\\s\\S]*/;\n  }\n})(Prism);\n/* \"prismjs/components/prism-coffeescript\" */\n\n\n(function (Prism) {\n  // Ignore comments starting with { to privilege string interpolation highlighting\n  var comment = /#(?!\\{).+/,\n      interpolation = {\n    pattern: /#\\{[^}]+\\}/,\n    alias: 'variable'\n  };\n  Prism.languages.coffeescript = Prism.languages.extend('javascript', {\n    'comment': comment,\n    'string': [// Strings are multiline\n    {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: true\n    }, {\n      // Strings are multiline\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }],\n    'keyword': /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n    'class-member': {\n      pattern: /@(?!\\d)\\w+/,\n      alias: 'variable'\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'comment', {\n    'multiline-comment': {\n      pattern: /###[\\s\\S]+?###/,\n      alias: 'comment'\n    },\n    // Block regexp can contain comments and interpolation\n    'block-regex': {\n      pattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n      alias: 'regex',\n      inside: {\n        'comment': comment,\n        'interpolation': interpolation\n      }\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'string', {\n    'inline-javascript': {\n      pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n      inside: {\n        'delimiter': {\n          pattern: /^`|`$/,\n          alias: 'punctuation'\n        },\n        'script': {\n          pattern: /[\\s\\S]+/,\n          alias: 'language-javascript',\n          inside: Prism.languages.javascript\n        }\n      }\n    },\n    // Block strings\n    'multiline-string': [{\n      pattern: /'''[\\s\\S]*?'''/,\n      greedy: true,\n      alias: 'string'\n    }, {\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        interpolation: interpolation\n      }\n    }]\n  });\n  Prism.languages.insertBefore('coffeescript', 'keyword', {\n    // Object property\n    'property': /(?!\\d)\\w+(?=\\s*:(?!:))/\n  });\n  delete Prism.languages.coffeescript['template-string'];\n  Prism.languages.coffee = Prism.languages.coffeescript;\n})(Prism);\n/* \"prismjs/components/prism-diff\" */\n\n\n(function (Prism) {\n  Prism.languages.diff = {\n    'coord': [// Match all kinds of coord lines (prefixed by \"+++\", \"---\" or \"***\").\n    /^(?:\\*{3}|-{3}|\\+{3}).*$/m, // Match \"@@ ... @@\" coord lines in unified diff.\n    /^@@.*@@$/m, // Match coord lines in normal diff (starts with a number).\n    /^\\d.*$/m] // deleted, inserted, unchanged, diff\n\n  };\n  /**\n   * A map from the name of a block to its line prefix.\n   *\n   * @type {Object<string, string>}\n   */\n\n  var PREFIXES = {\n    'deleted-sign': '-',\n    'deleted-arrow': '<',\n    'inserted-sign': '+',\n    'inserted-arrow': '>',\n    'unchanged': ' ',\n    'diff': '!'\n  }; // add a token for each prefix\n\n  Object.keys(PREFIXES).forEach(function (name) {\n    var prefix = PREFIXES[name];\n    var alias = [];\n\n    if (!/^\\w+$/.test(name)) {\n      // \"deleted-sign\" -> \"deleted\"\n      alias.push(/\\w+/.exec(name)[0]);\n    }\n\n    if (name === \"diff\") {\n      alias.push(\"bold\");\n    }\n\n    Prism.languages.diff[name] = {\n      pattern: RegExp('^(?:[' + prefix + '].*(?:\\r\\n?|\\n|(?![\\\\s\\\\S])))+', 'm'),\n      alias: alias,\n      inside: {\n        'line': {\n          pattern: /(.)(?=[\\s\\S]).*(?:\\r\\n?|\\n)?/,\n          lookbehind: true\n        },\n        'prefix': {\n          pattern: /[\\s\\S]/,\n          alias: /\\w+/.exec(name)[0]\n        }\n      }\n    };\n  }); // make prefixes available to Diff plugin\n\n  Object.defineProperty(Prism.languages.diff, 'PREFIXES', {\n    value: PREFIXES\n  });\n})(Prism);\n/* \"prismjs/components/prism-git\" */\n\n\nPrism.languages.git = {\n  /*\n   * A simple one line comment like in a git status command\n   * For instance:\n   * $ git status\n   * # On branch infinite-scroll\n   * # Your branch and 'origin/sharedBranches/frontendTeam/infinite-scroll' have diverged,\n   * # and have 1 and 2 different commits each, respectively.\n   * nothing to commit (working directory clean)\n   */\n  'comment': /^#.*/m,\n\n  /*\n   * Regexp to match the changed lines in a git diff output. Check the example below.\n   */\n  'deleted': /^[-–].*/m,\n  'inserted': /^\\+.*/m,\n\n  /*\n   * a string (double and simple quote)\n   */\n  'string': /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/m,\n\n  /*\n   * a git command. It starts with a random prompt finishing by a $, then \"git\" then some other parameters\n   * For instance:\n   * $ git add file.txt\n   */\n  'command': {\n    pattern: /^.*\\$ git .*$/m,\n    inside: {\n      /*\n       * A git command can contain a parameter starting by a single or a double dash followed by a string\n       * For instance:\n       * $ git diff --cached\n       * $ git log -p\n       */\n      'parameter': /\\s--?\\w+/m\n    }\n  },\n\n  /*\n   * Coordinates displayed in a git diff command\n   * For instance:\n   * $ git diff\n   * diff --git file.txt file.txt\n   * index 6214953..1d54a52 100644\n   * --- file.txt\n   * +++ file.txt\n   * @@ -1 +1,2 @@\n   * -Here's my tetx file\n   * +Here's my text file\n   * +And this is the second line\n   */\n  'coord': /^@@.*@@$/m,\n\n  /*\n   * Match a \"commit [SHA1]\" line in a git log output.\n   * For instance:\n   * $ git log\n   * commit a11a14ef7e26f2ca62d4b35eac455ce636d0dc09\n   * Author: lgiraudel\n   * Date:   Mon Feb 17 11:18:34 2014 +0100\n   *\n   *     Add of a new line\n   */\n  'commit-sha1': /^commit \\w{40}$/m\n};\n/* \"prismjs/components/prism-go\" */\n\nPrism.languages.go = Prism.languages.extend('clike', {\n  'string': {\n    pattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n    greedy: true\n  },\n  'keyword': /\\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b/,\n  'boolean': /\\b(?:_|iota|nil|true|false)\\b/,\n  'number': /(?:\\b0x[a-f\\d]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[-+]?\\d+)?)i?/i,\n  'operator': /[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\./,\n  'builtin': /\\b(?:bool|byte|complex(?:64|128)|error|float(?:32|64)|rune|string|u?int(?:8|16|32|64)?|uintptr|append|cap|close|complex|copy|delete|imag|len|make|new|panic|print(?:ln)?|real|recover)\\b/\n});\ndelete Prism.languages.go['class-name'];\n/* \"prismjs/components/prism-graphql\" */\n\nPrism.languages.graphql = {\n  'comment': /#.*/,\n  'description': {\n    pattern: /(?:\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")(?=\\s*[a-z_])/i,\n    greedy: true,\n    alias: 'string',\n    inside: {\n      'language-markdown': {\n        pattern: /(^\"(?:\"\")?)(?!\\1)[\\s\\S]+(?=\\1$)/,\n        lookbehind: true,\n        inside: Prism.languages.markdown\n      }\n    }\n  },\n  'string': {\n    pattern: /\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n    greedy: true\n  },\n  'number': /(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n  'boolean': /\\b(?:true|false)\\b/,\n  'variable': /\\$[a-z_]\\w*/i,\n  'directive': {\n    pattern: /@[a-z_]\\w*/i,\n    alias: 'function'\n  },\n  'attr-name': {\n    pattern: /[a-z_]\\w*(?=\\s*(?:\\((?:[^()\"]|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")*\\))?:)/i,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /(\\b(?:enum|implements|interface|on|scalar|type|union)\\s+|&\\s*)[a-zA-Z_]\\w*/,\n    lookbehind: true\n  },\n  'fragment': {\n    pattern: /(\\bfragment\\s+|\\.{3}\\s*(?!on\\b))[a-zA-Z_]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'keyword': /\\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\\b/,\n  'operator': /[!=|&]|\\.{3}/,\n  'punctuation': /[!(){}\\[\\]:=,]/,\n  'constant': /\\b(?!ID\\b)[A-Z][A-Z_\\d]*\\b/\n};\n/* \"prismjs/components/prism-markup-templating\" */\n\n(function (Prism) {\n  /**\n   * Returns the placeholder for the given language id and index.\n   *\n   * @param {string} language\n   * @param {string|number} index\n   * @returns {string}\n   */\n  function getPlaceholder(language, index) {\n    return '___' + language.toUpperCase() + index + '___';\n  }\n\n  Object.defineProperties(Prism.languages['markup-templating'] = {}, {\n    buildPlaceholders: {\n      /**\n       * Tokenize all inline templating expressions matching `placeholderPattern`.\n       *\n       * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n       * `true` will be replaced.\n       *\n       * @param {object} env The environment of the `before-tokenize` hook.\n       * @param {string} language The language id.\n       * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n       * @param {(match: string) => boolean} [replaceFilter]\n       */\n      value: function (env, language, placeholderPattern, replaceFilter) {\n        if (env.language !== language) {\n          return;\n        }\n\n        var tokenStack = env.tokenStack = [];\n        env.code = env.code.replace(placeholderPattern, function (match) {\n          if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n            return match;\n          }\n\n          var i = tokenStack.length;\n          var placeholder; // Check for existing strings\n\n          while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {\n            ++i;\n          } // Create a sparse array\n\n\n          tokenStack[i] = match;\n          return placeholder;\n        }); // Switch the grammar to markup\n\n        env.grammar = Prism.languages.markup;\n      }\n    },\n    tokenizePlaceholders: {\n      /**\n       * Replace placeholders with proper tokens after tokenizing.\n       *\n       * @param {object} env The environment of the `after-tokenize` hook.\n       * @param {string} language The language id.\n       */\n      value: function (env, language) {\n        if (env.language !== language || !env.tokenStack) {\n          return;\n        } // Switch the grammar back\n\n\n        env.grammar = Prism.languages[language];\n        var j = 0;\n        var keys = Object.keys(env.tokenStack);\n\n        function walkTokens(tokens) {\n          for (var i = 0; i < tokens.length; i++) {\n            // all placeholders are replaced already\n            if (j >= keys.length) {\n              break;\n            }\n\n            var token = tokens[i];\n\n            if (typeof token === 'string' || token.content && typeof token.content === 'string') {\n              var k = keys[j];\n              var t = env.tokenStack[k];\n              var s = typeof token === 'string' ? token : token.content;\n              var placeholder = getPlaceholder(language, k);\n              var index = s.indexOf(placeholder);\n\n              if (index > -1) {\n                ++j;\n                var before = s.substring(0, index);\n                var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);\n                var after = s.substring(index + placeholder.length);\n                var replacement = [];\n\n                if (before) {\n                  replacement.push.apply(replacement, walkTokens([before]));\n                }\n\n                replacement.push(middle);\n\n                if (after) {\n                  replacement.push.apply(replacement, walkTokens([after]));\n                }\n\n                if (typeof token === 'string') {\n                  tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                } else {\n                  token.content = replacement;\n                }\n              }\n            } else if (token.content\n            /* && typeof token.content !== 'string' */\n            ) {\n                walkTokens(token.content);\n              }\n          }\n\n          return tokens;\n        }\n\n        walkTokens(env.tokens);\n      }\n    }\n  });\n})(Prism);\n/* \"prismjs/components/prism-handlebars\" */\n\n\n(function (Prism) {\n  Prism.languages.handlebars = {\n    'comment': /\\{\\{![\\s\\S]*?\\}\\}/,\n    'delimiter': {\n      pattern: /^\\{\\{\\{?|\\}\\}\\}?$/i,\n      alias: 'punctuation'\n    },\n    'string': /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n    'boolean': /\\b(?:true|false)\\b/,\n    'block': {\n      pattern: /^(\\s*(?:~\\s*)?)[#\\/]\\S+?(?=\\s*(?:~\\s*)?$|\\s)/i,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    'brackets': {\n      pattern: /\\[[^\\]]+\\]/,\n      inside: {\n        punctuation: /\\[|\\]/,\n        variable: /[\\s\\S]+/\n      }\n    },\n    'punctuation': /[!\"#%&':()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]/,\n    'variable': /[^!\"#%&'()*+,\\/;<=>@\\[\\\\\\]^`{|}~\\s]+/\n  };\n  Prism.hooks.add('before-tokenize', function (env) {\n    var handlebarsPattern = /\\{\\{\\{[\\s\\S]+?\\}\\}\\}|\\{\\{[\\s\\S]+?\\}\\}/g;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'handlebars', handlebarsPattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'handlebars');\n  });\n})(Prism);\n/* \"prismjs/components/prism-json\" */\n// https://www.json.org/json-en.html\n\n\nPrism.languages.json = {\n  'property': {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,\n    greedy: true\n  },\n  'string': {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,\n    greedy: true\n  },\n  'comment': {\n    pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    greedy: true\n  },\n  'number': /-?\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n  'punctuation': /[{}[\\],]/,\n  'operator': /:/,\n  'boolean': /\\b(?:true|false)\\b/,\n  'null': {\n    pattern: /\\bnull\\b/,\n    alias: 'keyword'\n  }\n};\nPrism.languages.webmanifest = Prism.languages.json;\n/* \"prismjs/components/prism-less\" */\n\n/* FIXME :\n :extend() is not handled specifically : its highlighting is buggy.\n Mixin usage must be inside a ruleset to be highlighted.\n At-rules (e.g. import) containing interpolations are buggy.\n Detached rulesets are highlighted as at-rules.\n A comment before a mixin usage prevents the latter to be properly highlighted.\n */\n\nPrism.languages.less = Prism.languages.extend('css', {\n  'comment': [/\\/\\*[\\s\\S]*?\\*\\//, {\n    pattern: /(^|[^\\\\])\\/\\/.*/,\n    lookbehind: true\n  }],\n  'atrule': {\n    pattern: /@[\\w-](?:\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n    inside: {\n      'punctuation': /[:()]/\n    }\n  },\n  // selectors and mixins are considered the same\n  'selector': {\n    pattern: /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};@\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n    inside: {\n      // mixin parameters\n      'variable': /@+[\\w-]+/\n    }\n  },\n  'property': /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/i,\n  'operator': /[+\\-*\\/]/\n});\nPrism.languages.insertBefore('less', 'property', {\n  'variable': [// Variable declaration (the colon must be consumed!)\n  {\n    pattern: /@[\\w-]+\\s*:/,\n    inside: {\n      \"punctuation\": /:/\n    }\n  }, // Variable usage\n  /@@?[\\w-]+/],\n  'mixin-usage': {\n    pattern: /([{;]\\s*)[.#](?!\\d)[\\w-].*?(?=[(;])/,\n    lookbehind: true,\n    alias: 'function'\n  }\n});\n/* \"prismjs/components/prism-makefile\" */\n\nPrism.languages.makefile = {\n  'comment': {\n    pattern: /(^|[^\\\\])#(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/,\n    lookbehind: true\n  },\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  // Built-in target names\n  'builtin': /\\.[A-Z][^:#=\\s]+(?=\\s*:(?!=))/,\n  // Targets\n  'symbol': {\n    pattern: /^(?:[^:=\\s]|[ \\t]+(?![\\s:]))+(?=\\s*:(?!=))/m,\n    inside: {\n      'variable': /\\$+(?:(?!\\$)[^(){}:#=\\s]+|(?=[({]))/\n    }\n  },\n  'variable': /\\$+(?:(?!\\$)[^(){}:#=\\s]+|\\([@*%<^+?][DF]\\)|(?=[({]))/,\n  'keyword': [// Directives\n  /-include\\b|\\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\\b/, // Functions\n  {\n    pattern: /(\\()(?:addsuffix|abspath|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:s|list)?)(?=[ \\t])/,\n    lookbehind: true\n  }],\n  'operator': /(?:::|[?:+!])?=|[|@]/,\n  'punctuation': /[:;(){}]/\n};\n/* \"prismjs/components/prism-markdown\" */\n\n(function (Prism) {\n  // Allow only one line break\n  var inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\n|\\r\\n?)(?!\\n|\\r\\n?))/.source;\n  /**\n   * This function is intended for the creation of the bold or italic pattern.\n   *\n   * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\n   *\n   * _Note:_ Keep in mind that this adds a capturing group.\n   *\n   * @param {string} pattern\n   * @returns {RegExp}\n   */\n\n  function createInline(pattern) {\n    pattern = pattern.replace(/<inner>/g, function () {\n      return inner;\n    });\n    return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')');\n  }\n\n  var tableCell = /(?:\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source;\n  var tableRow = /\\|?__(?:\\|__)+\\|?(?:(?:\\n|\\r\\n?)|(?![\\s\\S]))/.source.replace(/__/g, function () {\n    return tableCell;\n  });\n  var tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\n|\\r\\n?)/.source;\n  Prism.languages.markdown = Prism.languages.extend('markup', {});\n  Prism.languages.insertBefore('markdown', 'prolog', {\n    'front-matter-block': {\n      pattern: /(^(?:\\s*[\\r\\n])?)---(?!.)[\\s\\S]*?[\\r\\n]---(?!.)/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'punctuation': /^---|---$/,\n        'font-matter': {\n          pattern: /\\S+(?:\\s+\\S+)*/,\n          alias: ['yaml', 'language-yaml'],\n          inside: Prism.languages.yaml\n        }\n      }\n    },\n    'blockquote': {\n      // > ...\n      pattern: /^>(?:[\\t ]*>)*/m,\n      alias: 'punctuation'\n    },\n    'table': {\n      pattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),\n      inside: {\n        'table-data-rows': {\n          pattern: RegExp('^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'),\n          lookbehind: true,\n          inside: {\n            'table-data': {\n              pattern: RegExp(tableCell),\n              inside: Prism.languages.markdown\n            },\n            'punctuation': /\\|/\n          }\n        },\n        'table-line': {\n          pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\n          lookbehind: true,\n          inside: {\n            'punctuation': /\\||:?-{3,}:?/\n          }\n        },\n        'table-header-row': {\n          pattern: RegExp('^' + tableRow + '$'),\n          inside: {\n            'table-header': {\n              pattern: RegExp(tableCell),\n              alias: 'important',\n              inside: Prism.languages.markdown\n            },\n            'punctuation': /\\|/\n          }\n        }\n      }\n    },\n    'code': [{\n      // Prefixed by 4 spaces or 1 tab and preceded by an empty line\n      pattern: /((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,\n      lookbehind: true,\n      alias: 'keyword'\n    }, {\n      // `code`\n      // ``code``\n      pattern: /``.+?``|`[^`\\r\\n]+`/,\n      alias: 'keyword'\n    }, {\n      // ```optional language\n      // code block\n      // ```\n      pattern: /^```[\\s\\S]*?^```$/m,\n      greedy: true,\n      inside: {\n        'code-block': {\n          pattern: /^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,\n          lookbehind: true\n        },\n        'code-language': {\n          pattern: /^(```).+/,\n          lookbehind: true\n        },\n        'punctuation': /```/\n      }\n    }],\n    'title': [{\n      // title 1\n      // =======\n      // title 2\n      // -------\n      pattern: /\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,\n      alias: 'important',\n      inside: {\n        punctuation: /==+$|--+$/\n      }\n    }, {\n      // # title 1\n      // ###### title 6\n      pattern: /(^\\s*)#.+/m,\n      lookbehind: true,\n      alias: 'important',\n      inside: {\n        punctuation: /^#+|#+$/\n      }\n    }],\n    'hr': {\n      // ***\n      // ---\n      // * * *\n      // -----------\n      pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'list': {\n      // * item\n      // + item\n      // - item\n      // 1. item\n      pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'url-reference': {\n      // [id]: http://example.com \"Optional title\"\n      // [id]: http://example.com 'Optional title'\n      // [id]: http://example.com (Optional title)\n      // [id]: <http://example.com> \"Optional title\"\n      pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n      inside: {\n        'variable': {\n          pattern: /^(!?\\[)[^\\]]+/,\n          lookbehind: true\n        },\n        'string': /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n        'punctuation': /^[\\[\\]!:]|[<>]/\n      },\n      alias: 'url'\n    },\n    'bold': {\n      // **strong**\n      // __strong__\n      // allow one nested instance of italic text using the same delimiter\n      pattern: createInline(/\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\b|\\*\\*(?:(?!\\*)<inner>|\\*(?:(?!\\*)<inner>)+\\*)+\\*\\*/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^..)[\\s\\S]+(?=..$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /\\*\\*|__/\n      }\n    },\n    'italic': {\n      // *em*\n      // _em_\n      // allow one nested instance of bold text using the same delimiter\n      pattern: createInline(/\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\b|\\*(?:(?!\\*)<inner>|\\*\\*(?:(?!\\*)<inner>)+\\*\\*)+\\*/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^.)[\\s\\S]+(?=.$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /[*_]/\n      }\n    },\n    'strike': {\n      // ~~strike through~~\n      // ~strike~\n      pattern: createInline(/(~~?)(?:(?!~)<inner>)+?\\2/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /~~?/\n      }\n    },\n    'url': {\n      // [example](http://example.com \"Optional title\")\n      // [example][id]\n      // [example] [id]\n      pattern: createInline(/!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)|[ \\t]?\\[(?:(?!\\])<inner>)+\\])/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'operator': /^!/,\n        'content': {\n          pattern: /(^\\[)[^\\]]+(?=\\])/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'variable': {\n          pattern: /(^\\][ \\t]?\\[)[^\\]]+(?=\\]$)/,\n          lookbehind: true\n        },\n        'url': {\n          pattern: /(^\\]\\()[^\\s)]+/,\n          lookbehind: true\n        },\n        'string': {\n          pattern: /(^[ \\t]+)\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/,\n          lookbehind: true\n        }\n      }\n    }\n  });\n  ['url', 'bold', 'italic', 'strike'].forEach(function (token) {\n    ['url', 'bold', 'italic', 'strike'].forEach(function (inside) {\n      if (token !== inside) {\n        Prism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];\n      }\n    });\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'markdown' && env.language !== 'md') {\n      return;\n    }\n\n    function walkTokens(tokens) {\n      if (!tokens || typeof tokens === 'string') {\n        return;\n      }\n\n      for (var i = 0, l = tokens.length; i < l; i++) {\n        var token = tokens[i];\n\n        if (token.type !== 'code') {\n          walkTokens(token.content);\n          continue;\n        }\n        /*\n         * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\n         * is optional. But the grammar is defined so that there is only one case we have to handle:\n         *\n         * token.content = [\n         *     <span class=\"punctuation\">```</span>,\n         *     <span class=\"code-language\">xxxx</span>,\n         *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\n         *     <span class=\"code-block\">...</span>,\n         *     '\\n', // exactly one new lines again\n         *     <span class=\"punctuation\">```</span>\n         * ];\n         */\n\n\n        var codeLang = token.content[1];\n        var codeBlock = token.content[3];\n\n        if (codeLang && codeBlock && codeLang.type === 'code-language' && codeBlock.type === 'code-block' && typeof codeLang.content === 'string') {\n          // this might be a language that Prism does not support\n          // do some replacements to support C++, C#, and F#\n          var lang = codeLang.content.replace(/\\b#/g, 'sharp').replace(/\\b\\+\\+/g, 'pp'); // only use the first word\n\n          lang = (/[a-z][\\w-]*/i.exec(lang) || [''])[0].toLowerCase();\n          var alias = 'language-' + lang; // add alias\n\n          if (!codeBlock.alias) {\n            codeBlock.alias = [alias];\n          } else if (typeof codeBlock.alias === 'string') {\n            codeBlock.alias = [codeBlock.alias, alias];\n          } else {\n            codeBlock.alias.push(alias);\n          }\n        }\n      }\n    }\n\n    walkTokens(env.tokens);\n  });\n  Prism.hooks.add('wrap', function (env) {\n    if (env.type !== 'code-block') {\n      return;\n    }\n\n    var codeLang = '';\n\n    for (var i = 0, l = env.classes.length; i < l; i++) {\n      var cls = env.classes[i];\n      var match = /language-(.+)/.exec(cls);\n\n      if (match) {\n        codeLang = match[1];\n        break;\n      }\n    }\n\n    var grammar = Prism.languages[codeLang];\n\n    if (!grammar) {\n      if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\n        var id = 'md-' + new Date().valueOf() + '-' + Math.floor(Math.random() * 1e16);\n        env.attributes['id'] = id;\n        Prism.plugins.autoloader.loadLanguages(codeLang, function () {\n          var ele = document.getElementById(id);\n\n          if (ele) {\n            ele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);\n          }\n        });\n      }\n    } else {\n      // reverse Prism.util.encode\n      var code = env.content.replace(/&lt;/g, '<').replace(/&amp;/g, '&');\n      env.content = Prism.highlight(code, grammar, codeLang);\n    }\n  });\n  Prism.languages.md = Prism.languages.markdown;\n})(Prism);\n/* \"prismjs/components/prism-objectivec\" */\n\n\nPrism.languages.objectivec = Prism.languages.extend('c', {\n  'string': /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|@\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n  'keyword': /\\b(?:asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while|in|self|super)\\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\\b/,\n  'operator': /-[->]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/@]/\n});\ndelete Prism.languages.objectivec['class-name'];\nPrism.languages.objc = Prism.languages.objectivec;\n/* \"prismjs/components/prism-ocaml\" */\n\nPrism.languages.ocaml = {\n  'comment': /\\(\\*[\\s\\S]*?\\*\\)/,\n  'string': [{\n    pattern: /\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  }, {\n    pattern: /(['`])(?:\\\\(?:\\d+|x[\\da-f]+|.)|(?!\\1)[^\\\\\\r\\n])\\1/i,\n    greedy: true\n  }],\n  'number': /\\b(?:0x[\\da-f][\\da-f_]+|(?:0[bo])?\\d[\\d_]*(?:\\.[\\d_]*)?(?:e[+-]?[\\d_]+)?)/i,\n  'directive': {\n    pattern: /\\B#\\w+/,\n    alias: 'important'\n  },\n  'label': {\n    pattern: /\\B~\\w+/,\n    alias: 'function'\n  },\n  'type-variable': {\n    pattern: /\\B'\\w+/,\n    alias: 'function'\n  },\n  'variant': {\n    pattern: /`\\w+/,\n    alias: 'variable'\n  },\n  'module': {\n    pattern: /\\b[A-Z]\\w+/,\n    alias: 'variable'\n  },\n  // For the list of keywords and operators,\n  // see: http://caml.inria.fr/pub/docs/manual-ocaml/lex.html#sec84\n  'keyword': /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|value|virtual|when|where|while|with)\\b/,\n  'boolean': /\\b(?:false|true)\\b/,\n  // Custom operators are allowed\n  'operator': /:=|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lsl|lsr|lxor|mod|or)\\b/,\n  'punctuation': /[(){}\\[\\]|.,:;]|\\b_\\b/\n};\n/* \"prismjs/components/prism-python\" */\n\nPrism.languages.python = {\n  'comment': {\n    pattern: /(^|[^\\\\])#.*/,\n    lookbehind: true\n  },\n  'string-interpolation': {\n    pattern: /(?:f|rf|fr)(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2)/i,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        // \"{\" <expression> <optional \"!s\", \"!r\", or \"!a\"> <optional \":\" format specifier> \"}\"\n        pattern: /((?:^|[^{])(?:{{)*){(?!{)(?:[^{}]|{(?!{)(?:[^{}]|{(?!{)(?:[^{}])+})+})+}/,\n        lookbehind: true,\n        inside: {\n          'format-spec': {\n            pattern: /(:)[^:(){}]+(?=}$)/,\n            lookbehind: true\n          },\n          'conversion-option': {\n            pattern: /![sra](?=[:}]$)/,\n            alias: 'punctuation'\n          },\n          rest: null\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  },\n  'triple-quoted-string': {\n    pattern: /(?:[rub]|rb|br)?(\"\"\"|''')[\\s\\S]*?\\1/i,\n    greedy: true,\n    alias: 'string'\n  },\n  'string': {\n    pattern: /(?:[rub]|rb|br)?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/i,\n    greedy: true\n  },\n  'function': {\n    pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,\n    lookbehind: true\n  },\n  'class-name': {\n    pattern: /(\\bclass\\s+)\\w+/i,\n    lookbehind: true\n  },\n  'decorator': {\n    pattern: /(^\\s*)@\\w+(?:\\.\\w+)*/im,\n    lookbehind: true,\n    alias: ['annotation', 'punctuation'],\n    inside: {\n      'punctuation': /\\./\n    }\n  },\n  'keyword': /\\b(?:and|as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b/,\n  'builtin': /\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,\n  'boolean': /\\b(?:True|False|None)\\b/,\n  'number': /(?:\\b(?=\\d)|\\B(?=\\.))(?:0[bo])?(?:(?:\\d|0x[\\da-f])[\\da-f]*(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?j?\\b/i,\n  'operator': /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n  'punctuation': /[{}[\\];(),.:]/\n};\nPrism.languages.python['string-interpolation'].inside['interpolation'].inside.rest = Prism.languages.python;\nPrism.languages.py = Prism.languages.python;\n/* \"prismjs/components/prism-reason\" */\n\nPrism.languages.reason = Prism.languages.extend('clike', {\n  'string': {\n    pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  },\n  // 'class-name' must be matched *after* 'constructor' defined below\n  'class-name': /\\b[A-Z]\\w*/,\n  'keyword': /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,\n  'operator': /\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:mod|land|lor|lxor|lsl|lsr|asr)\\b/\n});\nPrism.languages.insertBefore('reason', 'class-name', {\n  'character': {\n    pattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,\n    alias: 'string'\n  },\n  'constructor': {\n    // Negative look-ahead prevents from matching things like String.capitalize\n    pattern: /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,\n    alias: 'variable'\n  },\n  'label': {\n    pattern: /\\b[a-z]\\w*(?=::)/,\n    alias: 'symbol'\n  }\n}); // We can't match functions property, so let's not even try.\n\ndelete Prism.languages.reason.function;\n/* \"prismjs/components/prism-sass\" */\n\n(function (Prism) {\n  Prism.languages.sass = Prism.languages.extend('css', {\n    // Sass comments don't need to be closed, only indented\n    'comment': {\n      pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('sass', 'atrule', {\n    // We want to consume the whole line\n    'atrule-line': {\n      // Includes support for = and + shortcuts\n      pattern: /^(?:[ \\t]*)[@+=].+/m,\n      inside: {\n        'atrule': /(?:@[\\w-]+|[+=])/m\n      }\n    }\n  });\n  delete Prism.languages.sass.atrule;\n  var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n  var operator = [/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/, {\n    pattern: /(\\s+)-(?=\\s)/,\n    lookbehind: true\n  }];\n  Prism.languages.insertBefore('sass', 'property', {\n    // We want to consume the whole line\n    'variable-line': {\n      pattern: /^[ \\t]*\\$.+/m,\n      inside: {\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator\n      }\n    },\n    // We want to consume the whole line\n    'property-line': {\n      pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,\n      inside: {\n        'property': [/[^:\\s]+(?=\\s*:)/, {\n          pattern: /(:)[^:\\s]+/,\n          lookbehind: true\n        }],\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator,\n        'important': Prism.languages.sass.important\n      }\n    }\n  });\n  delete Prism.languages.sass.property;\n  delete Prism.languages.sass.important; // Now that whole lines for other patterns are consumed,\n  // what's left should be selectors\n\n  Prism.languages.insertBefore('sass', 'punctuation', {\n    'selector': {\n      pattern: /([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/,\n      lookbehind: true\n    }\n  });\n})(Prism);\n/* \"prismjs/components/prism-scss\" */\n\n\nPrism.languages.scss = Prism.languages.extend('css', {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n    lookbehind: true\n  },\n  'atrule': {\n    pattern: /@[\\w-](?:\\([^()]+\\)|[^()\\s]|\\s+(?!\\s))*?(?=\\s+[{;])/,\n    inside: {\n      'rule': /@[\\w-]+/ // See rest below\n\n    }\n  },\n  // url, compassified\n  'url': /(?:[-a-z]+-)?url(?=\\()/i,\n  // CSS selector regex is not appropriate for Sass\n  // since there can be lot more things (var, @ directive, nesting..)\n  // a selector must start at the end of a property or after a brace (end of other rules or nesting)\n  // it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable\n  // the end of a selector is found when there is no rules in it ( {} or {\\s}) or if there is a property (because an interpolated var\n  // can \"pass\" as a selector- e.g: proper#{$erty})\n  // this one was hard to do, so please be careful if you edit this one :)\n  'selector': {\n    // Initial look-ahead is used to prevent matching of blank selectors\n    pattern: /(?=\\S)[^@;{}()]?(?:[^@;{}()\\s]|\\s+(?!\\s)|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}][^:{}]*[:{][^}]+))/m,\n    inside: {\n      'parent': {\n        pattern: /&/,\n        alias: 'important'\n      },\n      'placeholder': /%[-\\w]+/,\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  },\n  'property': {\n    pattern: /(?:[-\\w]|\\$[-\\w]|#\\{\\$[-\\w]+\\})+(?=\\s*:)/,\n    inside: {\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  }\n});\nPrism.languages.insertBefore('scss', 'atrule', {\n  'keyword': [/@(?:if|else(?: if)?|forward|for|each|while|import|use|extend|debug|warn|mixin|include|function|return|content)\\b/i, {\n    pattern: /( +)(?:from|through)(?= )/,\n    lookbehind: true\n  }]\n});\nPrism.languages.insertBefore('scss', 'important', {\n  // var and interpolated vars\n  'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n});\nPrism.languages.insertBefore('scss', 'function', {\n  'module-modifier': {\n    pattern: /\\b(?:as|with|show|hide)\\b/i,\n    alias: 'keyword'\n  },\n  'placeholder': {\n    pattern: /%[-\\w]+/,\n    alias: 'selector'\n  },\n  'statement': {\n    pattern: /\\B!(?:default|optional)\\b/i,\n    alias: 'keyword'\n  },\n  'boolean': /\\b(?:true|false)\\b/,\n  'null': {\n    pattern: /\\bnull\\b/,\n    alias: 'keyword'\n  },\n  'operator': {\n    pattern: /(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|or|not)(?=\\s)/,\n    lookbehind: true\n  }\n});\nPrism.languages.scss['atrule'].inside.rest = Prism.languages.scss;\n/* \"prismjs/components/prism-sql\" */\n\nPrism.languages.sql = {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,\n    lookbehind: true\n  },\n  'variable': [{\n    pattern: /@([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1/,\n    greedy: true\n  }, /@[\\w.$]+/],\n  'string': {\n    pattern: /(^|[^@\\\\])(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\]|\\2\\2)*\\2/,\n    greedy: true,\n    lookbehind: true\n  },\n  'function': /\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\s*\\()/i,\n  // Should we highlight user defined functions too?\n  'keyword': /\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:_INSERT|COL)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:S|ING)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\b/i,\n  'boolean': /\\b(?:TRUE|FALSE|NULL)\\b/i,\n  'number': /\\b0x[\\da-f]+\\b|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+\\b/i,\n  'operator': /[-+*\\/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\b(?:AND|BETWEEN|IN|LIKE|NOT|OR|IS|DIV|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\b/i,\n  'punctuation': /[;[\\]()`,.]/\n};\n/* \"prismjs/components/prism-stylus\" */\n\n(function (Prism) {\n  var unit = {\n    pattern: /(\\b\\d+)(?:%|[a-z]+)/,\n    lookbehind: true\n  }; // 123 -123 .123 -.123 12.3 -12.3\n\n  var number = {\n    pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n    lookbehind: true\n  };\n  var inside = {\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    },\n    'url': {\n      pattern: /url\\(([\"']?).*?\\1\\)/i,\n      greedy: true\n    },\n    'string': {\n      pattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\n      greedy: true\n    },\n    'interpolation': null,\n    // See below\n    'func': null,\n    // See below\n    'important': /\\B!(?:important|optional)\\b/i,\n    'keyword': {\n      pattern: /(^|\\s+)(?:(?:if|else|for|return|unless)(?=\\s+|$)|@[\\w-]+)/,\n      lookbehind: true\n    },\n    'hexcode': /#[\\da-f]{3,6}/i,\n    'color': [/\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i, {\n      pattern: /\\b(?:rgb|hsl)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:rgb|hsl)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n      inside: {\n        'unit': unit,\n        'number': number,\n        'function': /[\\w-]+(?=\\()/,\n        'punctuation': /[(),]/\n      }\n    }],\n    'entity': /\\\\[\\da-f]{1,8}/i,\n    'unit': unit,\n    'boolean': /\\b(?:true|false)\\b/,\n    'operator': [// We want non-word chars around \"-\" because it is\n    // accepted in property names.\n    /~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.{2,3}|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/],\n    'number': number,\n    'punctuation': /[{}()\\[\\];:,]/\n  };\n  inside['interpolation'] = {\n    pattern: /\\{[^\\r\\n}:]+\\}/,\n    alias: 'variable',\n    inside: {\n      'delimiter': {\n        pattern: /^{|}$/,\n        alias: 'punctuation'\n      },\n      rest: inside\n    }\n  };\n  inside['func'] = {\n    pattern: /[\\w-]+\\([^)]*\\).*/,\n    inside: {\n      'function': /^[^(]+/,\n      rest: inside\n    }\n  };\n  Prism.languages.stylus = {\n    'atrule-declaration': {\n      pattern: /(^\\s*)@.+/m,\n      lookbehind: true,\n      inside: {\n        'atrule': /^@[\\w-]+/,\n        rest: inside\n      }\n    },\n    'variable-declaration': {\n      pattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:\\{[^{}]*\\}|\\S.*|$)/m,\n      lookbehind: true,\n      inside: {\n        'variable': /^\\S+/,\n        rest: inside\n      }\n    },\n    'statement': {\n      pattern: /(^[ \\t]*)(?:if|else|for|return|unless)[ \\t].+/m,\n      lookbehind: true,\n      inside: {\n        'keyword': /^\\S+/,\n        rest: inside\n      }\n    },\n    // A property/value pair cannot end with a comma or a brace\n    // It cannot have indented content unless it ended with a semicolon\n    'property-declaration': {\n      pattern: /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)(?!\\s)[^{\\r\\n]*(?:;|[^{\\r\\n,](?=$)(?!(?:\\r?\\n|\\r)(?:\\{|\\2[ \\t]+)))/m,\n      lookbehind: true,\n      inside: {\n        'property': {\n          pattern: /^[^\\s:]+/,\n          inside: {\n            'interpolation': inside.interpolation\n          }\n        },\n        rest: inside\n      }\n    },\n    // A selector can contain parentheses only as part of a pseudo-element\n    // It can span multiple lines.\n    // It must end with a comma or an accolade or have indented content.\n    'selector': {\n      pattern: /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t]+)))/m,\n      lookbehind: true,\n      inside: {\n        'interpolation': inside.interpolation,\n        'comment': inside.comment,\n        'punctuation': /[{},]/\n      }\n    },\n    'func': inside.func,\n    'string': inside.string,\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true,\n      greedy: true\n    },\n    'interpolation': inside.interpolation,\n    'punctuation': /[{}()\\[\\];:.]/\n  };\n})(Prism);\n/* \"prismjs/components/prism-typescript\" */\n\n\n(function (Prism) {\n  Prism.languages.typescript = Prism.languages.extend('javascript', {\n    'class-name': {\n      pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n      lookbehind: true,\n      greedy: true,\n      inside: null // see below\n\n    },\n    // From JavaScript Prism keyword list and TypeScript language spec: https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#221-reserved-words\n    'keyword': /\\b(?:abstract|as|asserts|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|undefined|var|void|while|with|yield)\\b/,\n    'builtin': /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/\n  }); // doesn't work with TS because TS is too complex\n\n  delete Prism.languages.typescript['parameter']; // a version of typescript specifically for highlighting types\n\n  var typeInside = Prism.languages.extend('typescript', {});\n  delete typeInside['class-name'];\n  Prism.languages.typescript['class-name'].inside = typeInside;\n  Prism.languages.insertBefore('typescript', 'function', {\n    'generic-function': {\n      // e.g. foo<T extends \"bar\" | \"baz\">( ...\n      pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n      greedy: true,\n      inside: {\n        'function': /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n        'generic': {\n          pattern: /<[\\s\\S]+/,\n          // everything after the first <\n          alias: 'class-name',\n          inside: typeInside\n        }\n      }\n    }\n  });\n  Prism.languages.ts = Prism.languages.typescript;\n})(Prism);\n/* \"prismjs/components/prism-tsx\" */\n\n\n(function (Prism) {\n  var typescript = Prism.util.clone(Prism.languages.typescript);\n  Prism.languages.tsx = Prism.languages.extend('jsx', typescript); // This will prevent collisions between TSX tags and TS generic types.\n  // Idea by https://github.com/karlhorky\n  // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n\n  var tag = Prism.languages.tsx.tag;\n  tag.pattern = RegExp(/(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')', tag.pattern.flags);\n  tag.lookbehind = true;\n})(Prism);\n/* \"prismjs/components/prism-wasm\" */\n\n\nPrism.languages.wasm = {\n  'comment': [/\\(;[\\s\\S]*?;\\)/, {\n    pattern: /;;.*/,\n    greedy: true\n  }],\n  'string': {\n    pattern: /\"(?:\\\\[\\s\\S]|[^\"\\\\])*\"/,\n    greedy: true\n  },\n  'keyword': [{\n    pattern: /\\b(?:align|offset)=/,\n    inside: {\n      'operator': /=/\n    }\n  }, {\n    pattern: /\\b(?:(?:f32|f64|i32|i64)(?:\\.(?:abs|add|and|ceil|clz|const|convert_[su]\\/i(?:32|64)|copysign|ctz|demote\\/f64|div(?:_[su])?|eqz?|extend_[su]\\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\\/f32|reinterpret\\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\\/f(?:32|64))?|wrap\\/i64|xor))?|memory\\.(?:grow|size))\\b/,\n    inside: {\n      'punctuation': /\\./\n    }\n  }, /\\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\\b/],\n  'variable': /\\$[\\w!#$%&'*+\\-./:<=>?@\\\\^_`|~]+/i,\n  'number': /[+-]?\\b(?:\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:[eE][+-]?\\d(?:_?\\d)*)?|0x[\\da-fA-F](?:_?[\\da-fA-F])*(?:\\.[\\da-fA-F](?:_?[\\da-fA-D])*)?(?:[pP][+-]?\\d(?:_?\\d)*)?)\\b|\\binf\\b|\\bnan(?::0x[\\da-fA-F](?:_?[\\da-fA-D])*)?\\b/,\n  'punctuation': /[()]/\n};\n/* \"prismjs/components/prism-yaml\" */\n\n(function (Prism) {\n  // https://yaml.org/spec/1.2/spec.html#c-ns-anchor-property\n  // https://yaml.org/spec/1.2/spec.html#c-ns-alias-node\n  var anchorOrAlias = /[*&][^\\s[\\]{},]+/; // https://yaml.org/spec/1.2/spec.html#c-ns-tag-property\n\n  var tag = /!(?:<[\\w\\-%#;/?:@&=+$,.!~*'()[\\]]+>|(?:[a-zA-Z\\d-]*!)?[\\w\\-%#;/?:@&=+$.~*'()]+)?/; // https://yaml.org/spec/1.2/spec.html#c-ns-properties(n,c)\n\n  var properties = '(?:' + tag.source + '(?:[ \\t]+' + anchorOrAlias.source + ')?|' + anchorOrAlias.source + '(?:[ \\t]+' + tag.source + ')?)'; // https://yaml.org/spec/1.2/spec.html#ns-plain(n,c)\n  // This is a simplified version that doesn't support \"#\" and multiline keys\n  // All these long scarry character classes are simplified versions of YAML's characters\n\n  var plainKey = /(?:[^\\s\\x00-\\x08\\x0e-\\x1f!\"#%&'*,\\-:>?@[\\]`{|}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]|[?:-]<PLAIN>)(?:[ \\t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source.replace(/<PLAIN>/g, function () {\n    return /[^\\s\\x00-\\x08\\x0e-\\x1f,[\\]{}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]/.source;\n  });\n  var string = /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\\\\\r\\n]|\\\\.)*'/.source;\n  /**\n   *\n   * @param {string} value\n   * @param {string} [flags]\n   * @returns {RegExp}\n   */\n\n  function createValuePattern(value, flags) {\n    flags = (flags || '').replace(/m/g, '') + 'm'; // add m flag\n\n    var pattern = /([:\\-,[{]\\s*(?:\\s<<prop>>[ \\t]+)?)(?:<<value>>)(?=[ \\t]*(?:$|,|]|}|(?:[\\r\\n]\\s*)?#))/.source.replace(/<<prop>>/g, function () {\n      return properties;\n    }).replace(/<<value>>/g, function () {\n      return value;\n    });\n    return RegExp(pattern, flags);\n  }\n\n  Prism.languages.yaml = {\n    'scalar': {\n      pattern: RegExp(/([\\-:]\\s*(?:\\s<<prop>>[ \\t]+)?[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)\\S[^\\r\\n]*(?:\\2[^\\r\\n]+)*)/.source.replace(/<<prop>>/g, function () {\n        return properties;\n      })),\n      lookbehind: true,\n      alias: 'string'\n    },\n    'comment': /#.*/,\n    'key': {\n      pattern: RegExp(/((?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:<<prop>>[ \\t]+)?)<<key>>(?=\\s*:\\s)/.source.replace(/<<prop>>/g, function () {\n        return properties;\n      }).replace(/<<key>>/g, function () {\n        return '(?:' + plainKey + '|' + string + ')';\n      })),\n      lookbehind: true,\n      greedy: true,\n      alias: 'atrule'\n    },\n    'directive': {\n      pattern: /(^[ \\t]*)%.+/m,\n      lookbehind: true,\n      alias: 'important'\n    },\n    'datetime': {\n      pattern: createValuePattern(/\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?(?:[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?))?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?/.source),\n      lookbehind: true,\n      alias: 'number'\n    },\n    'boolean': {\n      pattern: createValuePattern(/true|false/.source, 'i'),\n      lookbehind: true,\n      alias: 'important'\n    },\n    'null': {\n      pattern: createValuePattern(/null|~/.source, 'i'),\n      lookbehind: true,\n      alias: 'important'\n    },\n    'string': {\n      pattern: createValuePattern(string),\n      lookbehind: true,\n      greedy: true\n    },\n    'number': {\n      pattern: createValuePattern(/[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+(?:\\.\\d*)?|\\.?\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)/.source, 'i'),\n      lookbehind: true\n    },\n    'tag': tag,\n    'important': anchorOrAlias,\n    'punctuation': /---|[:[\\]{}\\-,|>?]|\\.\\.\\./\n  };\n  Prism.languages.yml = Prism.languages.yaml;\n})(Prism);\n\nexport default Prism;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}