{"ast":null,"code":"/**\n * Bundle of @devexpress/dx-react-grid\n * Generated: 2022-10-14\n * Version: 3.0.6\n * License: https://js.devexpress.com/Licensing\n */\n\nimport { memo, createElement, useCallback, createRef, PureComponent, Fragment, forwardRef } from 'react';\nimport { Plugin, Getter, Template, TemplatePlaceholder, PluginHost, TemplateConnector, createStateHelper, Action, DragDropProvider as DragDropProvider$1, withComponents, PlaceholderWithRef, DropTarget, DragSource, Sizer } from '@devexpress/dx-react-core';\nimport { tableColumnsWithGrouping, rowIdGetter, cellValueGetter, tableColumnsWithDataRows, checkTableColumnExtensions, visibleTableColumns, orderedColumns, columnChooserItems, changeColumnFilter, getColumnExtensionValueGetter, filterExpression, defaultFilterPredicate, filteredCollapsedRowsGetter, unwrappedFilteredRows, filteredRows, getColumnExtension, startEditRows, stopEditRows, startEditCells, stopEditCells, changeRow, cancelChanges, changedRowsByIds, addRow, changeAddedRow, cancelAddedRows, addedRowsByIds, deleteRows, cancelDeletedRows, createRowChangeGetter, setCurrentPage, setPageSize, rowsWithPageHeaders, rowCount, paginatedRows, currentPage, toggleExpandedGroups, draftColumnGrouping, cancelColumnGroupingDraft, adjustSortIndex, changeColumnGrouping, groupRowChecker, groupRowLevelKeyGetter, groupCollapsedRowsGetter, expandedGroupRows, groupedRows, customGroupingRowIdGetter, customGroupedRows, toggleSelection, rowsWithAvailableToSelect, allSelected, someSelected, unwrapSelectedRows, getPersistentSortedColumns, calculateKeepOther, changeColumnSorting, sortedRows, draftOrder, TABLE_DATA_TYPE, getTableTargetColumnIndex, changeColumnOrder, TABLE_REORDERING_TYPE, tableHeaderRowsWithReordering, tableCellColSpanGetter, isHeaderStubTableCell, isDataTableCell, isNoDataTableRow, isNoDataTableCell, isDataTableRow, TABLE_NODATA_TYPE, tableRowsWithDataRows, isSelectAllTableCell, isSelectTableCell, isRowHighlighted, TABLE_SELECT_TYPE, tableColumnsWithSelection, toggleDetailRowExpanded, isDetailToggleTableCell, isDetailRowExpanded, isDetailTableRow, isDetailTableCell, TABLE_DETAIL_TYPE, tableDetailCellColSpanGetter, tableColumnsWithDetail, tableRowsWithExpandedDetail, defaultFormatlessSummaries, getGroupInlineSummaries, isGroupTableRow, isGroupTableCell, calculateGroupCellIndent, isGroupIndentTableCell, isGroupIndentStubTableCell, isGroupRowOrdinaryCell, isRowSummaryCell, getColumnSummaries, isPreviousCellContainSummary, TABLE_FLEX_TYPE, TABLE_GROUP_TYPE, tableRowsWithGrouping, tableGroupCellColSpanGetter, isHeadingTableCell, getNextColumnName, getColumnSortingDirection, isHeadingTableRow, TABLE_HEADING_TYPE, tableRowsWithHeading, columnBandLevels, isBandedOrHeaderRow, getBandComponent, BAND_FILL_LEVEL_CELL, BAND_HEADER_CELL, BAND_GROUP_CELL, BAND_EMPTY_CELL, BAND_DUPLICATE_RENDER, isBandedTableRow, TABLE_BAND_TYPE, bandLevelsVisibility, columnVisibleIntervals, tableRowsWithBands, tableHeaderColumnChainsWithBands, isFilterTableCell, getColumnFilterConfig, getColumnFilterOperations, getSelectedFilterOperation, isFilterTableRow, TABLE_FILTER_TYPE, tableHeaderRowsWithFilter, TOP_POSITION, isFilterValueEmpty, isEditTableCell, isAddedTableRow, getRowChange, isEditTableRow, TABLE_ADDED_TYPE, TABLE_EDIT_TYPE, tableRowsWithEditing, isHeadingEditCommandsTableCell, isEditCommandsTableCell, TABLE_EDIT_COMMAND_TYPE, tableColumnsWithEditing, tableColumnsWithWidths, tableColumnsWithDraftWidths, changeTableColumnWidth, draftTableColumnWidth, cancelTableColumnWidthDraft, pageCount, getGroupCellTargetIndex, groupingPanelItems, getAvailableFilterOperationsGetter, toggleColumn, tableDataColumnsExist, toggleRowExpanded, expandedTreeRows, customTreeRowIdGetter, customTreeRowLevelKeyGetter, isTreeRowLeafGetter, getTreeRowLevelGetter, collapsedTreeRowsGetter, unwrappedCustomTreeRows, customTreeRowsWithMeta, isTreeTableCell, changeSearchValue, searchFilterExpression, calculateFixedColumnProps, isFixedTableRow, tableHeaderRowsWithFixed, tableHeaderColumnChainsWithFixed, tableColumnsWithFixed, prepareGroupSummaryItems, defaultSummaryCalculator, totalSummaryValues, groupSummaryValues, treeSummaryValues, isTotalSummaryTableCell, isGroupSummaryTableCell, isFooterSummary, isTreeSummaryTableCell, isTotalSummaryTableRow, isGroupSummaryTableRow, isTreeSummaryTableRow, TABLE_TREE_SUMMARY_TYPE, TABLE_GROUP_SUMMARY_TYPE, TABLE_TOTAL_SUMMARY_TYPE, tableRowsWithSummaries, tableRowsWithTotalSummaries, getReferenceIndex, needFetchMorePages, getRequestMeta, shouldSendRequest, emptyVirtualRows, trimRowsToInterval, getAvailableRowCount, virtualRowsWithCache, plainRows, loadedRowsStart, rowsWithEditingCells, columnsWithEditingCells, filterHeaderRows, focus, isCellExist, getClosestCellByRow, isTabArrowUpDown, getNextFocusedCell, LEFT_POSITION, RIGHT_POSITION, getPart, getIndexToFocus, isCellFocused, isRowFocused, getFocusing, getAnimations, filterActiveAnimations, evalAnimations, isColumnsWidthDifferent, getViewport, getCollapsedGrids, getScrollLeft, TABLE_STUB_TYPE, getColumnWidthGetter, getTopRowId, getScrollTop, isStubTableCell, BOTTOM_POSITION, checkColumnWidths } from '@devexpress/dx-grid-core';\nimport { getMessagesFormatter, memoize, shallowEqual } from '@devexpress/dx-core';\nimport { createPortal, flushSync } from 'react-dom';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n  };\n  return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\nfunction __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n}\n\n/** @deprecated */\nfunction __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\nvar showColumnWhenGroupedGetter = function (showColumnsWhenGrouped, columnExtensions) {\n  if (columnExtensions === void 0) {\n    columnExtensions = [];\n  }\n  var map = columnExtensions.reduce(function (acc, columnExtension) {\n    acc[columnExtension.columnName] = columnExtension.showWhenGrouped;\n    return acc;\n  }, {});\n  return function (columnName) {\n    return map[columnName] || showColumnsWhenGrouped;\n  };\n};\n/** @internal */\nvar TableColumnsWithGrouping = memo(function (_a) {\n  var indentColumnWidth = _a.indentColumnWidth,\n    showColumnsWhenGrouped = _a.showColumnsWhenGrouped,\n    columnExtensions = _a.columnExtensions;\n  var tableColumnsComputed = function (_a) {\n    var columns = _a.columns,\n      tableColumns = _a.tableColumns,\n      grouping = _a.grouping,\n      draftGrouping = _a.draftGrouping;\n    return tableColumnsWithGrouping(columns, tableColumns, grouping, draftGrouping, indentColumnWidth, showColumnWhenGroupedGetter(showColumnsWhenGrouped, columnExtensions));\n  };\n  return createElement(Plugin, null, createElement(Getter, {\n    name: \"tableColumns\",\n    computed: tableColumnsComputed\n  }));\n});\nTableColumnsWithGrouping.defaultProps = {\n  indentColumnWidth: 0\n};\nvar GridCoreGetters = memo(function (_a) {\n  var rows = _a.rows,\n    columns = _a.columns,\n    getRowId = _a.getRowId,\n    getCellValue = _a.getCellValue;\n  return createElement(Plugin, null, createElement(Getter, {\n    name: \"rows\",\n    value: rows\n  }), createElement(Getter, {\n    name: \"getRowId\",\n    value: rowIdGetter(getRowId, rows)\n  }), createElement(Getter, {\n    name: \"columns\",\n    value: columns\n  }), createElement(Getter, {\n    name: \"getCellValue\",\n    value: cellValueGetter(getCellValue, columns)\n  }));\n});\nvar TableColumnsWithDataRowsGetter = memo(function (_a) {\n  var columnExtensions = _a.columnExtensions;\n  var tableColumnsComputed = useCallback(function (_a) {\n    var columns = _a.columns;\n    return tableColumnsWithDataRows(columns, columnExtensions);\n  }, [columnExtensions]);\n  checkTableColumnExtensions(columnExtensions);\n  return createElement(Plugin, null, createElement(Getter, {\n    name: \"tableColumns\",\n    computed: tableColumnsComputed\n  }));\n});\nvar visibleTableColumnsComputed = function (_a) {\n  var tableColumns = _a.tableColumns,\n    hiddenColumnNames = _a.hiddenColumnNames;\n  return visibleTableColumns(tableColumns, hiddenColumnNames);\n};\n/** @internal */\nvar VisibleTableColumns = memo(function (_a) {\n  var hiddenColumnNames = _a.hiddenColumnNames;\n  return createElement(Plugin, null, createElement(Getter, {\n    name: \"hiddenColumnNames\",\n    value: hiddenColumnNames\n  }), createElement(Getter, {\n    name: \"tableColumns\",\n    computed: visibleTableColumnsComputed\n  }));\n});\nVisibleTableColumns.defaultProps = {\n  hiddenColumnNames: []\n};\n\n/** @internal */\nvar OrderedTableColumns = function (_a) {\n  var order = _a.order;\n  var columnsComputed = function (_a) {\n    var tableColumns = _a.tableColumns;\n    return orderedColumns(tableColumns, order);\n  };\n  return createElement(Plugin, null, createElement(Getter, {\n    name: \"tableColumns\",\n    computed: columnsComputed\n  }));\n};\nOrderedTableColumns.defaultProps = {\n  order: []\n};\nvar GridCore = /*#__PURE__*/function (_super) {\n  __extends(GridCore, _super);\n  function GridCore(props) {\n    var _this = _super.call(this, props) || this;\n    _this.state = {\n      ref: {}\n    };\n    _this.rootRef = createRef();\n    return _this;\n  }\n  GridCore.prototype.componentDidMount = function () {\n    this.setState({\n      ref: this.rootRef\n    });\n  };\n  GridCore.prototype.render = function () {\n    var _a = this.props,\n      Root = _a.rootComponent,\n      restProps = __rest(_a, [\"rootComponent\"]);\n    var ref = this.state.ref;\n    return createElement(Plugin, null, createElement(Getter, {\n      name: \"skip\",\n      value: 0\n    }), createElement(Getter, {\n      name: \"loadedRowsStart\",\n      value: 0\n    }), createElement(Getter, {\n      name: \"rootRef\",\n      value: ref\n    }), createElement(GridCoreGetters, __assign({}, restProps)), createElement(Template, {\n      name: \"root\"\n    }, createElement(Root, {\n      rootRef: this.rootRef\n    }, createElement(TemplatePlaceholder, {\n      name: \"header\"\n    }), createElement(TemplatePlaceholder, {\n      name: \"body\"\n    }), createElement(TemplatePlaceholder, {\n      name: \"footer\"\n    }))));\n  };\n  return GridCore;\n}(PureComponent);\nvar GridBase = function (_a) {\n  var rows = _a.rows,\n    columns = _a.columns,\n    getRowId = _a.getRowId,\n    getCellValue = _a.getCellValue,\n    rootComponent = _a.rootComponent,\n    children = _a.children;\n  return createElement(PluginHost, null, createElement(GridCore, {\n    rows: rows,\n    columns: columns,\n    getRowId: getRowId,\n    getCellValue: getCellValue,\n    rootComponent: rootComponent\n  }), children);\n};\n/***\r\n * The Grid is a root container component designed to process and display data specified via\r\n * the `rows` property. You can configure columns using the `columns` property. The Grid's\r\n * functionality  is implemented in several plugins specified as child components.\r\n * See the plugins concept for details.\r\n * */\nvar Grid = GridBase;\nvar pluginDependencies = [{\n  name: 'TableColumnVisibility'\n}, {\n  name: 'Toolbar'\n}];\nvar ColumnChooserBase = /*#__PURE__*/function (_super) {\n  __extends(ColumnChooserBase, _super);\n  function ColumnChooserBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this.state = {\n      visible: false\n    };\n    _this.handleToggle = _this.handleToggle.bind(_this);\n    _this.handleHide = _this.handleHide.bind(_this);\n    _this.setButtonRef = _this.setButtonRef.bind(_this);\n    return _this;\n  }\n  ColumnChooserBase.prototype.setButtonRef = function (button) {\n    this.button = button;\n  };\n  ColumnChooserBase.prototype.handleToggle = function () {\n    var visible = this.state.visible;\n    this.setState({\n      visible: !visible\n    });\n  };\n  ColumnChooserBase.prototype.handleHide = function () {\n    this.setState({\n      visible: false\n    });\n  };\n  ColumnChooserBase.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      Overlay = _a.overlayComponent,\n      Container = _a.containerComponent,\n      Item = _a.itemComponent,\n      ToggleButton = _a.toggleButtonComponent,\n      messages = _a.messages;\n    var getMessage = getMessagesFormatter(messages);\n    var visible = this.state.visible;\n    return createElement(Plugin, {\n      name: \"ColumnChooser\",\n      dependencies: pluginDependencies\n    }, createElement(Template, {\n      name: \"toolbarContent\"\n    }, createElement(TemplatePlaceholder, null), createElement(TemplateConnector, null, function (_a, _b) {\n      var columns = _a.columns,\n        hiddenColumnNames = _a.hiddenColumnNames,\n        isColumnTogglingEnabled = _a.isColumnTogglingEnabled;\n      var toggleColumnVisibility = _b.toggleColumnVisibility;\n      return createElement(Fragment, null, createElement(ToggleButton, {\n        buttonRef: _this.setButtonRef,\n        onToggle: _this.handleToggle,\n        getMessage: getMessage,\n        active: visible\n      }), createElement(Overlay, {\n        visible: visible,\n        target: _this.button,\n        onHide: _this.handleHide\n      }, createElement(Container, null, columnChooserItems(columns, hiddenColumnNames).map(function (item) {\n        var columnName = item.column.name;\n        var togglingEnabled = isColumnTogglingEnabled(columnName);\n        return createElement(Item, {\n          key: columnName,\n          item: item,\n          disabled: !togglingEnabled,\n          onToggle: function () {\n            return toggleColumnVisibility(columnName);\n          }\n        });\n      }))));\n    })));\n  };\n  ColumnChooserBase.defaultProps = {\n    messages: {}\n  };\n  ColumnChooserBase.components = {\n    overlayComponent: 'Overlay',\n    containerComponent: 'Container',\n    itemComponent: 'Item',\n    toggleButtonComponent: 'ToggleButton'\n  };\n  return ColumnChooserBase;\n}(PureComponent);\n/***\r\n * The ColumnChooser plugin allows a user to toggle grid columns' visibility at runtime.\r\n * The column chooser lists columns with checkboxes that control a corresponding\r\n * column's visibility.\r\n * */\nvar ColumnChooser = ColumnChooserBase;\nvar columnExtensionValueGetter = function (columnExtensions, defaultValue) {\n  return getColumnExtensionValueGetter(columnExtensions, 'filteringEnabled', defaultValue);\n};\nvar filterExpressionComputed = function (_a) {\n  var filters = _a.filters,\n    filterExpressionValue = _a.filterExpression;\n  return filterExpression(filters, filterExpressionValue);\n};\nvar FilteringStateBase = /*#__PURE__*/function (_super) {\n  __extends(FilteringStateBase, _super);\n  function FilteringStateBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this.state = {\n      filters: props.filters || props.defaultFilters\n    };\n    var stateHelper = createStateHelper(_this, {\n      filters: function () {\n        var onFiltersChange = _this.props.onFiltersChange;\n        return onFiltersChange;\n      }\n    });\n    _this.changeColumnFilter = stateHelper.applyFieldReducer.bind(stateHelper, 'filters', changeColumnFilter);\n    return _this;\n  }\n  // tslint:disable-next-line:member-ordering\n  FilteringStateBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.filters,\n      filters = _a === void 0 ? prevState.filters : _a;\n    return {\n      filters: filters\n    };\n  };\n  FilteringStateBase.prototype.render = function () {\n    var filters = this.state.filters;\n    var _a = this.props,\n      columnExtensions = _a.columnExtensions,\n      columnFilteringEnabled = _a.columnFilteringEnabled;\n    return createElement(Plugin, {\n      name: \"FilteringState\"\n    }, createElement(Getter, {\n      name: \"filters\",\n      value: filters\n    }), createElement(Getter, {\n      name: \"filterExpression\",\n      computed: filterExpressionComputed\n    }), createElement(Getter, {\n      name: \"isColumnFilteringEnabled\",\n      value: columnExtensionValueGetter(columnExtensions, columnFilteringEnabled)\n    }), createElement(Action, {\n      name: \"changeColumnFilter\",\n      action: this.changeColumnFilter\n    }));\n  };\n  FilteringStateBase.defaultProps = {\n    defaultFilters: [],\n    columnFilteringEnabled: true\n  };\n  return FilteringStateBase;\n}(PureComponent);\n/** A plugin that manages the filtering state. */\nvar FilteringState = FilteringStateBase;\nvar pluginDependencies$1 = [{\n  name: 'FilteringState',\n  optional: true\n}, {\n  name: 'SearchState',\n  optional: true\n}];\nvar getCollapsedRowsComputed = function (_a) {\n  var rows = _a.rows;\n  return filteredCollapsedRowsGetter(rows);\n};\nvar unwrappedRowsComputed = function (_a) {\n  var rows = _a.rows;\n  return unwrappedFilteredRows(rows);\n};\nvar IntegratedFilteringBase = /*#__PURE__*/function (_super) {\n  __extends(IntegratedFilteringBase, _super);\n  function IntegratedFilteringBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  IntegratedFilteringBase.prototype.render = function () {\n    var columnExtensions = this.props.columnExtensions;\n    var getColumnPredicate = function (columnName) {\n      return getColumnExtension(columnExtensions, columnName).predicate;\n    };\n    var rowsComputed = function (_a) {\n      var rows = _a.rows,\n        filterExpression = _a.filterExpression,\n        getCellValue = _a.getCellValue,\n        getRowLevelKey = _a.getRowLevelKey,\n        getCollapsedRows = _a.getCollapsedRows;\n      return filteredRows(rows, filterExpression, getCellValue, getColumnPredicate, getRowLevelKey, getCollapsedRows);\n    };\n    return createElement(Plugin, {\n      name: \"IntegratedFiltering\",\n      dependencies: pluginDependencies$1\n    }, createElement(Getter, {\n      name: \"rows\",\n      computed: rowsComputed\n    }), createElement(Getter, {\n      name: \"getCollapsedRows\",\n      computed: getCollapsedRowsComputed\n    }), createElement(Getter, {\n      name: \"rows\",\n      computed: unwrappedRowsComputed\n    }));\n  };\n  return IntegratedFilteringBase;\n}(PureComponent);\nIntegratedFilteringBase.defaultPredicate = defaultFilterPredicate;\nvar IntegratedFiltering = IntegratedFilteringBase;\nvar columnExtensionValueGetter$1 = function (columnExtensions, defaultValue) {\n  return getColumnExtensionValueGetter(columnExtensions, 'editingEnabled', defaultValue);\n};\nvar EditingStateBase = /*#__PURE__*/function (_super) {\n  __extends(EditingStateBase, _super);\n  function EditingStateBase(props) {\n    var _this = _super.call(this, props) || this;\n    var rowChanges = props.rowChanges || props.defaultRowChanges;\n    var addedRows = props.addedRows || props.defaultAddedRows;\n    var getRowChanges = function () {\n      var stateRowChanges = _this.state.rowChanges;\n      return stateRowChanges;\n    };\n    var getAddedRows = function () {\n      var stateAddedRows = _this.state.addedRows;\n      return stateAddedRows;\n    };\n    _this.state = {\n      addedRows: addedRows,\n      rowChanges: rowChanges,\n      editingRowIds: props.editingRowIds || props.defaultEditingRowIds,\n      deletedRowIds: props.deletedRowIds || props.defaultDeletedRowIds,\n      editingCells: props.editingCells || props.defaultEditingCells\n    };\n    var stateHelper = createStateHelper(_this, {\n      editingRowIds: function () {\n        var onEditingRowIdsChange = _this.props.onEditingRowIdsChange;\n        return onEditingRowIdsChange;\n      },\n      editingCells: function () {\n        var onEditingCellsChange = _this.props.onEditingCellsChange;\n        return onEditingCellsChange;\n      },\n      addedRows: function () {\n        var onAddedRowsChange = _this.props.onAddedRowsChange;\n        return onAddedRowsChange;\n      },\n      rowChanges: function () {\n        var onRowChangesChange = _this.props.onRowChangesChange;\n        return onRowChangesChange;\n      },\n      deletedRowIds: function () {\n        var onDeletedRowIdsChange = _this.props.onDeletedRowIdsChange;\n        return onDeletedRowIdsChange;\n      }\n    });\n    _this.startEditRows = stateHelper.applyFieldReducer.bind(stateHelper, 'editingRowIds', startEditRows);\n    _this.stopEditRows = stateHelper.applyFieldReducer.bind(stateHelper, 'editingRowIds', stopEditRows);\n    _this.startEditCells = stateHelper.applyFieldReducer.bind(stateHelper, 'editingCells', startEditCells);\n    _this.stopEditCells = stateHelper.applyFieldReducer.bind(stateHelper, 'editingCells', stopEditCells);\n    _this.changeRow = stateHelper.applyFieldReducer.bind(stateHelper, 'rowChanges', changeRow);\n    _this.cancelChangedRows = stateHelper.applyFieldReducer.bind(stateHelper, 'rowChanges', cancelChanges);\n    _this.commitChangedRows = function (_a) {\n      var rowIds = _a.rowIds;\n      var onCommitChanges = _this.props.onCommitChanges;\n      onCommitChanges({\n        changed: changedRowsByIds(getRowChanges(), rowIds)\n      });\n      _this.cancelChangedRows({\n        rowIds: rowIds\n      });\n    };\n    _this.addRow = stateHelper.applyFieldReducer.bind(stateHelper, 'addedRows', addRow);\n    _this.changeAddedRow = stateHelper.applyFieldReducer.bind(stateHelper, 'addedRows', changeAddedRow);\n    _this.cancelAddedRows = stateHelper.applyFieldReducer.bind(stateHelper, 'addedRows', cancelAddedRows);\n    _this.commitAddedRows = function (_a) {\n      var rowIds = _a.rowIds;\n      var onCommitChanges = _this.props.onCommitChanges;\n      onCommitChanges({\n        added: addedRowsByIds(getAddedRows(), rowIds)\n      });\n      _this.cancelAddedRows({\n        rowIds: rowIds\n      });\n    };\n    _this.deleteRows = stateHelper.applyFieldReducer.bind(stateHelper, 'deletedRowIds', deleteRows);\n    _this.cancelDeletedRows = stateHelper.applyFieldReducer.bind(stateHelper, 'deletedRowIds', cancelDeletedRows);\n    _this.commitDeletedRows = function (_a) {\n      var rowIds = _a.rowIds;\n      var onCommitChanges = _this.props.onCommitChanges;\n      onCommitChanges({\n        deleted: rowIds\n      });\n      _this.cancelDeletedRows({\n        rowIds: rowIds\n      });\n    };\n    return _this;\n  }\n  EditingStateBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.editingRowIds,\n      editingRowIds = _a === void 0 ? prevState.editingRowIds : _a,\n      _b = nextProps.editingCells,\n      editingCells = _b === void 0 ? prevState.editingCells : _b,\n      _c = nextProps.rowChanges,\n      rowChanges = _c === void 0 ? prevState.rowChanges : _c,\n      _d = nextProps.addedRows,\n      addedRows = _d === void 0 ? prevState.addedRows : _d,\n      _e = nextProps.deletedRowIds,\n      deletedRowIds = _e === void 0 ? prevState.deletedRowIds : _e;\n    return {\n      editingRowIds: editingRowIds,\n      editingCells: editingCells,\n      rowChanges: rowChanges,\n      addedRows: addedRows,\n      deletedRowIds: deletedRowIds\n    };\n  };\n  EditingStateBase.prototype.render = function () {\n    var _a = this.props,\n      createRowChange = _a.createRowChange,\n      columnExtensions = _a.columnExtensions,\n      columnEditingEnabled = _a.columnEditingEnabled;\n    var _b = this.state,\n      editingRowIds = _b.editingRowIds,\n      editingCells = _b.editingCells,\n      rowChanges = _b.rowChanges,\n      addedRows = _b.addedRows,\n      deletedRowIds = _b.deletedRowIds;\n    return createElement(Plugin, {\n      name: \"EditingState\"\n    }, createElement(Getter, {\n      name: \"createRowChange\",\n      value: createRowChangeGetter(createRowChange, columnExtensions)\n    }), createElement(Getter, {\n      name: \"editingRowIds\",\n      value: editingRowIds\n    }), createElement(Action, {\n      name: \"startEditRows\",\n      action: this.startEditRows\n    }), createElement(Action, {\n      name: \"stopEditRows\",\n      action: this.stopEditRows\n    }), createElement(Getter, {\n      name: \"editingCells\",\n      value: editingCells\n    }), createElement(Action, {\n      name: \"startEditCells\",\n      action: this.startEditCells\n    }), createElement(Action, {\n      name: \"stopEditCells\",\n      action: this.stopEditCells\n    }), createElement(Getter, {\n      name: \"rowChanges\",\n      value: rowChanges\n    }), createElement(Action, {\n      name: \"changeRow\",\n      action: this.changeRow\n    }), createElement(Action, {\n      name: \"cancelChangedRows\",\n      action: this.cancelChangedRows\n    }), createElement(Action, {\n      name: \"commitChangedRows\",\n      action: this.commitChangedRows\n    }), createElement(Getter, {\n      name: \"addedRows\",\n      value: addedRows\n    }), createElement(Action, {\n      name: \"addRow\",\n      action: this.addRow\n    }), createElement(Action, {\n      name: \"changeAddedRow\",\n      action: this.changeAddedRow\n    }), createElement(Action, {\n      name: \"cancelAddedRows\",\n      action: this.cancelAddedRows\n    }), createElement(Action, {\n      name: \"commitAddedRows\",\n      action: this.commitAddedRows\n    }), createElement(Getter, {\n      name: \"deletedRowIds\",\n      value: deletedRowIds\n    }), createElement(Action, {\n      name: \"deleteRows\",\n      action: this.deleteRows\n    }), createElement(Action, {\n      name: \"cancelDeletedRows\",\n      action: this.cancelDeletedRows\n    }), createElement(Action, {\n      name: \"commitDeletedRows\",\n      action: this.commitDeletedRows\n    }), createElement(Getter, {\n      name: \"isColumnEditingEnabled\",\n      value: columnExtensionValueGetter$1(columnExtensions, columnEditingEnabled)\n    }));\n  };\n  EditingStateBase.defaultProps = {\n    columnEditingEnabled: true,\n    defaultEditingRowIds: [],\n    defaultEditingCells: [],\n    defaultRowChanges: {},\n    defaultAddedRows: [],\n    defaultDeletedRowIds: []\n  };\n  return EditingStateBase;\n}(PureComponent);\n/***\r\n * A plugin that manages grid rows' editing state. It arranges grid rows\r\n * by different lists depending on a row's state.\r\n * */\nvar EditingState = EditingStateBase;\nvar PagingStateBase = /*#__PURE__*/function (_super) {\n  __extends(PagingStateBase, _super);\n  function PagingStateBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this.state = {\n      currentPage: props.currentPage || props.defaultCurrentPage,\n      pageSize: props.pageSize !== undefined ? props.pageSize : props.defaultPageSize\n    };\n    var stateHelper = createStateHelper(_this, {\n      currentPage: function () {\n        var onCurrentPageChange = _this.props.onCurrentPageChange;\n        return onCurrentPageChange;\n      },\n      pageSize: function () {\n        var onPageSizeChange = _this.props.onPageSizeChange;\n        return onPageSizeChange;\n      }\n    });\n    _this.setCurrentPage = stateHelper.applyFieldReducer.bind(stateHelper, 'currentPage', setCurrentPage);\n    _this.setPageSize = stateHelper.applyFieldReducer.bind(stateHelper, 'pageSize', setPageSize);\n    return _this;\n  }\n  PagingStateBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.currentPage,\n      currentPage = _a === void 0 ? prevState.currentPage : _a,\n      _b = nextProps.pageSize,\n      pageSize = _b === void 0 ? prevState.pageSize : _b;\n    return {\n      currentPage: currentPage,\n      pageSize: pageSize\n    };\n  };\n  PagingStateBase.prototype.render = function () {\n    var _a = this.state,\n      pageSize = _a.pageSize,\n      currentPage = _a.currentPage;\n    return createElement(Plugin, {\n      name: \"PagingState\"\n    }, createElement(Getter, {\n      name: \"currentPage\",\n      value: currentPage\n    }), createElement(Getter, {\n      name: \"pageSize\",\n      value: pageSize\n    }), createElement(Action, {\n      name: \"setCurrentPage\",\n      action: this.setCurrentPage\n    }), createElement(Action, {\n      name: \"setPageSize\",\n      action: this.setPageSize\n    }));\n  };\n  PagingStateBase.defaultProps = {\n    defaultPageSize: 10,\n    defaultCurrentPage: 0\n  };\n  return PagingStateBase;\n}(PureComponent);\n/***\r\n * A plugin that manages the paging state. It controls the total page count depending on the\r\n * total row count and the specified page size, controls the currently selected page number\r\n * and changes it in response to the corresponding actions.\r\n * */\nvar PagingState = PagingStateBase;\nvar pluginDependencies$2 = [{\n  name: 'PagingState'\n}];\nvar rowsWithHeadersComputed = function (_a) {\n  var rows = _a.rows,\n    pageSize = _a.pageSize,\n    getRowLevelKey = _a.getRowLevelKey;\n  return rowsWithPageHeaders(rows, pageSize, getRowLevelKey);\n};\nvar totalCountComputed = function (_a) {\n  var rows = _a.rows;\n  return rowCount(rows);\n};\nvar paginatedRowsComputed = function (_a) {\n  var rows = _a.rows,\n    pageSize = _a.pageSize,\n    page = _a.currentPage;\n  return paginatedRows(rows, pageSize, page);\n};\nvar currentPageComputed = function (_a, _b) {\n  var page = _a.currentPage,\n    totalCount = _a.totalCount,\n    pageSize = _a.pageSize;\n  var setCurrentPage = _b.setCurrentPage;\n  return currentPage(page, totalCount, pageSize, setCurrentPage);\n};\n// eslint-disable-next-line react/prefer-stateless-function\nvar IntegratedPagingBase = /*#__PURE__*/function (_super) {\n  __extends(IntegratedPagingBase, _super);\n  function IntegratedPagingBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  IntegratedPagingBase.prototype.render = function () {\n    return createElement(Plugin, {\n      name: \"IntegratedPaging\",\n      dependencies: pluginDependencies$2\n    }, createElement(Getter, {\n      name: \"rows\",\n      computed: rowsWithHeadersComputed\n    }), createElement(Getter, {\n      name: \"totalCount\",\n      computed: totalCountComputed\n    }), createElement(Getter, {\n      name: \"currentPage\",\n      computed: currentPageComputed\n    }), createElement(Getter, {\n      name: \"rows\",\n      computed: paginatedRowsComputed\n    }));\n  };\n  return IntegratedPagingBase;\n}(PureComponent);\n/***\r\n * A plugin that performs built-in data paging. It also changes the current page if the provided\r\n * one cannot be applied due to fewer available pages.\r\n * */\nvar IntegratedPaging = IntegratedPagingBase;\nvar pluginDependencies$3 = [{\n  name: 'PagingState'\n}];\nvar CustomPagingBase = /*#__PURE__*/function (_super) {\n  __extends(CustomPagingBase, _super);\n  function CustomPagingBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  CustomPagingBase.prototype.render = function () {\n    var totalCount = this.props.totalCount;\n    return createElement(Plugin, {\n      name: \"CustomPaging\",\n      dependencies: pluginDependencies$3\n    }, createElement(Getter, {\n      name: \"totalCount\",\n      value: totalCount\n    }));\n  };\n  CustomPagingBase.defaultProps = {\n    totalCount: 0\n  };\n  return CustomPagingBase;\n}(PureComponent);\n/** A plugin that allows implementing a custom totalCount calculation logic. */\nvar CustomPaging = CustomPagingBase;\nvar dependencies = [{\n  name: 'SortingState',\n  optional: true\n}];\nvar columnExtensionValueGetter$2 = function (columnExtensions, defaultValue) {\n  return getColumnExtensionValueGetter(columnExtensions, 'groupingEnabled', defaultValue);\n};\nvar GroupingStateBase = /*#__PURE__*/function (_super) {\n  __extends(GroupingStateBase, _super);\n  function GroupingStateBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this.state = {\n      grouping: props.grouping || props.defaultGrouping,\n      draftGrouping: null,\n      expandedGroups: props.expandedGroups || props.defaultExpandedGroups\n    };\n    _this.stateHelper = createStateHelper(_this, {\n      grouping: function () {\n        var onGroupingChange = _this.props.onGroupingChange;\n        return onGroupingChange;\n      },\n      expandedGroups: function () {\n        var onExpandedGroupsChange = _this.props.onExpandedGroupsChange;\n        return onExpandedGroupsChange;\n      }\n    });\n    _this.changeColumnGrouping = _this.changeColumnGrouping.bind(_this);\n    _this.toggleGroupExpanded = _this.stateHelper.applyReducer.bind(_this.stateHelper, toggleExpandedGroups);\n    _this.draftColumnGrouping = _this.stateHelper.applyReducer.bind(_this.stateHelper, draftColumnGrouping);\n    _this.cancelColumnGroupingDraft = _this.stateHelper.applyReducer.bind(_this.stateHelper, cancelColumnGroupingDraft);\n    _this.changeColumnSorting = _this.changeColumnSorting.bind(_this);\n    return _this;\n  }\n  GroupingStateBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.grouping,\n      grouping = _a === void 0 ? prevState.grouping : _a,\n      _b = nextProps.expandedGroups,\n      expandedGroups = _b === void 0 ? prevState.expandedGroups : _b;\n    return {\n      grouping: grouping,\n      expandedGroups: expandedGroups\n    };\n  };\n  GroupingStateBase.prototype.changeColumnSorting = function (_a, _b, _c) {\n    var sorting = _b.sorting;\n    var changeColumnSorting = _c.changeColumnSorting;\n    var columnName = _a.columnName,\n      keepOther = _a.keepOther,\n      restParams = __rest(_a, [\"columnName\", \"keepOther\"]);\n    var grouping = this.state.grouping;\n    var groupingIndex = grouping.findIndex(function (columnGrouping) {\n      return columnGrouping.columnName === columnName;\n    });\n    if (groupingIndex === -1) {\n      changeColumnSorting(__assign({\n        columnName: columnName,\n        keepOther: keepOther || grouping.map(function (columnGrouping) {\n          return columnGrouping.columnName;\n        })\n      }, restParams));\n      return false;\n    }\n    var sortIndex = adjustSortIndex(groupingIndex, grouping, sorting);\n    changeColumnSorting(__assign({\n      columnName: columnName,\n      sortIndex: sortIndex,\n      keepOther: true\n    }, restParams));\n    return false;\n  };\n  GroupingStateBase.prototype.changeColumnGrouping = function (_a, getters, actions) {\n    var columnName = _a.columnName,\n      groupIndex = _a.groupIndex;\n    this.stateHelper.applyReducer(changeColumnGrouping, {\n      columnName: columnName,\n      groupIndex: groupIndex\n    }, function (nextState, state) {\n      var grouping = nextState.grouping;\n      var prevGrouping = state.grouping;\n      var sorting = getters.sorting;\n      var changeColumnSorting = actions.changeColumnSorting;\n      if (!sorting) return;\n      var columnSortingIndex = sorting.findIndex(function (columnSorting) {\n        return columnSorting.columnName === columnName;\n      });\n      var prevGroupingIndex = prevGrouping.findIndex(function (columnGrouping) {\n        return columnGrouping.columnName === columnName;\n      });\n      var groupingIndex = grouping.findIndex(function (columnGrouping) {\n        return columnGrouping.columnName === columnName;\n      });\n      if (columnSortingIndex === -1 || prevGroupingIndex === prevGrouping.length - 1 && groupingIndex === -1) return;\n      var sortIndex = adjustSortIndex(groupingIndex === -1 ? grouping.length : groupingIndex, grouping, sorting);\n      if (columnSortingIndex === sortIndex) return;\n      changeColumnSorting(__assign({\n        sortIndex: sortIndex,\n        keepOther: true\n      }, sorting[columnSortingIndex]));\n    });\n  };\n  GroupingStateBase.prototype.render = function () {\n    var _a = this.state,\n      grouping = _a.grouping,\n      draftGrouping = _a.draftGrouping,\n      expandedGroups = _a.expandedGroups;\n    var _b = this.props,\n      columnExtensions = _b.columnExtensions,\n      columnGroupingEnabled = _b.columnGroupingEnabled;\n    return createElement(Plugin, {\n      name: \"GroupingState\",\n      dependencies: dependencies\n    }, createElement(Getter, {\n      name: \"grouping\",\n      value: grouping\n    }), createElement(Getter, {\n      name: \"draftGrouping\",\n      value: draftGrouping || grouping\n    }), createElement(Getter, {\n      name: \"isColumnGroupingEnabled\",\n      value: columnExtensionValueGetter$2(columnExtensions, columnGroupingEnabled)\n    }), createElement(Action, {\n      name: \"changeColumnGrouping\",\n      action: this.changeColumnGrouping\n    }), createElement(Action, {\n      name: \"draftColumnGrouping\",\n      action: this.draftColumnGrouping\n    }), createElement(Action, {\n      name: \"cancelColumnGroupingDraft\",\n      action: this.cancelColumnGroupingDraft\n    }), createElement(Getter, {\n      name: \"expandedGroups\",\n      value: expandedGroups\n    }), createElement(Action, {\n      name: \"toggleGroupExpanded\",\n      action: this.toggleGroupExpanded\n    }), createElement(Action, {\n      name: \"changeColumnSorting\",\n      action: this.changeColumnSorting\n    }));\n  };\n  GroupingStateBase.defaultProps = {\n    defaultGrouping: [],\n    defaultExpandedGroups: [],\n    columnGroupingEnabled: true\n  };\n  return GroupingStateBase;\n}(PureComponent);\n/***\r\n * A plugin that manages the grouping state. It lists columns used for grouping and stores\r\n * information about expanded/collapsed groups.\r\n * */\nvar GroupingState = GroupingStateBase;\nvar pluginDependencies$4 = [{\n  name: 'GroupingState'\n}];\nvar getCollapsedRowsComputed$1 = function (_a) {\n  var getCollapsedRows = _a.getCollapsedRows;\n  return groupCollapsedRowsGetter(getCollapsedRows);\n};\nvar expandedGroupedRowsComputed = function (_a) {\n  var rows = _a.rows,\n    grouping = _a.grouping,\n    expandedGroups = _a.expandedGroups,\n    isExporting = _a.isExporting;\n  return expandedGroupRows(rows, grouping, expandedGroups, isExporting);\n};\nvar IntegratedGroupingBase = /*#__PURE__*/function (_super) {\n  __extends(IntegratedGroupingBase, _super);\n  function IntegratedGroupingBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  IntegratedGroupingBase.prototype.render = function () {\n    var columnExtensions = this.props.columnExtensions;\n    var getColumnCriteria = function (columnName) {\n      return getColumnExtension(columnExtensions, columnName).criteria;\n    };\n    var groupedRowsComputed = function (_a) {\n      var rows = _a.rows,\n        grouping = _a.grouping,\n        getCellValue = _a.getCellValue;\n      return groupedRows(rows, grouping, getCellValue, getColumnCriteria);\n    };\n    return createElement(Plugin, {\n      name: \"IntegratedGrouping\",\n      dependencies: pluginDependencies$4\n    }, createElement(Getter, {\n      name: \"isGroupRow\",\n      value: groupRowChecker\n    }), createElement(Getter, {\n      name: \"getRowLevelKey\",\n      value: groupRowLevelKeyGetter\n    }), createElement(Getter, {\n      name: \"getCollapsedRows\",\n      computed: getCollapsedRowsComputed$1\n    }), createElement(Getter, {\n      name: \"rows\",\n      computed: groupedRowsComputed\n    }), createElement(Getter, {\n      name: \"rows\",\n      computed: expandedGroupedRowsComputed\n    }));\n  };\n  return IntegratedGroupingBase;\n}(PureComponent);\n/* tslint:disable: max-line-length */\n/** A plugin that performs built-in grouping and group expanding/collapsing. */\nvar IntegratedGrouping = IntegratedGroupingBase;\n/* tslint:enable: max-line-length */\n\nvar pluginDependencies$5 = [{\n  name: 'GroupingState'\n}];\nvar getCollapsedRowsComputed$2 = function (_a) {\n  var getCollapsedRows = _a.getCollapsedRows;\n  return groupCollapsedRowsGetter(getCollapsedRows);\n};\nvar expandedGroupedRowsComputed$1 = function (_a) {\n  var rows = _a.rows,\n    grouping = _a.grouping,\n    expandedGroups = _a.expandedGroups,\n    isExporting = _a.isExporting;\n  return expandedGroupRows(rows, grouping, expandedGroups, isExporting);\n};\nvar getRowIdComputed = function (_a) {\n  var getRowId = _a.getRowId,\n    rows = _a.rows;\n  return customGroupingRowIdGetter(getRowId, rows);\n};\nvar CustomGroupingBase = /*#__PURE__*/function (_super) {\n  __extends(CustomGroupingBase, _super);\n  function CustomGroupingBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  CustomGroupingBase.prototype.render = function () {\n    var _a = this.props,\n      getChildGroups = _a.getChildGroups,\n      appliedGrouping = _a.grouping,\n      appliedExpandedGroups = _a.expandedGroups;\n    var groupedRowsComputed = function (_a) {\n      var rows = _a.rows,\n        grouping = _a.grouping;\n      return customGroupedRows(rows, grouping, getChildGroups);\n    };\n    return createElement(Plugin, {\n      name: \"CustomGrouping\",\n      dependencies: pluginDependencies$5\n    }, appliedGrouping && createElement(Getter, {\n      name: \"grouping\",\n      value: appliedGrouping\n    }), appliedExpandedGroups && createElement(Getter, {\n      name: \"expandedGroups\",\n      value: appliedExpandedGroups\n    }), createElement(Getter, {\n      name: \"isGroupRow\",\n      value: groupRowChecker\n    }), createElement(Getter, {\n      name: \"getRowLevelKey\",\n      value: groupRowLevelKeyGetter\n    }), createElement(Getter, {\n      name: \"getCollapsedRows\",\n      computed: getCollapsedRowsComputed$2\n    }), createElement(Getter, {\n      name: \"rows\",\n      computed: groupedRowsComputed\n    }), createElement(Getter, {\n      name: \"getRowId\",\n      computed: getRowIdComputed\n    }), createElement(Getter, {\n      name: \"rows\",\n      computed: expandedGroupedRowsComputed$1\n    }));\n  };\n  return CustomGroupingBase;\n}(PureComponent);\n// tslint:disable-next-line: max-line-length\n/** A plugin that converts custom formatted grouped data to a supported format and performs local group expanding/collapsing. */\nvar CustomGrouping = CustomGroupingBase;\nvar SelectionStateBase = /*#__PURE__*/function (_super) {\n  __extends(SelectionStateBase, _super);\n  function SelectionStateBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this.state = {\n      selection: props.selection || props.defaultSelection\n    };\n    var stateHelper = createStateHelper(_this, {\n      selection: function () {\n        var onSelectionChange = _this.props.onSelectionChange;\n        return onSelectionChange;\n      }\n    });\n    _this.toggleSelection = stateHelper.applyFieldReducer.bind(stateHelper, 'selection', toggleSelection);\n    return _this;\n  }\n  SelectionStateBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.selection,\n      selection = _a === void 0 ? prevState.selection : _a;\n    return {\n      selection: selection\n    };\n  };\n  SelectionStateBase.prototype.render = function () {\n    var selection = this.state.selection;\n    return createElement(Plugin, {\n      name: \"SelectionState\"\n    }, createElement(Getter, {\n      name: \"selection\",\n      value: selection\n    }), createElement(Action, {\n      name: \"toggleSelection\",\n      action: this.toggleSelection\n    }));\n  };\n  SelectionStateBase.defaultProps = {\n    defaultSelection: []\n  };\n  return SelectionStateBase;\n}(PureComponent);\n/** A plugin that manages the selection state. */\nvar SelectionState = SelectionStateBase;\nvar rowsWithAvailableToSelectComputed = function (_a) {\n  var rows = _a.rows,\n    getRowId = _a.getRowId,\n    isGroupRow = _a.isGroupRow;\n  return rowsWithAvailableToSelect(rows, getRowId, isGroupRow);\n};\nvar allSelectedComputed = function (_a) {\n  var rows = _a.rows,\n    selection = _a.selection;\n  return allSelected(rows, selection);\n};\nvar someSelectedComputed = function (_a) {\n  var rows = _a.rows,\n    selection = _a.selection;\n  return someSelected(rows, selection);\n};\nvar selectAllAvailableComputed = function (_a) {\n  var availableToSelect = _a.rows.availableToSelect;\n  return !!availableToSelect.length;\n};\nvar toggleSelectAll = function (state, _a, _b) {\n  var availableToSelect = _a.rows.availableToSelect;\n  var toggleSelection = _b.toggleSelection;\n  toggleSelection({\n    state: state,\n    rowIds: availableToSelect\n  });\n};\nvar unwrapRowsComputed = function (_a) {\n  var rows = _a.rows;\n  return unwrapSelectedRows(rows);\n};\nvar pluginDependencies$6 = [{\n  name: 'SelectionState'\n}];\n// eslint-disable-next-line react/prefer-stateless-function\nvar IntegratedSelectionBase = /*#__PURE__*/function (_super) {\n  __extends(IntegratedSelectionBase, _super);\n  function IntegratedSelectionBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  IntegratedSelectionBase.prototype.render = function () {\n    return createElement(Plugin, {\n      name: \"IntegratedSelection\",\n      dependencies: pluginDependencies$6\n    }, createElement(Getter, {\n      name: \"rows\",\n      computed: rowsWithAvailableToSelectComputed\n    }), createElement(Getter, {\n      name: \"allSelected\",\n      computed: allSelectedComputed\n    }), createElement(Getter, {\n      name: \"someSelected\",\n      computed: someSelectedComputed\n    }), createElement(Getter, {\n      name: \"selectAllAvailable\",\n      computed: selectAllAvailableComputed\n    }), createElement(Action, {\n      name: \"toggleSelectAll\",\n      action: toggleSelectAll\n    }), createElement(Getter, {\n      name: \"rows\",\n      computed: unwrapRowsComputed\n    }));\n  };\n  return IntegratedSelectionBase;\n}(PureComponent);\n/* tslint:disable: max-line-length */\n/** A plugin that performs built-in selection. */\nvar IntegratedSelection = IntegratedSelectionBase;\n/* tslint:enable: max-line-length */\n\nvar columnExtensionValueGetter$3 = function (columnExtensions, defaultValue) {\n  return getColumnExtensionValueGetter(columnExtensions, 'sortingEnabled', defaultValue);\n};\nvar SortingStateBase = /*#__PURE__*/function (_super) {\n  __extends(SortingStateBase, _super);\n  function SortingStateBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this.state = {\n      sorting: props.sorting || props.defaultSorting\n    };\n    var stateHelper = createStateHelper(_this, {\n      sorting: function () {\n        var onSortingChange = _this.props.onSortingChange;\n        return onSortingChange;\n      }\n    });\n    _this.changeColumnSorting = stateHelper.applyReducer.bind(stateHelper, function (prevState, payload) {\n      var _a = _this.props.sorting,\n        sorting = _a === void 0 ? prevState.sorting : _a;\n      var persistentSortedColumns = getPersistentSortedColumns(sorting, props.columnExtensions);\n      var keepOther = calculateKeepOther(prevState.sorting, payload.keepOther, persistentSortedColumns);\n      return changeColumnSorting(prevState, __assign(__assign({}, payload), {\n        keepOther: keepOther\n      }));\n    });\n    return _this;\n  }\n  SortingStateBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.sorting,\n      sorting = _a === void 0 ? prevState.sorting : _a;\n    return {\n      sorting: sorting\n    };\n  };\n  SortingStateBase.prototype.render = function () {\n    var sorting = this.state.sorting;\n    var _a = this.props,\n      columnExtensions = _a.columnExtensions,\n      columnSortingEnabled = _a.columnSortingEnabled;\n    return createElement(Plugin, {\n      name: \"SortingState\"\n    }, createElement(Getter, {\n      name: \"sorting\",\n      value: sorting\n    }), createElement(Getter, {\n      name: \"isColumnSortingEnabled\",\n      value: columnExtensionValueGetter$3(columnExtensions, columnSortingEnabled)\n    }), createElement(Action, {\n      name: \"changeColumnSorting\",\n      action: this.changeColumnSorting\n    }));\n  };\n  SortingStateBase.defaultProps = {\n    defaultSorting: [],\n    columnSortingEnabled: true\n  };\n  return SortingStateBase;\n}(PureComponent);\n// tslint:disable-next-line: max-line-length\n/** A plugin that manages the sorting state. It controls the list of columns that participate in sorting. */\nvar SortingState = SortingStateBase;\nvar pluginDependencies$7 = [{\n  name: 'SortingState'\n}];\nvar IntegratedSortingBase = /*#__PURE__*/function (_super) {\n  __extends(IntegratedSortingBase, _super);\n  function IntegratedSortingBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  IntegratedSortingBase.prototype.render = function () {\n    var columnExtensions = this.props.columnExtensions;\n    var getColumnCompare = function (columnName) {\n      return getColumnExtension(columnExtensions, columnName).compare;\n    };\n    var rowsComputed = function (_a) {\n      var rows = _a.rows,\n        sorting = _a.sorting,\n        getCellValue = _a.getCellValue,\n        isGroupRow = _a.isGroupRow,\n        getRowLevelKey = _a.getRowLevelKey;\n      return sortedRows(rows, sorting, getCellValue, getColumnCompare, isGroupRow, getRowLevelKey);\n    };\n    return createElement(Plugin, {\n      name: \"IntegratedSorting\",\n      dependencies: pluginDependencies$7\n    }, createElement(Getter, {\n      name: \"rows\",\n      computed: rowsComputed\n    }));\n  };\n  return IntegratedSortingBase;\n}(PureComponent);\n/** A plugin that performs built-in data sorting. */\nvar IntegratedSorting = IntegratedSortingBase;\nvar getTargetColumns = function (payload, columns) {\n  return payload.filter(function (item) {\n    return item.type === 'column';\n  }).map(function (item) {\n    return columns.find(function (column) {\n      return column.name === item.columnName;\n    });\n  });\n};\n// tslint:disable-next-line: max-line-length\nvar DragDropProviderBase = /*#__PURE__*/function (_super) {\n  __extends(DragDropProviderBase, _super);\n  function DragDropProviderBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this.state = {\n      payload: null,\n      clientOffset: null\n    };\n    _this.change = function (_a) {\n      var payload = _a.payload,\n        clientOffset = _a.clientOffset;\n      return _this.setState({\n        payload: payload,\n        clientOffset: clientOffset\n      });\n    };\n    return _this;\n  }\n  DragDropProviderBase.prototype.componentDidMount = function () {\n    this.bodyRef = document.body;\n  };\n  DragDropProviderBase.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      Container = _a.containerComponent,\n      Column = _a.columnComponent;\n    var _b = this.state,\n      payload = _b.payload,\n      clientOffset = _b.clientOffset;\n    return createElement(Plugin, {\n      name: \"DragDropProvider\"\n    }, createElement(Getter, {\n      name: \"draggingEnabled\",\n      value: true\n    }), createElement(Template, {\n      name: \"root\"\n    }, createElement(DragDropProvider$1, {\n      onChange: this.change\n    }, createElement(TemplatePlaceholder, null)), payload && createElement(TemplateConnector, null, function (_a) {\n      var columns = _a.columns;\n      return createPortal(createElement(Container, {\n        clientOffset: clientOffset\n      }, getTargetColumns(payload, columns).map(function (column) {\n        return createElement(Column, {\n          key: column.name,\n          column: column\n        });\n      })), _this.bodyRef);\n    })));\n  };\n  DragDropProviderBase.components = {\n    containerComponent: 'Container',\n    columnComponent: 'Column'\n  };\n  return DragDropProviderBase;\n}(PureComponent);\n// tslint:disable-next-line: max-line-length\n/** A plugin that implements the drag-and-drop functionality and visualizes columns that are being dragged. */\nvar DragDropProvider = DragDropProviderBase;\nvar pluginDependencies$8 = [{\n  name: 'Table'\n}, {\n  name: 'DragDropProvider',\n  optional: true\n}];\nvar tableHeaderRowsComputed = function (_a) {\n  var tableHeaderRows = _a.tableHeaderRows;\n  return tableHeaderRowsWithReordering(tableHeaderRows);\n};\n// tslint:disable-next-line: max-line-length\nvar TableColumnReorderingRaw = /*#__PURE__*/function (_super) {\n  __extends(TableColumnReorderingRaw, _super);\n  function TableColumnReorderingRaw(props) {\n    var _this = _super.call(this, props) || this;\n    _this.cellDimensionGetters = {};\n    _this.cellDimensions = [];\n    _this.state = {\n      order: props.defaultOrder,\n      sourceColumnIndex: -1,\n      targetColumnIndex: -1\n    };\n    _this.onOver = _this.handleOver.bind(_this);\n    _this.onLeave = _this.handleLeave.bind(_this);\n    _this.onDrop = _this.handleDrop.bind(_this);\n    return _this;\n  }\n  TableColumnReorderingRaw.prototype.getState = function () {\n    var orderState = this.state.order;\n    var _a = this.props.order,\n      order = _a === void 0 ? orderState : _a;\n    return __assign(__assign({}, this.state), {\n      order: order\n    });\n  };\n  TableColumnReorderingRaw.prototype.getDraftOrder = function () {\n    var _a = this.getState(),\n      order = _a.order,\n      sourceColumnIndex = _a.sourceColumnIndex,\n      targetColumnIndex = _a.targetColumnIndex;\n    return draftOrder(order, sourceColumnIndex, targetColumnIndex);\n  };\n  TableColumnReorderingRaw.prototype.getAvailableColumns = function () {\n    var _this = this;\n    return this.getDraftOrder().filter(function (columnName) {\n      return !!_this.cellDimensionGetters[columnName];\n    });\n  };\n  TableColumnReorderingRaw.prototype.cacheCellDimensions = function () {\n    var _this = this;\n    this.cellDimensions = this.cellDimensions && this.cellDimensions.length ? this.cellDimensions : this.getAvailableColumns().map(function (columnName) {\n      return _this.cellDimensionGetters[columnName]();\n    });\n  };\n  TableColumnReorderingRaw.prototype.resetCellDimensions = function () {\n    this.cellDimensions = [];\n  };\n  TableColumnReorderingRaw.prototype.ensureCellDimensionGetters = function (tableColumns) {\n    var _this = this;\n    Object.keys(this.cellDimensionGetters).forEach(function (columnName) {\n      var columnIndex = tableColumns.findIndex(function (_a) {\n        var type = _a.type,\n          column = _a.column;\n        return type === TABLE_DATA_TYPE && column.name === columnName;\n      });\n      if (columnIndex === -1) {\n        delete _this.cellDimensionGetters[columnName];\n      }\n    });\n  };\n  // tslint:disable-next-line: max-line-length\n  TableColumnReorderingRaw.prototype.storeCellDimensionsGetter = function (tableColumn, getter, tableColumns) {\n    if (tableColumn.type === TABLE_DATA_TYPE) {\n      this.cellDimensionGetters[tableColumn.column.name] = getter;\n    }\n    this.ensureCellDimensionGetters(tableColumns);\n  };\n  TableColumnReorderingRaw.prototype.handleOver = function (_a) {\n    var payload = _a.payload,\n      x = _a.clientOffset.x;\n    var sourceColumnName = payload[0].columnName;\n    var availableColumns = this.getAvailableColumns();\n    var relativeSourceColumnIndex = availableColumns.indexOf(sourceColumnName);\n    if (relativeSourceColumnIndex === -1) return;\n    this.cacheCellDimensions();\n    var cellDimensions = this.cellDimensions;\n    var relativeTargetIndex = getTableTargetColumnIndex(cellDimensions, x);\n    if (relativeTargetIndex === -1) return;\n    var _b = this.getState(),\n      prevSourceColumnIndex = _b.sourceColumnIndex,\n      prevTargetColumnIndex = _b.targetColumnIndex;\n    var draftOrder = this.getDraftOrder();\n    var targetColumnIndex = draftOrder.indexOf(availableColumns[relativeTargetIndex]);\n    if (targetColumnIndex === prevTargetColumnIndex) return;\n    var sourceColumnIndex = prevSourceColumnIndex === -1 ? draftOrder.indexOf(sourceColumnName) : prevSourceColumnIndex;\n    this.setState({\n      sourceColumnIndex: sourceColumnIndex,\n      targetColumnIndex: targetColumnIndex\n    });\n  };\n  TableColumnReorderingRaw.prototype.handleLeave = function () {\n    this.setState({\n      sourceColumnIndex: -1,\n      targetColumnIndex: -1\n    });\n    this.resetCellDimensions();\n  };\n  TableColumnReorderingRaw.prototype.handleDrop = function () {\n    var _a = this.getState(),\n      sourceColumnIndex = _a.sourceColumnIndex,\n      targetColumnIndex = _a.targetColumnIndex,\n      order = _a.order;\n    var onOrderChange = this.props.onOrderChange;\n    if (sourceColumnIndex === -1 && targetColumnIndex === -1) return;\n    var nextOrder = changeColumnOrder(order, {\n      sourceColumnName: order[sourceColumnIndex],\n      targetColumnName: order[targetColumnIndex]\n    });\n    this.setState({\n      order: nextOrder,\n      sourceColumnIndex: -1,\n      targetColumnIndex: -1\n    });\n    if (onOrderChange) {\n      onOrderChange(nextOrder);\n    }\n    this.resetCellDimensions();\n  };\n  TableColumnReorderingRaw.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      Container = _a.tableContainerComponent,\n      Row = _a.rowComponent,\n      Cell = _a.cellComponent;\n    this.cellDimensionGetters = {};\n    return createElement(Plugin, {\n      name: \"TableColumnReordering\",\n      dependencies: pluginDependencies$8\n    }, createElement(OrderedTableColumns, {\n      order: this.getDraftOrder()\n    }), createElement(Getter, {\n      name: \"tableHeaderRows\",\n      computed: tableHeaderRowsComputed\n    }), createElement(Template, {\n      name: \"table\"\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var draggingEnabled = _a.draggingEnabled;\n        return createElement(Container, __assign({}, params, {\n          onOver: _this.onOver,\n          onLeave: _this.onLeave,\n          onDrop: _this.onDrop,\n          draggingEnabled: draggingEnabled\n        }), createElement(PlaceholderWithRef, null));\n      });\n    }), createElement(Template, {\n      name: \"tableRow\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return tableRow.type === TABLE_REORDERING_TYPE;\n      }\n    }, function (params) {\n      return createElement(Row, __assign({}, params));\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return tableRow.type === TABLE_REORDERING_TYPE;\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var tableColumns = _a.tableColumns;\n        return createElement(Cell, __assign({}, params, {\n          getCellDimensions: function (getter) {\n            return _this.storeCellDimensionsGetter(params.tableColumn, getter, tableColumns);\n          }\n        }));\n      });\n    }));\n  };\n  TableColumnReorderingRaw.defaultProps = {\n    defaultOrder: []\n  };\n  TableColumnReorderingRaw.components = {\n    tableContainerComponent: 'TableContainer',\n    rowComponent: 'Row',\n    cellComponent: 'Cell'\n  };\n  return TableColumnReorderingRaw;\n}(PureComponent);\nvar TableContainer = function (_a) {\n  var onOver = _a.onOver,\n    onLeave = _a.onLeave,\n    onDrop = _a.onDrop,\n    children = _a.children,\n    draggingEnabled = _a.draggingEnabled;\n  return draggingEnabled ? createElement(DropTarget, {\n    onOver: onOver,\n    onLeave: onLeave,\n    onDrop: onDrop\n  }, children) : children;\n};\n/** A plugin that manages the displayed columns' order. */\nvar TableColumnReordering = withComponents({\n  TableContainer: TableContainer\n})(TableColumnReorderingRaw);\nvar RowPlaceholder = forwardRef(function (props, ref) {\n  return createElement(TemplatePlaceholder, {\n    name: \"tableRow\",\n    params: __assign(__assign({}, props), {\n      ref: ref\n    })\n  });\n});\nvar CellPlaceholder = function (props) {\n  return createElement(TemplatePlaceholder, {\n    name: \"tableCell\",\n    params: props\n  });\n};\nvar tableHeaderRows = [];\nvar tableBodyRowsComputed = function (_a) {\n  var rows = _a.rows,\n    getRowId = _a.getRowId,\n    isDataLoading = _a.isDataLoading;\n  return tableRowsWithDataRows(rows, getRowId, isDataLoading);\n};\nvar tableFooterRows = [];\nvar defaultMessages = {\n  noData: 'No data'\n};\nvar TableBase = /*#__PURE__*/function (_super) {\n  __extends(TableBase, _super);\n  function TableBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  TableBase.prototype.render = function () {\n    var _a = this.props,\n      Layout = _a.layoutComponent,\n      Cell = _a.cellComponent,\n      Row = _a.rowComponent,\n      NoDataRow = _a.noDataRowComponent,\n      NoDataCell = _a.noDataCellComponent,\n      StubRow = _a.stubRowComponent,\n      StubCell = _a.stubCellComponent,\n      StubHeaderCell = _a.stubHeaderCellComponent,\n      columnExtensions = _a.columnExtensions,\n      messages = _a.messages,\n      containerComponent = _a.containerComponent,\n      tableComponent = _a.tableComponent,\n      headComponent = _a.headComponent,\n      bodyComponent = _a.bodyComponent,\n      footerComponent = _a.footerComponent;\n    var getMessage = getMessagesFormatter(__assign(__assign({}, defaultMessages), messages));\n    return createElement(Plugin, {\n      name: \"Table\"\n    }, createElement(Getter, {\n      name: \"tableHeaderRows\",\n      value: tableHeaderRows\n    }), createElement(Getter, {\n      name: \"tableBodyRows\",\n      computed: tableBodyRowsComputed\n    }), createElement(Getter, {\n      name: \"tableFooterRows\",\n      value: tableFooterRows\n    }), createElement(TableColumnsWithDataRowsGetter, {\n      columnExtensions: columnExtensions\n    }), createElement(Getter, {\n      name: \"getTableCellColSpan\",\n      value: tableCellColSpanGetter\n    }), createElement(Template, {\n      name: \"body\"\n    }, createElement(TemplatePlaceholder, {\n      name: \"table\"\n    })), createElement(Template, {\n      name: \"table\"\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var headerRows = _a.tableHeaderRows,\n          bodyRows = _a.tableBodyRows,\n          footerRows = _a.tableFooterRows,\n          columns = _a.tableColumns,\n          getTableCellColSpan = _a.getTableCellColSpan;\n        return createElement(TemplatePlaceholder, {\n          name: \"tableLayout\",\n          params: __assign(__assign({}, params), {\n            tableComponent: tableComponent,\n            headComponent: headComponent,\n            bodyComponent: bodyComponent,\n            footerComponent: footerComponent,\n            containerComponent: containerComponent,\n            headerRows: headerRows,\n            bodyRows: bodyRows,\n            footerRows: footerRows,\n            columns: columns,\n            rowComponent: RowPlaceholder,\n            cellComponent: CellPlaceholder,\n            getCellColSpan: getTableCellColSpan\n          })\n        });\n      });\n    }), createElement(Template, {\n      name: \"tableLayout\"\n    }, function (params) {\n      return createElement(Layout, __assign({}, params));\n    }), createElement(Template, {\n      name: \"tableCell\"\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var headerRows = _a.tableHeaderRows;\n        return isHeaderStubTableCell(params.tableRow, headerRows) ? createElement(StubHeaderCell, __assign({}, params)) : createElement(StubCell, __assign({}, params));\n      });\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow,\n          tableColumn = _a.tableColumn;\n        return isDataTableCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var getCellValue = _a.getCellValue;\n        var columnName = params.tableColumn.column.name;\n        var value = getCellValue(params.tableRow.row, columnName);\n        return createElement(TemplatePlaceholder, {\n          name: \"valueFormatter\",\n          params: {\n            value: value,\n            row: params.tableRow.row,\n            column: params.tableColumn.column\n          }\n        }, function (content) {\n          return createElement(Cell, __assign({}, params, {\n            row: params.tableRow.row,\n            column: params.tableColumn.column,\n            value: value\n          }), content);\n        });\n      });\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return !!isNoDataTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var tableColumns = _a.tableColumns;\n        if (isNoDataTableCell(params.tableColumn, tableColumns)) {\n          return createElement(NoDataCell, __assign({}, params, {\n            getMessage: getMessage\n          }));\n        }\n        return null;\n      });\n    }), createElement(Template, {\n      name: \"tableRow\"\n    }, function (params) {\n      return createElement(StubRow, __assign({}, params));\n    }), createElement(Template, {\n      name: \"tableRow\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return !!isDataTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(Row, __assign({}, params, {\n        row: params.tableRow.row\n      }));\n    }), createElement(Template, {\n      name: \"tableRow\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return !!isNoDataTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(NoDataRow, __assign({}, params));\n    }));\n  };\n  TableBase.COLUMN_TYPE = TABLE_DATA_TYPE;\n  TableBase.ROW_TYPE = TABLE_DATA_TYPE;\n  TableBase.NODATA_ROW_TYPE = TABLE_NODATA_TYPE;\n  TableBase.defaultProps = {\n    messages: {}\n  };\n  TableBase.components = {\n    tableComponent: 'Table',\n    headComponent: 'TableHead',\n    bodyComponent: 'TableBody',\n    footerComponent: 'TableFooter',\n    containerComponent: 'Container',\n    layoutComponent: 'Layout',\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n    noDataRowComponent: 'NoDataRow',\n    noDataCellComponent: 'NoDataCell',\n    stubRowComponent: 'StubRow',\n    stubCellComponent: 'StubCell',\n    stubHeaderCellComponent: 'StubHeaderCell'\n  };\n  return TableBase;\n}(PureComponent);\n/***\r\n * A plugin that renders Grid data as a table. This plugin enables you to customize\r\n * table rows and columns, and contains the Table Row and Table Cell components\r\n * that can be extended by other plugins\r\n * */\nvar Table = TableBase;\nvar TableSelectionBase = /*#__PURE__*/function (_super) {\n  __extends(TableSelectionBase, _super);\n  function TableSelectionBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  TableSelectionBase.prototype.render = function () {\n    var _a = this.props,\n      highlightRow = _a.highlightRow,\n      selectByRowClick = _a.selectByRowClick,\n      showSelectionColumn = _a.showSelectionColumn,\n      showSelectAll = _a.showSelectAll,\n      HeaderCell = _a.headerCellComponent,\n      Cell = _a.cellComponent,\n      Row = _a.rowComponent,\n      selectionColumnWidth = _a.selectionColumnWidth;\n    var tableColumnsComputed = function (_a) {\n      var tableColumns = _a.tableColumns;\n      return tableColumnsWithSelection(tableColumns, selectionColumnWidth, showSelectionColumn);\n    };\n    return createElement(Plugin, {\n      name: \"TableSelection\",\n      dependencies: [{\n        name: 'Table'\n      }, {\n        name: 'SelectionState'\n      }, {\n        name: 'IntegratedSelection',\n        optional: !showSelectAll\n      }]\n    }, createElement(Getter, {\n      name: \"tableColumns\",\n      computed: tableColumnsComputed\n    }), highlightRow && createElement(Getter, {\n      name: \"highlightSelectedRow\",\n      value: true\n    }), showSelectionColumn && showSelectAll && createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow,\n          tableColumn = _a.tableColumn;\n        return isSelectAllTableCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a, _b) {\n        var selectAllAvailable = _a.selectAllAvailable,\n          allSelected = _a.allSelected,\n          someSelected = _a.someSelected;\n        var toggleSelectAll = _b.toggleSelectAll;\n        return createElement(HeaderCell, __assign({}, params, {\n          disabled: !selectAllAvailable,\n          allSelected: allSelected,\n          someSelected: someSelected,\n          onToggle: function (select) {\n            return toggleSelectAll(select);\n          }\n        }));\n      });\n    }), showSelectionColumn && createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow,\n          tableColumn = _a.tableColumn;\n        return isSelectTableCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a, _b) {\n        var selection = _a.selection;\n        var toggleSelection = _b.toggleSelection;\n        return createElement(Cell, __assign({}, params, {\n          row: params.tableRow.row,\n          selected: selection.indexOf(params.tableRow.rowId) !== -1,\n          onToggle: function () {\n            return toggleSelection({\n              rowIds: [params.tableRow.rowId]\n            });\n          }\n        }));\n      });\n    }), (highlightRow || selectByRowClick) && createElement(Template, {\n      name: \"tableRow\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return !!isDataTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a, _b) {\n        var selection = _a.selection;\n        var toggleSelection = _b.toggleSelection;\n        return createElement(Row, __assign({}, params, {\n          selectByRowClick: selectByRowClick,\n          highlighted: isRowHighlighted(highlightRow, selection, params.tableRow),\n          onToggle: function () {\n            return toggleSelection({\n              rowIds: [params.tableRow.rowId]\n            });\n          }\n        }));\n      });\n    }));\n  };\n  TableSelectionBase.defaultProps = {\n    highlightRow: false,\n    selectByRowClick: false,\n    showSelectAll: false,\n    showSelectionColumn: true\n  };\n  TableSelectionBase.components = {\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n    headerCellComponent: 'HeaderCell'\n  };\n  TableSelectionBase.COLUMN_TYPE = TABLE_SELECT_TYPE;\n  return TableSelectionBase;\n}(PureComponent);\n/***\r\n * A plugin that visualizes table rows' selection state by rendering selection checkboxes\r\n * and highlighting the selected rows.\r\n * */\nvar TableSelection = TableSelectionBase;\n\n// tslint:disable-next-line: max-line-length\nvar RowDetailStateBase = /*#__PURE__*/function (_super) {\n  __extends(RowDetailStateBase, _super);\n  function RowDetailStateBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this.state = {\n      expandedRowIds: props.expandedRowIds || props.defaultExpandedRowIds\n    };\n    var stateHelper = createStateHelper(_this, {\n      expandedRowIds: function () {\n        var onExpandedRowIdsChange = _this.props.onExpandedRowIdsChange;\n        return onExpandedRowIdsChange;\n      }\n    });\n    _this.toggleDetailRowExpanded = stateHelper.applyFieldReducer.bind(stateHelper, 'expandedRowIds', toggleDetailRowExpanded);\n    return _this;\n  }\n  RowDetailStateBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.expandedRowIds,\n      expandedRowIds = _a === void 0 ? prevState.expandedRowIds : _a;\n    return {\n      expandedRowIds: expandedRowIds\n    };\n  };\n  RowDetailStateBase.prototype.render = function () {\n    var expandedRowIds = this.state.expandedRowIds;\n    return createElement(Plugin, {\n      name: \"RowDetailState\"\n    }, createElement(Getter, {\n      name: \"expandedDetailRowIds\",\n      value: expandedRowIds\n    }), createElement(Action, {\n      name: \"toggleDetailRowExpanded\",\n      action: this.toggleDetailRowExpanded\n    }));\n  };\n  RowDetailStateBase.defaultProps = {\n    defaultExpandedRowIds: []\n  };\n  return RowDetailStateBase;\n}(PureComponent);\n/** A plugin that manages the expanded state for table row details. */\nvar RowDetailState = RowDetailStateBase;\nvar getCellColSpanComputed = function (_a) {\n  var getTableCellColSpan = _a.getTableCellColSpan;\n  return tableDetailCellColSpanGetter(getTableCellColSpan);\n};\nvar pluginDependencies$9 = [{\n  name: 'RowDetailState'\n}, {\n  name: 'Table'\n}];\nvar TableRowDetailBase = /*#__PURE__*/function (_super) {\n  __extends(TableRowDetailBase, _super);\n  function TableRowDetailBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  TableRowDetailBase.prototype.render = function () {\n    var _a = this.props,\n      rowHeight = _a.rowHeight,\n      Content = _a.contentComponent,\n      ToggleCell = _a.toggleCellComponent,\n      Cell = _a.cellComponent,\n      Row = _a.rowComponent,\n      toggleColumnWidth = _a.toggleColumnWidth;\n    var tableColumnsComputed = function (_a) {\n      var tableColumns = _a.tableColumns;\n      return tableColumnsWithDetail(tableColumns, toggleColumnWidth);\n    };\n    var tableBodyRowsComputed = function (_a) {\n      var tableBodyRows = _a.tableBodyRows,\n        expandedDetailRowIds = _a.expandedDetailRowIds;\n      return tableRowsWithExpandedDetail(tableBodyRows, expandedDetailRowIds, rowHeight);\n    };\n    return createElement(Plugin, {\n      name: \"TableRowDetail\",\n      dependencies: pluginDependencies$9\n    }, createElement(Getter, {\n      name: \"tableColumns\",\n      computed: tableColumnsComputed\n    }), createElement(Getter, {\n      name: \"tableBodyRows\",\n      computed: tableBodyRowsComputed\n    }), createElement(Getter, {\n      name: \"getTableCellColSpan\",\n      computed: getCellColSpanComputed\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow,\n          tableColumn = _a.tableColumn;\n        return isDetailToggleTableCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a, _b) {\n        var expandedDetailRowIds = _a.expandedDetailRowIds;\n        var toggleDetailRowExpanded = _b.toggleDetailRowExpanded;\n        return createElement(ToggleCell, __assign({}, params, {\n          row: params.tableRow.row,\n          expanded: isDetailRowExpanded(expandedDetailRowIds, params.tableRow.rowId),\n          onToggle: function () {\n            return toggleDetailRowExpanded({\n              rowId: params.tableRow.rowId\n            });\n          }\n        }));\n      });\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return !!isDetailTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var tableColumns = _a.tableColumns;\n        if (isDetailTableCell(params.tableColumn, tableColumns)) {\n          return createElement(Cell, __assign({}, params, {\n            row: params.tableRow.row\n          }), Content && createElement(Content, {\n            row: params.tableRow.row\n          }));\n        }\n        return null;\n      });\n    }), createElement(Template, {\n      name: \"tableRow\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return !!isDetailTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(Row, __assign({}, params, {\n        row: params.tableRow.row\n      }));\n    }));\n  };\n  TableRowDetailBase.ROW_TYPE = TABLE_DETAIL_TYPE;\n  TableRowDetailBase.COLUMN_TYPE = TABLE_DETAIL_TYPE;\n  TableRowDetailBase.defaultProps = {\n    contentComponent: function () {\n      return null;\n    }\n  };\n  TableRowDetailBase.components = {\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n    toggleCellComponent: 'ToggleCell'\n  };\n  return TableRowDetailBase;\n}(PureComponent);\n/** A plugin that renders detail rows. */\nvar TableRowDetail = TableRowDetailBase;\nvar defaultSummaryMessages = {\n  sum: 'Sum',\n  min: 'Min',\n  max: 'Max',\n  avg: 'Avg',\n  count: 'Count'\n};\nvar TableSummaryContent = function (_a) {\n  var column = _a.column,\n    columnSummaries = _a.columnSummaries,\n    formatlessSummaryTypes = _a.formatlessSummaryTypes,\n    Item = _a.itemComponent,\n    messages = _a.messages;\n  var getMessage = getMessagesFormatter(__assign(__assign({}, defaultSummaryMessages), messages));\n  var SummaryItem = function (_a) {\n    var summary = _a.summary,\n      children = _a.children;\n    return createElement(Item, {\n      getMessage: getMessage,\n      type: summary.type,\n      value: summary.value\n    }, children || String(summary.value));\n  };\n  var isFormatlessSummary = function (summary) {\n    return summary.value === null || formatlessSummaryTypes.includes(summary.type) || defaultFormatlessSummaries.includes(summary.type);\n  };\n  return createElement(Fragment, null, columnSummaries.map(function (summary) {\n    if (isFormatlessSummary(summary)) {\n      return createElement(SummaryItem, {\n        key: summary.type,\n        summary: summary\n      });\n    }\n    return createElement(TemplatePlaceholder, {\n      key: summary.type,\n      name: \"valueFormatter\",\n      params: {\n        column: column,\n        value: summary.value\n      }\n    }, function (content) {\n      return createElement(SummaryItem, {\n        summary: summary\n      }, content);\n    });\n  }));\n};\nvar getInlineSummaryComponent = function (column, summary, formatlessSummaries) {\n  return function () {\n    return summary.value === null || formatlessSummaries.includes(summary.type) ? createElement(Fragment, null, summary.value) : createElement(TemplatePlaceholder, {\n      key: summary.type,\n      name: \"valueFormatter\",\n      params: {\n        column: column,\n        value: summary.value\n      }\n    }, function (content) {\n      return content || summary.value;\n    });\n  };\n};\nvar flattenGroupInlineSummaries = function (columns, tableRow, groupSummaryItems, groupSummaryValues, formatlessSummaries) {\n  return getGroupInlineSummaries(groupSummaryItems, columns, groupSummaryValues[tableRow.row.compoundKey]).map(function (colSummaries) {\n    return __spread(colSummaries.summaries.map(function (summary) {\n      return __assign(__assign({}, summary), {\n        columnTitle: colSummaries.column.title,\n        messageKey: summary.type + \"Of\",\n        component: getInlineSummaryComponent(colSummaries.column, summary, formatlessSummaries)\n      });\n    }));\n  }).reduce(function (acc, summaries) {\n    return acc.concat(summaries);\n  }, []);\n};\nvar pluginDependencies$a = [{\n  name: 'GroupingState'\n}, {\n  name: 'Table'\n}, {\n  name: 'DataTypeProvider',\n  optional: true\n}, {\n  name: 'SummaryState',\n  optional: true\n}, {\n  name: 'CustomSummary',\n  optional: true\n}, {\n  name: 'IntegratedSummary',\n  optional: true\n}, {\n  name: 'Table'\n}, {\n  name: 'DataTypeProvider',\n  optional: true\n}, {\n  name: 'TableSelection',\n  optional: true\n}];\nvar side = 'left';\n/** @internal */\nvar defaultMessages$1 = {\n  countOf: 'Count: ',\n  sumOf: 'Sum of {columnTitle} is ',\n  maxOf: 'Max of {columnTitle} is ',\n  minOf: 'Min of {columnTitle} is ',\n  avgOf: 'Avg of {columnTitle} is '\n};\nvar tableBodyRowsComputed$1 = function (_a) {\n  var tableBodyRows = _a.tableBodyRows,\n    isGroupRow = _a.isGroupRow;\n  return tableRowsWithGrouping(tableBodyRows, isGroupRow);\n};\nvar getCellColSpanComputed$1 = function (_a) {\n  var getTableCellColSpan = _a.getTableCellColSpan,\n    groupSummaryItems = _a.groupSummaryItems,\n    viewport = _a.viewport;\n  var firstVisibleColumnIndex = viewport === null || viewport === void 0 ? void 0 : viewport.columns[0][0];\n  return tableGroupCellColSpanGetter(getTableCellColSpan, groupSummaryItems, firstVisibleColumnIndex);\n};\nvar TableGroupRowBase = /*#__PURE__*/function (_super) {\n  __extends(TableGroupRowBase, _super);\n  function TableGroupRowBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  TableGroupRowBase.prototype.render = function () {\n    var _a = this.props,\n      GroupCell = _a.cellComponent,\n      Content = _a.contentComponent,\n      Icon = _a.iconComponent,\n      GroupRow = _a.rowComponent,\n      Container = _a.containerComponent,\n      GroupIndentCell = _a.indentCellComponent,\n      InlineSummary = _a.inlineSummaryComponent,\n      InlineSummaryItem = _a.inlineSummaryItemComponent,\n      SummaryCell = _a.summaryCellComponent,\n      SummaryItem = _a.summaryItemComponent,\n      StubCell = _a.stubCellComponent,\n      indentColumnWidth = _a.indentColumnWidth,\n      contentCellPadding = _a.contentCellPadding,\n      showColumnsWhenGrouped = _a.showColumnsWhenGrouped,\n      columnExtensions = _a.columnExtensions,\n      messages = _a.messages,\n      formatlessSummaryTypes = _a.formatlessSummaryTypes;\n    var getMessage = getMessagesFormatter(__assign(__assign({}, defaultMessages$1), messages));\n    return createElement(Plugin, {\n      name: \"TableGroupRow\",\n      dependencies: pluginDependencies$a\n    }, createElement(TableColumnsWithGrouping, {\n      columnExtensions: columnExtensions,\n      showColumnsWhenGrouped: showColumnsWhenGrouped,\n      indentColumnWidth: indentColumnWidth\n    }), createElement(Getter, {\n      name: \"tableBodyRows\",\n      computed: tableBodyRowsComputed$1\n    }), createElement(Getter, {\n      name: \"getTableCellColSpan\",\n      computed: getCellColSpanComputed$1\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return isGroupTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a, _b) {\n        var grouping = _a.grouping,\n          expandedGroups = _a.expandedGroups,\n          groupSummaryItems = _a.groupSummaryItems,\n          groupSummaryValues = _a.groupSummaryValues,\n          columns = _a.columns;\n        var toggleGroupExpanded = _b.toggleGroupExpanded;\n        if (isGroupTableCell(params.tableRow, params.tableColumn)) {\n          var formatlessSummaries = defaultFormatlessSummaries.concat(formatlessSummaryTypes);\n          var inlineSummaries_1 = groupSummaryItems ? flattenGroupInlineSummaries(columns, params.tableRow, groupSummaryItems, groupSummaryValues, formatlessSummaries) : [];\n          var cellIndent = calculateGroupCellIndent(params.tableColumn, grouping, indentColumnWidth);\n          var contentIndent_1 = \"calc(\" + cellIndent + \"px + \" + contentCellPadding + \")\";\n          return createElement(TemplatePlaceholder, {\n            name: \"valueFormatter\",\n            params: {\n              column: params.tableColumn.column,\n              value: params.tableRow.row.value\n            }\n          }, function (content) {\n            return createElement(GroupCell, __assign({}, params, {\n              contentComponent: Content,\n              iconComponent: Icon,\n              containerComponent: Container,\n              row: params.tableRow.row,\n              column: params.tableColumn.column,\n              expanded: expandedGroups.indexOf(params.tableRow.row.compoundKey) !== -1,\n              onToggle: function () {\n                return toggleGroupExpanded({\n                  groupKey: params.tableRow.row.compoundKey\n                });\n              },\n              inlineSummaries: inlineSummaries_1,\n              inlineSummaryComponent: InlineSummary,\n              inlineSummaryItemComponent: InlineSummaryItem,\n              getMessage: getMessage,\n              position: contentIndent_1,\n              side: side\n            }), content);\n          });\n        }\n        if (isGroupIndentTableCell(params.tableRow, params.tableColumn, grouping)) {\n          var fixedProps = {\n            side: side,\n            position: calculateGroupCellIndent(params.tableColumn, grouping, indentColumnWidth)\n          };\n          if (GroupIndentCell) {\n            return createElement(GroupIndentCell, __assign({}, params, fixedProps, {\n              row: params.tableRow.row,\n              column: params.tableColumn.column\n            }));\n          }\n          return createElement(TemplatePlaceholder, {\n            params: fixedProps\n          });\n        }\n        if (isGroupIndentStubTableCell(params.tableRow, params.tableColumn, grouping)) {\n          return createElement(TemplatePlaceholder, {\n            params: params\n          });\n        }\n        return null;\n      });\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow,\n          tableColumn = _a.tableColumn;\n        return isGroupRowOrdinaryCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a, _b) {\n        var groupSummaryItems = _a.groupSummaryItems,\n          groupSummaryValues = _a.groupSummaryValues,\n          grouping = _a.grouping,\n          tableColumns = _a.tableColumns;\n        var toggleGroupExpanded = _b.toggleGroupExpanded;\n        var tableColumn = params.tableColumn,\n          tableRow = params.tableRow;\n        var onToggle = function () {\n          return toggleGroupExpanded({\n            groupKey: tableRow.row.compoundKey\n          });\n        };\n        if (isRowSummaryCell(tableRow, tableColumn, grouping, groupSummaryItems)) {\n          var columnSummaries = getColumnSummaries(groupSummaryItems, tableColumn.column.name, groupSummaryValues[tableRow.row.compoundKey], function (summaryItem) {\n            return !summaryItem.showInGroupFooter && summaryItem.alignByColumn;\n          });\n          return createElement(SummaryCell, __assign({}, params, {\n            row: params.tableRow.row,\n            column: params.tableColumn.column,\n            onToggle: onToggle\n          }), createElement(TableSummaryContent, {\n            column: tableColumn.column,\n            columnSummaries: columnSummaries,\n            formatlessSummaryTypes: formatlessSummaryTypes,\n            itemComponent: SummaryItem,\n            messages: messages\n          }));\n        }\n        // NOTE: ensure that right-aligned summary will fit into a column\n        if (isPreviousCellContainSummary(tableRow, tableColumn, tableColumns, grouping, groupSummaryItems) || TABLE_FLEX_TYPE === tableColumn.type) {\n          return createElement(StubCell, __assign({}, params, {\n            onToggle: onToggle\n          }));\n        }\n        return createElement(TemplatePlaceholder, null);\n      });\n    }), createElement(Template, {\n      name: \"tableRow\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return isGroupTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(GroupRow, __assign({}, params, {\n        row: params.tableRow.row\n      }));\n    }));\n  };\n  TableGroupRowBase.ROW_TYPE = TABLE_GROUP_TYPE;\n  TableGroupRowBase.COLUMN_TYPE = TABLE_GROUP_TYPE;\n  TableGroupRowBase.defaultProps = {\n    showColumnsWhenGrouped: false,\n    formatlessSummaryTypes: []\n  };\n  TableGroupRowBase.components = {\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n    contentComponent: 'Content',\n    iconComponent: 'Icon',\n    containerComponent: 'Container',\n    indentCellComponent: 'IndentCell',\n    inlineSummaryComponent: 'InlineSummary',\n    inlineSummaryItemComponent: 'InlineSummaryItem',\n    summaryCellComponent: 'SummaryCell',\n    summaryItemComponent: 'SummaryItem',\n    stubCellComponent: 'StubCell'\n  };\n  return TableGroupRowBase;\n}(PureComponent);\n/** A plugin that renders group rows and enables them to expand and collapse. */\nvar TableGroupRow = TableGroupRowBase;\nvar tableHeaderRowsComputed$1 = function (_a) {\n  var tableHeaderRows = _a.tableHeaderRows;\n  return tableRowsWithHeading(tableHeaderRows || []);\n};\nvar TableHeaderRowBase = /*#__PURE__*/function (_super) {\n  __extends(TableHeaderRowBase, _super);\n  function TableHeaderRowBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  TableHeaderRowBase.prototype.render = function () {\n    var _a = this.props,\n      showSortingControls = _a.showSortingControls,\n      showGroupingControls = _a.showGroupingControls,\n      HeaderCell = _a.cellComponent,\n      HeaderRow = _a.rowComponent,\n      Content = _a.contentComponent,\n      SortLabel = _a.sortLabelComponent,\n      GroupButton = _a.groupButtonComponent,\n      Title = _a.titleComponent,\n      messages = _a.messages;\n    var getMessage = getMessagesFormatter(messages);\n    return createElement(Plugin, {\n      name: \"TableHeaderRow\",\n      dependencies: [{\n        name: 'Table'\n      }, {\n        name: 'SortingState',\n        optional: !showSortingControls\n      }, {\n        name: 'GroupingState',\n        optional: !showGroupingControls\n      }, {\n        name: 'DragDropProvider',\n        optional: true\n      }, {\n        name: 'TableColumnResizing',\n        optional: true\n      }]\n    }, createElement(Getter, {\n      name: \"tableHeaderRows\",\n      computed: tableHeaderRowsComputed$1\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow,\n          tableColumn = _a.tableColumn;\n        return isHeadingTableCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a, _b) {\n        var sorting = _a.sorting,\n          tableColumns = _a.tableColumns,\n          draggingEnabled = _a.draggingEnabled,\n          tableColumnResizingEnabled = _a.tableColumnResizingEnabled,\n          isColumnSortingEnabled = _a.isColumnSortingEnabled,\n          isColumnGroupingEnabled = _a.isColumnGroupingEnabled,\n          columnResizingMode = _a.columnResizingMode;\n        var changeColumnSorting = _b.changeColumnSorting,\n          changeColumnGrouping = _b.changeColumnGrouping,\n          changeTableColumnWidth = _b.changeTableColumnWidth,\n          draftTableColumnWidth = _b.draftTableColumnWidth,\n          cancelTableColumnWidthDraft = _b.cancelTableColumnWidthDraft,\n          _c = _b.storeWidthGetters,\n          storeWidthGetters = _c === void 0 ? function () {} : _c;\n        var _d = params.tableColumn.column,\n          columnName = _d.name,\n          columnTitle = _d.title;\n        var atLeastOneDataColumn = tableColumns.filter(function (_a) {\n          var type = _a.type;\n          return type === TABLE_DATA_TYPE;\n        }).length > 1;\n        var sortingEnabled = isColumnSortingEnabled && isColumnSortingEnabled(columnName);\n        var groupingEnabled = isColumnGroupingEnabled && isColumnGroupingEnabled(columnName) && atLeastOneDataColumn;\n        var nextColumnName = getNextColumnName(tableColumns, columnName);\n        return createElement(HeaderCell, __assign({}, params, {\n          column: params.tableColumn.column,\n          draggingEnabled: draggingEnabled && atLeastOneDataColumn,\n          resizingEnabled: tableColumnResizingEnabled && (!!nextColumnName || columnResizingMode === 'widget'),\n          onWidthChange: function (_a) {\n            var shift = _a.shift;\n            return changeTableColumnWidth({\n              columnName: columnName,\n              nextColumnName: nextColumnName,\n              shift: shift\n            });\n          },\n          onWidthDraft: function (_a) {\n            var shift = _a.shift;\n            return draftTableColumnWidth({\n              columnName: columnName,\n              nextColumnName: nextColumnName,\n              shift: shift\n            });\n          },\n          onWidthDraftCancel: function () {\n            return cancelTableColumnWidthDraft();\n          },\n          getCellWidth: function (getter) {\n            return storeWidthGetters({\n              tableColumn: params.tableColumn,\n              getter: getter,\n              tableColumns: tableColumns\n            });\n          }\n        }), createElement(TemplatePlaceholder, {\n          name: \"tableHeaderCellBefore\",\n          params: {\n            column: params.tableColumn.column\n          }\n        }), createElement(Content, {\n          column: params.tableColumn.column,\n          align: params.tableColumn.align\n        }, showSortingControls ? createElement(SortLabel, {\n          column: params.tableColumn.column,\n          align: params.tableColumn.align,\n          direction: getColumnSortingDirection(sorting, columnName) || null,\n          disabled: !sortingEnabled,\n          onSort: function (_a) {\n            var direction = _a.direction,\n              keepOther = _a.keepOther;\n            changeColumnSorting({\n              columnName: columnName,\n              direction: direction,\n              keepOther: keepOther\n            });\n          },\n          getMessage: getMessage\n        }, createElement(Title, null, columnTitle || columnName)) : createElement(Title, null, columnTitle || columnName)), showGroupingControls ? createElement(GroupButton, {\n          disabled: !groupingEnabled,\n          onGroup: function () {\n            return changeColumnGrouping({\n              columnName: columnName\n            });\n          }\n        }) : null);\n      });\n    }), createElement(Template, {\n      name: \"tableRow\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return !!isHeadingTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(HeaderRow, __assign({}, params));\n    }));\n  };\n  TableHeaderRowBase.ROW_TYPE = TABLE_HEADING_TYPE;\n  TableHeaderRowBase.defaultProps = {\n    showSortingControls: false,\n    showGroupingControls: false,\n    messages: {}\n  };\n  TableHeaderRowBase.components = {\n    cellComponent: 'Cell',\n    rowComponent: 'Row',\n    contentComponent: 'Content',\n    sortLabelComponent: 'SortLabel',\n    titleComponent: 'Title',\n    groupButtonComponent: 'GroupButton'\n  };\n  return TableHeaderRowBase;\n}(PureComponent);\nTableHeaderRowBase.components = {\n  cellComponent: 'Cell',\n  rowComponent: 'Row',\n  contentComponent: 'Content',\n  sortLabelComponent: 'SortLabel',\n  titleComponent: 'Title',\n  groupButtonComponent: 'GroupButton'\n};\n/***\r\n * A plugin that renders the table's header row. The Column's `title` field specifies the\r\n * column's title in the header row.The plugin also allows you to manage a column's sorting\r\n * and grouping state and initiate column dragging.\r\n * */\nvar TableHeaderRow = TableHeaderRowBase;\nvar CellPlaceholder$1 = function (props) {\n  return createElement(TemplatePlaceholder, {\n    params: props\n  });\n};\nvar bandLevelsVisibilityComputed = function (_a) {\n  var columnIntervals = _a.columnVisibleIntervals,\n    tableHeaderColumnChains = _a.tableHeaderColumnChains,\n    bandLevels = _a.bandLevels;\n  return bandLevelsVisibility(columnIntervals, tableHeaderColumnChains, bandLevels);\n};\nvar columnVisibleIntervalsComputed = function (_a) {\n  var viewport = _a.viewport,\n    tableColumns = _a.tableColumns;\n  return columnVisibleIntervals(viewport, tableColumns);\n};\nvar TableBandHeaderBase = /*#__PURE__*/function (_super) {\n  __extends(TableBandHeaderBase, _super);\n  function TableBandHeaderBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  TableBandHeaderBase.prototype.render = function () {\n    var _a = this.props,\n      Cell = _a.cellComponent,\n      Row = _a.rowComponent,\n      HeaderCell = _a.bandedHeaderCellComponent,\n      InvisibleCell = _a.invisibleCellComponent,\n      columnBands = _a.columnBands;\n    var tableHeaderRowsComputed = function (_a) {\n      var tableHeaderRows = _a.tableHeaderRows,\n        tableColumns = _a.tableColumns;\n      return tableRowsWithBands(tableHeaderRows, columnBands, tableColumns);\n    };\n    var tableHeaderColumnChainsComputed = function (_a) {\n      var tableHeaderRows = _a.tableHeaderRows,\n        tableColumns = _a.tableColumns;\n      return tableHeaderColumnChainsWithBands(tableHeaderRows, tableColumns, columnBands);\n    };\n    var bandLevels = columnBandLevels(columnBands);\n    return createElement(Plugin, {\n      name: \"TableBandHeader\",\n      dependencies: [{\n        name: 'Table'\n      }, {\n        name: 'TableHeaderRow'\n      }, {\n        name: 'TableSelection',\n        optional: true\n      }, {\n        name: 'TableEditColumn',\n        optional: true\n      }, {\n        name: 'TableColumnVisibility',\n        optional: true\n      }, {\n        name: 'TableGroupRow',\n        optional: true\n      }]\n    }, createElement(Getter, {\n      name: \"tableHeaderRows\",\n      computed: tableHeaderRowsComputed\n    }), createElement(Getter, {\n      name: \"columnVisibleIntervals\",\n      computed: columnVisibleIntervalsComputed\n    }), createElement(Getter, {\n      name: \"tableHeaderColumnChains\",\n      computed: tableHeaderColumnChainsComputed\n    }), createElement(Getter, {\n      name: \"bandLevels\",\n      value: bandLevels\n    }), createElement(Getter, {\n      name: \"bandLevelsVisibility\",\n      computed: bandLevelsVisibilityComputed\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return isBandedOrHeaderRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var tableColumns = _a.tableColumns,\n          tableHeaderRows = _a.tableHeaderRows,\n          tableHeaderColumnChains = _a.tableHeaderColumnChains,\n          columnIntervals = _a.columnVisibleIntervals,\n          levelsVisibility = _a.bandLevelsVisibility;\n        var bandComponent = getBandComponent(params, tableHeaderRows, tableColumns, columnBands, tableHeaderColumnChains, columnIntervals, levelsVisibility);\n        switch (bandComponent.type) {\n          case BAND_DUPLICATE_RENDER:\n            return createElement(TemplatePlaceholder, {\n              params: __assign({}, params)\n            });\n          case BAND_EMPTY_CELL:\n            return createElement(InvisibleCell, null);\n          case BAND_GROUP_CELL:\n            {\n              var _b = bandComponent.payload,\n                value = _b.value,\n                payload = __rest(_b, [\"value\"]);\n              return createElement(Cell, __assign({}, params, payload), value);\n            }\n          case BAND_HEADER_CELL:\n            return createElement(TemplatePlaceholder, {\n              name: \"tableCell\",\n              params: __assign(__assign({}, params), bandComponent.payload)\n            });\n          case BAND_FILL_LEVEL_CELL:\n            return createElement(Cell, __assign({}, params, bandComponent.payload, {\n              style: {\n                whiteSpace: 'pre'\n              }\n            }), ' ');\n          default:\n            return null;\n        }\n      });\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow,\n          tableColumn = _a.tableColumn;\n        return isHeadingTableCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(HeaderCell, __assign({\n        component: CellPlaceholder$1\n      }, params));\n    }), createElement(Template, {\n      name: \"tableRow\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return isBandedTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(Row, __assign({}, params));\n    }));\n  };\n  TableBandHeaderBase.ROW_TYPE = TABLE_BAND_TYPE;\n  TableBandHeaderBase.components = {\n    cellComponent: 'Cell',\n    rowComponent: 'Row',\n    bandedHeaderCellComponent: 'BandedHeaderCell',\n    invisibleCellComponent: 'InvisibleCell'\n  };\n  return TableBandHeaderBase;\n}(PureComponent);\nTableBandHeaderBase.components = {\n  cellComponent: 'Cell',\n  rowComponent: 'Row',\n  bandedHeaderCellComponent: 'BandedHeaderCell',\n  invisibleCellComponent: 'InvisibleCell'\n};\n/** A plugin that renders the banded cells. */\nvar TableBandHeader = TableBandHeaderBase;\nvar pluginDependencies$b = [{\n  name: 'FilteringState'\n}, {\n  name: 'Table'\n}, {\n  name: 'DataTypeProvider',\n  optional: true\n}];\nvar defaultMessages$2 = {\n  filterPlaceholder: 'Filter...',\n  contains: 'Contains',\n  notContains: 'Does not contain',\n  startsWith: 'Starts with',\n  endsWith: 'Ends with',\n  equal: 'Equals',\n  notEqual: 'Does not equal',\n  greaterThan: 'Greater than',\n  greaterThanOrEqual: 'Greater than or equal to',\n  lessThan: 'Less than',\n  lessThanOrEqual: 'Less than or equal to'\n};\nvar TableFilterRowBase = /*#__PURE__*/function (_super) {\n  __extends(TableFilterRowBase, _super);\n  function TableFilterRowBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this.state = {\n      filterOperations: {}\n    };\n    return _this;\n  }\n  TableFilterRowBase.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      rowHeight = _a.rowHeight,\n      showFilterSelector = _a.showFilterSelector,\n      FilterCell = _a.cellComponent,\n      FilterRow = _a.rowComponent,\n      FilterSelector = _a.filterSelectorComponent,\n      iconComponent = _a.iconComponent,\n      toggleButtonComponent = _a.toggleButtonComponent,\n      EditorComponent = _a.editorComponent,\n      messages = _a.messages;\n    var getMessage = getMessagesFormatter(__assign(__assign({}, defaultMessages$2), messages));\n    var tableHeaderRowsComputed = function (_a) {\n      var tableHeaderRows = _a.tableHeaderRows;\n      return tableHeaderRowsWithFilter(tableHeaderRows, rowHeight);\n    };\n    return createElement(Plugin, {\n      name: \"TableFilterRow\",\n      dependencies: pluginDependencies$b\n    }, createElement(Getter, {\n      name: \"tableHeaderRows\",\n      computed: tableHeaderRowsComputed\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow,\n          tableColumn = _a.tableColumn;\n        return isFilterTableCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a, _b) {\n        var filters = _a.filters,\n          isColumnFilteringEnabled = _a.isColumnFilteringEnabled,\n          getAvailableFilterOperations = _a.getAvailableFilterOperations,\n          isDataRemote = _a.isDataRemote;\n        var changeColumnFilter = _b.changeColumnFilter,\n          scrollToRow = _b.scrollToRow;\n        var filterOperations = _this.state.filterOperations;\n        var columnName = params.tableColumn.column.name;\n        var filter = getColumnFilterConfig(filters, columnName);\n        var onFilter = function (config) {\n          if (isDataRemote) {\n            scrollToRow(TOP_POSITION);\n          }\n          changeColumnFilter({\n            columnName: columnName,\n            config: config\n          });\n        };\n        var columnFilterOperations = getColumnFilterOperations(getAvailableFilterOperations, columnName);\n        var selectedFilterOperation = getSelectedFilterOperation(filterOperations, columnName, filter, columnFilterOperations);\n        var handleFilterOperationChange = function (value) {\n          var _a;\n          _this.setState({\n            filterOperations: __assign(__assign({}, filterOperations), (_a = {}, _a[columnName] = value, _a))\n          });\n          if (filter && !isFilterValueEmpty(filter.value)) {\n            onFilter({\n              value: filter.value,\n              operation: value\n            });\n          }\n        };\n        var handleFilterValueChange = function (value) {\n          return onFilter(!isFilterValueEmpty(value) ? {\n            value: value,\n            operation: selectedFilterOperation\n          } : null);\n        };\n        var filteringEnabled = isColumnFilteringEnabled(columnName);\n        return createElement(TemplatePlaceholder, {\n          name: \"valueEditor\",\n          params: {\n            column: params.tableColumn.column,\n            value: filter ? filter.value : undefined,\n            onValueChange: handleFilterValueChange,\n            disabled: !filteringEnabled\n          }\n        }, function (content) {\n          return createElement(FilterCell, __assign({}, params, {\n            getMessage: getMessage,\n            column: params.tableColumn.column,\n            filter: filter,\n            filteringEnabled: filteringEnabled,\n            onFilter: onFilter\n          }), showFilterSelector ? createElement(FilterSelector, {\n            toggleButtonComponent: toggleButtonComponent,\n            iconComponent: iconComponent,\n            value: selectedFilterOperation,\n            availableValues: columnFilterOperations,\n            onChange: handleFilterOperationChange,\n            disabled: !filteringEnabled,\n            getMessage: getMessage\n          }) : null, content || createElement(EditorComponent, {\n            value: filter ? filter.value : undefined,\n            disabled: !filteringEnabled,\n            getMessage: getMessage,\n            onChange: handleFilterValueChange\n          }));\n        });\n      });\n    }), createElement(Template, {\n      name: \"tableRow\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return !!isFilterTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(FilterRow, __assign({}, params));\n    }));\n  };\n  TableFilterRowBase.ROW_TYPE = TABLE_FILTER_TYPE;\n  TableFilterRowBase.defaultProps = {\n    showFilterSelector: false,\n    messages: {}\n  };\n  TableFilterRowBase.components = {\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n    filterSelectorComponent: 'FilterSelector',\n    iconComponent: 'Icon',\n    editorComponent: 'Editor',\n    toggleButtonComponent: 'ToggleButton'\n  };\n  return TableFilterRowBase;\n}(PureComponent);\n/** A plugin that renders a filter row. */\nvar TableFilterRow = TableFilterRowBase;\nvar pluginDependencies$c = [{\n  name: 'EditingState'\n}, {\n  name: 'Table'\n}, {\n  name: 'DataTypeProvider',\n  optional: true\n}];\nvar TableEditRowBase = /*#__PURE__*/function (_super) {\n  __extends(TableEditRowBase, _super);\n  function TableEditRowBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  TableEditRowBase.prototype.render = function () {\n    var _a = this.props,\n      EditCell = _a.cellComponent,\n      EditRow = _a.rowComponent,\n      rowHeight = _a.rowHeight;\n    var tableBodyRowsComputed = function (_a) {\n      var tableBodyRows = _a.tableBodyRows,\n        editingRowIds = _a.editingRowIds,\n        addedRows = _a.addedRows;\n      return tableRowsWithEditing(tableBodyRows, editingRowIds, addedRows, rowHeight);\n    };\n    return createElement(Plugin, {\n      name: \"TableEditRow\",\n      dependencies: pluginDependencies$c\n    }, createElement(Getter, {\n      name: \"tableBodyRows\",\n      computed: tableBodyRowsComputed\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow,\n          tableColumn = _a.tableColumn;\n        return isEditTableCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a, _b) {\n        var getCellValue = _a.getCellValue,\n          createRowChange = _a.createRowChange,\n          rowChanges = _a.rowChanges,\n          isColumnEditingEnabled = _a.isColumnEditingEnabled;\n        var changeAddedRow = _b.changeAddedRow,\n          changeRow = _b.changeRow;\n        var _c = params.tableRow,\n          rowId = _c.rowId,\n          row = _c.row;\n        var column = params.tableColumn.column;\n        var columnName = column.name;\n        var isNew = isAddedTableRow(params.tableRow);\n        var changedRow = isNew ? row : __assign(__assign({}, row), getRowChange(rowChanges, rowId));\n        var value = getCellValue(changedRow, columnName);\n        var onValueChange = function (newValue) {\n          var changeArgs = {\n            rowId: rowId,\n            change: createRowChange(changedRow, newValue, columnName)\n          };\n          if (isNew) {\n            changeAddedRow(changeArgs);\n          } else {\n            changeRow(changeArgs);\n          }\n        };\n        var editingEnabled = isColumnEditingEnabled(columnName);\n        return createElement(TemplatePlaceholder, {\n          name: \"valueEditor\",\n          params: {\n            column: column,\n            row: row,\n            value: value,\n            onValueChange: onValueChange,\n            disabled: !editingEnabled\n          }\n        }, function (content) {\n          return createElement(EditCell, __assign({}, params, {\n            row: row,\n            column: column,\n            value: value,\n            editingEnabled: editingEnabled,\n            onValueChange: onValueChange\n          }), content);\n        });\n      });\n    }), createElement(Template, {\n      name: \"tableRow\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return !!(isEditTableRow(tableRow) || isAddedTableRow(tableRow));\n      }\n    }, function (params) {\n      return createElement(EditRow, __assign({}, params, {\n        row: params.tableRow.row\n      }));\n    }));\n  };\n  TableEditRowBase.ADDED_ROW_TYPE = TABLE_ADDED_TYPE;\n  TableEditRowBase.EDIT_ROW_TYPE = TABLE_EDIT_TYPE;\n  TableEditRowBase.components = {\n    rowComponent: 'Row',\n    cellComponent: 'Cell'\n  };\n  return TableEditRowBase;\n}(PureComponent);\n/** A plugin that renders a row being edited. */\nvar TableEditRow = TableEditRowBase;\nvar pluginDependencies$d = [{\n  name: 'EditingState'\n}, {\n  name: 'Table'\n}];\nvar defaultMessages$3 = {\n  addCommand: 'New',\n  editCommand: 'Edit',\n  deleteCommand: 'Delete',\n  commitCommand: 'Save',\n  cancelCommand: 'Cancel'\n};\nvar TableEditColumnBase = /*#__PURE__*/function (_super) {\n  __extends(TableEditColumnBase, _super);\n  function TableEditColumnBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  TableEditColumnBase.prototype.render = function () {\n    var _a = this.props,\n      Cell = _a.cellComponent,\n      HeaderCell = _a.headerCellComponent,\n      Command = _a.commandComponent,\n      showAddCommand = _a.showAddCommand,\n      showEditCommand = _a.showEditCommand,\n      showDeleteCommand = _a.showDeleteCommand,\n      width = _a.width,\n      messages = _a.messages;\n    var getMessage = getMessagesFormatter(__assign(__assign({}, defaultMessages$3), messages));\n    var tableColumnsComputed = function (_a) {\n      var tableColumns = _a.tableColumns;\n      return tableColumnsWithEditing(tableColumns, width);\n    };\n    return createElement(Plugin, {\n      name: \"TableEditColumn\",\n      dependencies: pluginDependencies$d\n    }, createElement(Getter, {\n      name: \"tableColumns\",\n      computed: tableColumnsComputed\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow,\n          tableColumn = _a.tableColumn;\n        return isHeadingEditCommandsTableCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (getters, actions) {\n        return createElement(HeaderCell, __assign({}, params), showAddCommand && createElement(Command, {\n          id: \"add\",\n          text: getMessage('addCommand'),\n          onExecute: function () {\n            return actions.addRow();\n          }\n        }));\n      });\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow,\n          tableColumn = _a.tableColumn;\n        return isEditCommandsTableCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (getters, actions) {\n        var isEdit = isEditTableRow(params.tableRow);\n        var isNew = isAddedTableRow(params.tableRow);\n        var isEditing = isEdit || isNew;\n        var rowIds = [params.tableRow.rowId];\n        return createElement(Cell, __assign({}, params, {\n          row: params.tableRow.row\n        }), showEditCommand && !isEditing && createElement(Command, {\n          id: \"edit\",\n          text: getMessage('editCommand'),\n          onExecute: function () {\n            return actions.startEditRows({\n              rowIds: rowIds\n            });\n          }\n        }), showDeleteCommand && !isEditing && createElement(Command, {\n          id: \"delete\",\n          text: getMessage('deleteCommand'),\n          onExecute: function () {\n            actions.deleteRows({\n              rowIds: rowIds\n            });\n            actions.commitDeletedRows({\n              rowIds: rowIds\n            });\n          }\n        }), isEditing && createElement(Command, {\n          id: \"commit\",\n          text: getMessage('commitCommand'),\n          onExecute: function () {\n            if (isNew) {\n              actions.commitAddedRows({\n                rowIds: rowIds\n              });\n            } else {\n              actions.stopEditRows({\n                rowIds: rowIds\n              });\n              actions.commitChangedRows({\n                rowIds: rowIds\n              });\n            }\n          }\n        }), isEditing && createElement(Command, {\n          id: \"cancel\",\n          text: getMessage('cancelCommand'),\n          onExecute: function () {\n            if (isNew) {\n              actions.cancelAddedRows({\n                rowIds: rowIds\n              });\n            } else {\n              actions.stopEditRows({\n                rowIds: rowIds\n              });\n              actions.cancelChangedRows({\n                rowIds: rowIds\n              });\n            }\n          }\n        }));\n      });\n    }));\n  };\n  TableEditColumnBase.COLUMN_TYPE = TABLE_EDIT_COMMAND_TYPE;\n  TableEditColumnBase.defaultProps = {\n    showAddCommand: false,\n    showEditCommand: false,\n    showDeleteCommand: false,\n    width: 140,\n    messages: {}\n  };\n  TableEditColumnBase.components = {\n    cellComponent: 'Cell',\n    headerCellComponent: 'HeaderCell',\n    commandComponent: 'Command'\n  };\n  return TableEditColumnBase;\n}(PureComponent);\n/***\r\n * A plugin that renders a command column. This column contains controls used for row editing,\r\n * creating, or deleting and committing/canceling changes.\r\n * */\nvar TableEditColumn = TableEditColumnBase;\nvar pluginDependencies$e = [{\n  name: 'Table'\n}];\n// tslint:disable-next-line: max-line-length\nvar TableColumnResizingBase = /*#__PURE__*/function (_super) {\n  __extends(TableColumnResizingBase, _super);\n  function TableColumnResizingBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this.widthGetters = {};\n    _this.cachedWidths = {};\n    _this.state = {\n      columnWidths: props.columnWidths || props.defaultColumnWidths,\n      draftColumnWidths: []\n    };\n    var stateHelper = createStateHelper(_this, {\n      columnWidths: function () {\n        var onColumnWidthsChange = _this.props.onColumnWidthsChange;\n        return onColumnWidthsChange;\n      }\n    });\n    _this.tableColumnsComputed = memoize(function (columnWidths) {\n      return function (_a) {\n        var tableColumns = _a.tableColumns;\n        return tableColumnsWithWidths(tableColumns, columnWidths, _this.props.resizingMode);\n      };\n    });\n    _this.tableColumnsDraftComputed = memoize(function (draftColumnWidths) {\n      return function (_a) {\n        var tableColumns = _a.tableColumns;\n        return tableColumnsWithDraftWidths(tableColumns, draftColumnWidths, _this.props.resizingMode);\n      };\n    });\n    _this.changeTableColumnWidth = stateHelper.applyReducer.bind(stateHelper, function (prevState, payload) {\n      var cachedWidths = __assign({}, _this.cachedWidths);\n      var _a = _this.props,\n        minColumnWidth = _a.minColumnWidth,\n        maxColumnWidth = _a.maxColumnWidth,\n        columnExtensions = _a.columnExtensions,\n        resizingMode = _a.resizingMode;\n      return changeTableColumnWidth(prevState, __assign(__assign({}, payload), {\n        cachedWidths: cachedWidths,\n        resizingMode: resizingMode,\n        minColumnWidth: minColumnWidth,\n        maxColumnWidth: maxColumnWidth,\n        columnExtensions: columnExtensions\n      }));\n    });\n    _this.draftTableColumnWidth = stateHelper.applyReducer.bind(stateHelper, function (prevState, payload) {\n      _this.storeCache(payload);\n      var cachedWidths = _this.cachedWidths;\n      var _a = _this.props,\n        minColumnWidth = _a.minColumnWidth,\n        maxColumnWidth = _a.maxColumnWidth,\n        columnExtensions = _a.columnExtensions,\n        resizingMode = _a.resizingMode;\n      return draftTableColumnWidth(prevState, __assign(__assign({}, payload), {\n        cachedWidths: cachedWidths,\n        resizingMode: resizingMode,\n        minColumnWidth: minColumnWidth,\n        maxColumnWidth: maxColumnWidth,\n        columnExtensions: columnExtensions\n      }));\n    });\n    _this.cancelTableColumnWidthDraft = stateHelper.applyReducer.bind(stateHelper, cancelTableColumnWidthDraft);\n    _this.storeCache = function (_a) {\n      var columnName = _a.columnName,\n        nextColumnName = _a.nextColumnName;\n      if (Object.keys(_this.cachedWidths).length === 0) {\n        _this.cachedWidths[columnName] = _this.widthGetters[columnName]();\n        if (nextColumnName) {\n          _this.cachedWidths[nextColumnName] = _this.widthGetters[nextColumnName]();\n        }\n      }\n    };\n    _this.clearCache = function () {\n      Object.keys(_this.cachedWidths).forEach(function (columnName) {\n        return delete _this.cachedWidths[columnName];\n      });\n    };\n    _this.storeWidthGetters = memoize(function (_a) {\n      var tableColumn = _a.tableColumn,\n        getter = _a.getter,\n        tableColumns = _a.tableColumns;\n      if (tableColumn.type === TABLE_DATA_TYPE) {\n        _this.widthGetters[tableColumn.column.name] = getter;\n      }\n      Object.keys(_this.widthGetters).forEach(function (columnName) {\n        var columnIndex = tableColumns.findIndex(function (_a) {\n          var type = _a.type,\n            column = _a.column;\n          return type === TABLE_DATA_TYPE && column.name === columnName;\n        });\n        if (columnIndex === -1) {\n          delete _this.widthGetters[columnName];\n        }\n      });\n    });\n    return _this;\n  }\n  TableColumnResizingBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.columnWidths,\n      columnWidths = _a === void 0 ? prevState.columnWidths : _a;\n    return {\n      columnWidths: columnWidths\n    };\n  };\n  TableColumnResizingBase.prototype.componentDidUpdate = function (_, prevState) {\n    var currentWidths = this.state.columnWidths;\n    var prevWidths = prevState.columnWidths;\n    if (currentWidths !== prevWidths) {\n      this.clearCache();\n    }\n  };\n  TableColumnResizingBase.prototype.render = function () {\n    var _a = this.state,\n      columnWidths = _a.columnWidths,\n      draftColumnWidths = _a.draftColumnWidths;\n    var resizingMode = this.props.resizingMode;\n    var tableColumnsComputed = this.tableColumnsComputed(columnWidths);\n    var tableColumnsDraftComputed = this.tableColumnsDraftComputed(draftColumnWidths);\n    return createElement(Plugin, {\n      name: \"TableColumnResizing\",\n      dependencies: pluginDependencies$e\n    }, createElement(Getter, {\n      name: \"tableColumnResizingEnabled\",\n      value: true\n    }), createElement(Getter, {\n      name: \"tableColumns\",\n      computed: tableColumnsComputed\n    }), createElement(Getter, {\n      name: \"tableColumns\",\n      computed: tableColumnsDraftComputed\n    }), createElement(Getter, {\n      name: \"columnResizingMode\",\n      value: resizingMode\n    }), createElement(Action, {\n      name: \"changeTableColumnWidth\",\n      action: this.changeTableColumnWidth\n    }), createElement(Action, {\n      name: \"draftTableColumnWidth\",\n      action: this.draftTableColumnWidth\n    }), createElement(Action, {\n      name: \"cancelTableColumnWidthDraft\",\n      action: this.cancelTableColumnWidthDraft\n    }), createElement(Action, {\n      name: \"storeWidthGetters\",\n      action: this.storeWidthGetters\n    }));\n  };\n  TableColumnResizingBase.defaultProps = {\n    defaultColumnWidths: [],\n    resizingMode: 'widget'\n  };\n  return TableColumnResizingBase;\n}(PureComponent);\n/* tslint:disable: max-line-length */\n/** A plugin that manages table column widths. */\nvar TableColumnResizing = TableColumnResizingBase;\n/* tslint:enable: max-line-length */\n\nvar pluginDependencies$f = [{\n  name: 'PagingState'\n}];\nvar defaultMessages$4 = {\n  showAll: 'All',\n  info: function (_a) {\n    var from = _a.from,\n      to = _a.to,\n      count = _a.count;\n    return \"\" + from + (from < to ? \"-\" + to : '') + \" of \" + count;\n  }\n};\nvar PagingPanelBase = /*#__PURE__*/function (_super) {\n  __extends(PagingPanelBase, _super);\n  function PagingPanelBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  PagingPanelBase.prototype.render = function () {\n    var _a = this.props,\n      Pager = _a.containerComponent,\n      pageSizes = _a.pageSizes,\n      messages = _a.messages;\n    var getMessage = getMessagesFormatter(__assign(__assign({}, defaultMessages$4), messages));\n    return createElement(Plugin, {\n      name: \"PagingPanel\",\n      dependencies: pluginDependencies$f\n    }, createElement(Template, {\n      name: \"footer\"\n    }, function (params) {\n      return createElement(Fragment, null, createElement(TemplatePlaceholder, null), createElement(TemplateConnector, null, function (_a, _b) {\n        var currentPage = _a.currentPage,\n          pageSize = _a.pageSize,\n          totalCount = _a.totalCount;\n        var setCurrentPage = _b.setCurrentPage,\n          setPageSize = _b.setPageSize;\n        return createElement(Pager, __assign({}, params, {\n          currentPage: currentPage,\n          pageSize: pageSize,\n          totalCount: totalCount,\n          totalPages: pageCount(totalCount, pageSize),\n          pageSizes: pageSizes,\n          getMessage: getMessage,\n          onCurrentPageChange: setCurrentPage,\n          onPageSizeChange: setPageSize\n        }));\n      }));\n    }));\n  };\n  PagingPanelBase.defaultProps = {\n    pageSizes: [],\n    messages: {}\n  };\n  PagingPanelBase.components = {\n    containerComponent: 'Container'\n  };\n  return PagingPanelBase;\n}(PureComponent);\n/** A plugin that renders the paging panel used for navigation through data pages. */\nvar PagingPanel = PagingPanelBase;\nvar defaultProps = {\n  draggingEnabled: false,\n  onDragStart: function () {},\n  onDragEnd: function () {}\n};\n// tslint:disable-next-line: max-line-length\nvar ItemLayout = /*#__PURE__*/function (_super) {\n  __extends(ItemLayout, _super);\n  function ItemLayout(props) {\n    var _this = _super.call(this, props) || this;\n    _this.state = {\n      dragging: false\n    };\n    return _this;\n  }\n  ItemLayout.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      item = _a.item,\n      Item = _a.itemComponent,\n      itemRef = _a.itemRef,\n      draggingEnabled = _a.draggingEnabled,\n      onDragStart = _a.onDragStart,\n      onDragEnd = _a.onDragEnd;\n    var dragging = this.state.dragging;\n    var itemElement = createElement(Item, {\n      item: __assign(__assign({}, item), {\n        draft: dragging || item.draft\n      })\n    });\n    return draggingEnabled ? createElement(DragSource, {\n      payload: [{\n        type: 'column',\n        columnName: item.column.name\n      }],\n      onStart: function () {\n        _this.setState({\n          dragging: true\n        });\n        onDragStart();\n      },\n      onEnd: function () {\n        _this.setState({\n          dragging: false\n        });\n        onDragEnd();\n      },\n      ref: itemRef\n    }, itemElement) : itemElement;\n  };\n  ItemLayout.defaultProps = defaultProps;\n  return ItemLayout;\n}(PureComponent);\nvar defaultProps$1 = {\n  onGroup: function () {},\n  draggingEnabled: false,\n  isColumnGroupingEnabled: function () {\n    return false;\n  },\n  onGroupDraft: function () {},\n  onGroupDraftCancel: function () {}\n};\n// tslint:disable-next-line: max-line-length\nvar GroupPanelLayoutBase = /*#__PURE__*/function (_super) {\n  __extends(GroupPanelLayoutBase, _super);\n  function GroupPanelLayoutBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this.itemRefs = [];\n    _this.draggingColumnName = null;\n    _this.state = {\n      sourceColumnName: null,\n      targetItemIndex: -1\n    };\n    _this.handleDragEvent = function (eventHandler, _a) {\n      var payload = _a.payload,\n        restArgs = __rest(_a, [\"payload\"]);\n      var isColumnGroupingEnabled = _this.props.isColumnGroupingEnabled;\n      var columnName = payload[0].columnName;\n      if (isColumnGroupingEnabled(columnName)) {\n        eventHandler(__assign({\n          payload: payload\n        }, restArgs));\n      }\n    };\n    _this.onEnter = function (_a) {\n      var payload = _a.payload;\n      flushSync(function () {\n        return _this.setState({\n          sourceColumnName: payload[0].columnName\n        });\n      });\n    };\n    _this.onOver = function (_a) {\n      var clientOffset = _a.clientOffset;\n      var _b = _this.props,\n        onGroupDraft = _b.onGroupDraft,\n        items = _b.items;\n      var _c = _this.state,\n        sourceColumnName = _c.sourceColumnName,\n        prevTargetItemIndex = _c.targetItemIndex;\n      // eslint-disable-next-line react/no-find-dom-node\n      var itemGeometries = _this.itemRefs.map(function (ref) {\n        return ref.getBoundingClientRect();\n      });\n      var sourceItemIndex = items.findIndex(function (_a) {\n        var column = _a.column;\n        return column.name === sourceColumnName;\n      });\n      var targetItemIndex = getGroupCellTargetIndex(itemGeometries, sourceItemIndex, clientOffset);\n      if (prevTargetItemIndex === targetItemIndex) return;\n      onGroupDraft({\n        columnName: sourceColumnName,\n        groupIndex: targetItemIndex\n      });\n      _this.setState({\n        targetItemIndex: targetItemIndex\n      });\n    };\n    _this.onLeave = function () {\n      var onGroupDraft = _this.props.onGroupDraft;\n      var sourceColumnName = _this.state.sourceColumnName;\n      if (!_this.draggingColumnName) {\n        _this.resetState();\n        return;\n      }\n      onGroupDraft({\n        columnName: sourceColumnName,\n        groupIndex: -1\n      });\n      _this.setState({\n        targetItemIndex: -1\n      });\n    };\n    _this.onDrop = function () {\n      var onGroup = _this.props.onGroup;\n      var _a = _this.state,\n        sourceColumnName = _a.sourceColumnName,\n        targetItemIndex = _a.targetItemIndex;\n      _this.resetState();\n      onGroup({\n        columnName: sourceColumnName,\n        groupIndex: targetItemIndex\n      });\n    };\n    _this.onDragStart = function (columnName) {\n      _this.draggingColumnName = columnName;\n    };\n    _this.onDragEnd = function () {\n      _this.draggingColumnName = null;\n      var _a = _this.state,\n        sourceColumnName = _a.sourceColumnName,\n        targetItemIndex = _a.targetItemIndex;\n      var onGroup = _this.props.onGroup;\n      if (sourceColumnName && targetItemIndex === -1) {\n        onGroup({\n          columnName: sourceColumnName\n        });\n      }\n      _this.resetState();\n    };\n    return _this;\n  }\n  GroupPanelLayoutBase.prototype.resetState = function () {\n    var onGroupDraftCancel = this.props.onGroupDraftCancel;\n    onGroupDraftCancel();\n    this.setState({\n      sourceColumnName: null,\n      targetItemIndex: -1\n    });\n  };\n  GroupPanelLayoutBase.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      items = _a.items,\n      EmptyMessage = _a.emptyMessageComponent,\n      Container = _a.containerComponent,\n      Item = _a.itemComponent,\n      draggingEnabled = _a.draggingEnabled,\n      isColumnGroupingEnabled = _a.isColumnGroupingEnabled;\n    this.itemRefs = [];\n    var groupPanel = items.length ? createElement(Container, null, items.map(function (item) {\n      var columnName = item.column.name;\n      return createElement(ItemLayout, {\n        key: columnName,\n        item: item,\n        itemComponent: Item,\n        itemRef: function (element) {\n          return element && _this.itemRefs.push(element);\n        },\n        draggingEnabled: draggingEnabled && isColumnGroupingEnabled(columnName),\n        onDragStart: function () {\n          return _this.onDragStart(columnName);\n        },\n        onDragEnd: _this.onDragEnd\n      });\n    })) : createElement(EmptyMessage, null);\n    return draggingEnabled ? createElement(DropTarget, {\n      onEnter: function (args) {\n        return _this.handleDragEvent(_this.onEnter, args);\n      },\n      onOver: function (args) {\n        return _this.handleDragEvent(_this.onOver, args);\n      },\n      onLeave: function (args) {\n        return _this.handleDragEvent(_this.onLeave, args);\n      },\n      onDrop: function (args) {\n        return _this.handleDragEvent(_this.onDrop, args);\n      }\n    }, groupPanel) : groupPanel;\n  };\n  GroupPanelLayoutBase.defaultProps = defaultProps$1;\n  return GroupPanelLayoutBase;\n}(PureComponent);\n/** @internal */\nvar GroupPanelLayout = GroupPanelLayoutBase;\nvar defaultMessages$5 = {\n  groupByColumn: 'Drag a column header here to group by that column'\n};\nvar defaultProps$2 = {\n  showSortingControls: false,\n  showGroupingControls: false,\n  messages: {}\n};\nvar GroupingPanelRaw = /*#__PURE__*/function (_super) {\n  __extends(GroupingPanelRaw, _super);\n  function GroupingPanelRaw() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  GroupingPanelRaw.prototype.render = function () {\n    var _a = this.props,\n      LayoutComponent = _a.layoutComponent,\n      Container = _a.containerComponent,\n      Item = _a.itemComponent,\n      EmptyMessage = _a.emptyMessageComponent,\n      showSortingControls = _a.showSortingControls,\n      showGroupingControls = _a.showGroupingControls,\n      messages = _a.messages;\n    var getMessage = getMessagesFormatter(__assign(__assign({}, defaultMessages$5), messages));\n    var EmptyMessagePlaceholder = function (_a) {\n      var forwardedRef = _a.forwardedRef;\n      return createElement(EmptyMessage, {\n        getMessage: getMessage,\n        forwardedRef: forwardedRef\n      });\n    };\n    var ItemPlaceholder = function (_a) {\n      var item = _a.item,\n        forwardedRef = _a.forwardedRef;\n      var columnName = item.column.name;\n      return createElement(TemplateConnector, null, function (_a, _b) {\n        var sorting = _a.sorting,\n          isColumnSortingEnabled = _a.isColumnSortingEnabled,\n          isColumnGroupingEnabled = _a.isColumnGroupingEnabled;\n        var changeColumnGrouping = _b.changeColumnGrouping,\n          changeColumnSorting = _b.changeColumnSorting;\n        var sortingEnabled = isColumnSortingEnabled && isColumnSortingEnabled(columnName);\n        var groupingEnabled = isColumnGroupingEnabled && isColumnGroupingEnabled(columnName);\n        return createElement(Item, {\n          forwardedRef: forwardedRef,\n          item: item,\n          sortingEnabled: sortingEnabled,\n          groupingEnabled: groupingEnabled,\n          showSortingControls: showSortingControls,\n          sortingDirection: showSortingControls ? getColumnSortingDirection(sorting, columnName) : undefined,\n          showGroupingControls: showGroupingControls,\n          onGroup: function () {\n            return changeColumnGrouping({\n              columnName: columnName\n            });\n          },\n          onSort: function (_a) {\n            var direction = _a.direction,\n              keepOther = _a.keepOther;\n            return changeColumnSorting({\n              columnName: columnName,\n              direction: direction,\n              keepOther: keepOther\n            });\n          }\n        });\n      });\n    };\n    return createElement(Plugin, {\n      name: \"GroupingPanel\",\n      dependencies: [{\n        name: 'GroupingState'\n      }, {\n        name: 'Toolbar'\n      }, {\n        name: 'SortingState',\n        optional: !showSortingControls\n      }]\n    }, createElement(Template, {\n      name: \"toolbarContent\"\n    }, createElement(TemplateConnector, null, function (_a, _b) {\n      var columns = _a.columns,\n        grouping = _a.grouping,\n        draftGrouping = _a.draftGrouping,\n        draggingEnabled = _a.draggingEnabled,\n        isColumnGroupingEnabled = _a.isColumnGroupingEnabled,\n        isDataRemote = _a.isDataRemote;\n      var changeColumnGrouping = _b.changeColumnGrouping,\n        draftColumnGrouping = _b.draftColumnGrouping,\n        cancelColumnGroupingDraft = _b.cancelColumnGroupingDraft,\n        scrollToRow = _b.scrollToRow;\n      var onGroup = function (config) {\n        if (isDataRemote) {\n          scrollToRow(TOP_POSITION);\n        }\n        changeColumnGrouping(config);\n      };\n      return createElement(LayoutComponent, {\n        items: groupingPanelItems(columns, grouping, draftGrouping),\n        isColumnGroupingEnabled: isColumnGroupingEnabled,\n        draggingEnabled: draggingEnabled,\n        onGroup: onGroup,\n        onGroupDraft: draftColumnGrouping,\n        onGroupDraftCancel: cancelColumnGroupingDraft,\n        itemComponent: ItemPlaceholder,\n        emptyMessageComponent: EmptyMessagePlaceholder,\n        containerComponent: Container\n      });\n    }), createElement(TemplatePlaceholder, null)));\n  };\n  GroupingPanelRaw.defaultProps = defaultProps$2;\n  GroupingPanelRaw.components = {\n    layoutComponent: 'Layout',\n    containerComponent: 'Container',\n    itemComponent: 'Item',\n    emptyMessageComponent: 'EmptyMessage'\n  };\n  return GroupingPanelRaw;\n}(PureComponent);\n/***\r\n * A plugin that renders the Grouping Panel in the Grid's header. This panel displays grouped\r\n * columns and allows a user to modify grouping options.Optionally, the plugin allows an end-user\r\n * to change grouped columns' sorting order and render sorting indicators.\r\n * */\nvar GroupingPanel = withComponents({\n  Layout: GroupPanelLayout\n})(GroupingPanelRaw);\nvar DataTypeProviderBase = /*#__PURE__*/function (_super) {\n  __extends(DataTypeProviderBase, _super);\n  function DataTypeProviderBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  DataTypeProviderBase.prototype.render = function () {\n    var _a = this.props,\n      columnNames = _a.for,\n      Formatter = _a.formatterComponent,\n      Editor = _a.editorComponent,\n      availableFilterOperations = _a.availableFilterOperations;\n    var getAvailableFilterOperationsComputed = function (_a) {\n      var getAvailableFilterOperations = _a.getAvailableFilterOperations;\n      return getAvailableFilterOperationsGetter(getAvailableFilterOperations, availableFilterOperations, columnNames);\n    };\n    return createElement(Plugin, {\n      name: \"DataTypeProvider\",\n      key: columnNames.join('_')\n    }, createElement(Getter, {\n      name: \"getAvailableFilterOperations\",\n      computed: getAvailableFilterOperationsComputed\n    }), Formatter ? createElement(Template, {\n      name: \"valueFormatter\",\n      predicate: function (_a) {\n        var column = _a.column;\n        return columnNames.includes(column.name);\n      }\n    }, function (params) {\n      return createElement(Formatter, __assign({}, params));\n    }) : null, Editor ? createElement(Template, {\n      name: \"valueEditor\",\n      predicate: function (_a) {\n        var column = _a.column;\n        return columnNames.includes(column.name);\n      }\n    }, function (params) {\n      return createElement(Editor, __assign({}, params));\n    }) : null);\n  };\n  return DataTypeProviderBase;\n}(PureComponent);\n// tslint:disable-next-line: max-line-length\n/** A plugin that allows you to customize formatting options and editors depending on the data type. */\nvar DataTypeProvider = DataTypeProviderBase;\nvar pluginDependencies$g = [{\n  name: 'Table'\n}];\nvar defaultMessages$6 = {\n  noColumns: 'Nothing to show'\n};\nvar columnExtensionValueGetter$4 = function (columnExtensions, defaultValue) {\n  return getColumnExtensionValueGetter(columnExtensions, 'togglingEnabled', defaultValue);\n};\n// tslint:disable-next-line: max-line-length\nvar TableColumnVisibilityBase = /*#__PURE__*/function (_super) {\n  __extends(TableColumnVisibilityBase, _super);\n  function TableColumnVisibilityBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this.state = {\n      hiddenColumnNames: props.hiddenColumnNames || props.defaultHiddenColumnNames\n    };\n    var stateHelper = createStateHelper(_this, {\n      hiddenColumnNames: function () {\n        var onHiddenColumnNamesChange = _this.props.onHiddenColumnNamesChange;\n        return onHiddenColumnNamesChange;\n      }\n    });\n    _this.toggleColumnVisibility = stateHelper.applyFieldReducer.bind(stateHelper, 'hiddenColumnNames', toggleColumn);\n    return _this;\n  }\n  TableColumnVisibilityBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.hiddenColumnNames,\n      hiddenColumnNames = _a === void 0 ? prevState.hiddenColumnNames : _a;\n    return {\n      hiddenColumnNames: hiddenColumnNames\n    };\n  };\n  TableColumnVisibilityBase.prototype.render = function () {\n    var _a = this.props,\n      EmptyMessage = _a.emptyMessageComponent,\n      messages = _a.messages;\n    var getMessage = getMessagesFormatter(__assign(__assign({}, defaultMessages$6), messages));\n    var hiddenColumnNames = this.state.hiddenColumnNames;\n    var _b = this.props,\n      columnExtensions = _b.columnExtensions,\n      columnTogglingEnabled = _b.columnTogglingEnabled;\n    return createElement(Plugin, {\n      name: \"TableColumnVisibility\",\n      dependencies: pluginDependencies$g\n    }, createElement(VisibleTableColumns, {\n      hiddenColumnNames: hiddenColumnNames\n    }), createElement(Getter, {\n      name: \"isColumnTogglingEnabled\",\n      value: columnExtensionValueGetter$4(columnExtensions, columnTogglingEnabled)\n    }), createElement(Action, {\n      name: \"toggleColumnVisibility\",\n      action: this.toggleColumnVisibility\n    }), createElement(Template, {\n      name: \"table\"\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var tableColumns = _a.tableColumns;\n        return tableDataColumnsExist(tableColumns) ? createElement(TemplatePlaceholder, null) : createElement(EmptyMessage, __assign({\n          getMessage: getMessage\n        }, params));\n      });\n    }));\n  };\n  TableColumnVisibilityBase.defaultProps = {\n    defaultHiddenColumnNames: [],\n    messages: {},\n    columnTogglingEnabled: true\n  };\n  TableColumnVisibilityBase.components = {\n    emptyMessageComponent: 'EmptyMessage'\n  };\n  return TableColumnVisibilityBase;\n}(PureComponent);\nTableColumnVisibilityBase.components = {\n  emptyMessageComponent: 'EmptyMessage'\n};\n/* tslint:disable: max-line-length */\n/** A plugin that manages Grid columns' visibility. */\nvar TableColumnVisibility = TableColumnVisibilityBase;\n/* tslint:enable: max-line-length */\n\nvar ToolbarBase = /*#__PURE__*/function (_super) {\n  __extends(ToolbarBase, _super);\n  function ToolbarBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  ToolbarBase.prototype.render = function () {\n    var _a = this.props,\n      Root = _a.rootComponent,\n      FlexibleSpaceComponent = _a.flexibleSpaceComponent;\n    return createElement(Plugin, {\n      name: \"Toolbar\"\n    }, createElement(Template, {\n      name: \"header\"\n    }, function (params) {\n      return createElement(Fragment, null, createElement(Root, __assign({}, params), createElement(TemplatePlaceholder, {\n        name: \"toolbarContent\"\n      })), createElement(TemplatePlaceholder, null));\n    }), createElement(Template, {\n      name: \"toolbarContent\"\n    }, createElement(FlexibleSpaceComponent, null)));\n  };\n  ToolbarBase.components = {\n    rootComponent: 'Root',\n    flexibleSpaceComponent: 'FlexibleSpace'\n  };\n  return ToolbarBase;\n}(PureComponent);\n/** A plugin that renders the Grid toolbar. */\nvar Toolbar = ToolbarBase;\nvar TreeDataStateBase = /*#__PURE__*/function (_super) {\n  __extends(TreeDataStateBase, _super);\n  function TreeDataStateBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this.state = {\n      expandedRowIds: props.expandedRowIds || props.defaultExpandedRowIds\n    };\n    var stateHelper = createStateHelper(_this, {\n      expandedRowIds: function () {\n        var onExpandedRowIdsChange = _this.props.onExpandedRowIdsChange;\n        return onExpandedRowIdsChange;\n      }\n    });\n    _this.toggleRowExpanded = stateHelper.applyFieldReducer.bind(stateHelper, 'expandedRowIds', toggleRowExpanded);\n    return _this;\n  }\n  TreeDataStateBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.expandedRowIds,\n      expandedRowIds = _a === void 0 ? prevState.expandedRowIds : _a;\n    return {\n      expandedRowIds: expandedRowIds\n    };\n  };\n  TreeDataStateBase.prototype.render = function () {\n    var expandedRowIds = this.state.expandedRowIds;\n    return createElement(Plugin, {\n      name: \"TreeDataState\"\n    }, createElement(Getter, {\n      name: \"expandedRowIds\",\n      value: expandedRowIds\n    }), ' ', createElement(Action, {\n      name: \"toggleRowExpanded\",\n      action: this.toggleRowExpanded\n    }));\n  };\n  TreeDataStateBase.defaultProps = {\n    defaultExpandedRowIds: []\n  };\n  return TreeDataStateBase;\n}(PureComponent);\n/** A plugin that manages the expanded state for tree rows. */\nvar TreeDataState = TreeDataStateBase;\nvar pluginDependencies$h = [{\n  name: 'TreeDataState'\n}];\nvar expandedTreeRowsComputed = function (_a) {\n  var rows = _a.rows,\n    getRowId = _a.getRowId,\n    expandedRowIds = _a.expandedRowIds;\n  return expandedTreeRows(rows, getRowId, expandedRowIds);\n};\nvar getRowIdComputed$1 = function (_a) {\n  var getRowId = _a.getRowId,\n    rows = _a.rows;\n  return customTreeRowIdGetter(getRowId, rows);\n};\nvar getRowLevelKeyComputed = function (_a) {\n  var getRowLevelKey = _a.getRowLevelKey,\n    rows = _a.rows;\n  return customTreeRowLevelKeyGetter(getRowLevelKey, rows);\n};\nvar isTreeRowLeafComputed = function (_a) {\n  var rows = _a.rows;\n  return isTreeRowLeafGetter(rows);\n};\nvar getTreeRowLevelComputed = function (_a) {\n  var rows = _a.rows;\n  return getTreeRowLevelGetter(rows);\n};\nvar collapsedTreeRowsGetterComputed = function (_a) {\n  var rows = _a.rows,\n    getCollapsedRows = _a.getCollapsedRows;\n  return collapsedTreeRowsGetter(getCollapsedRows, rows);\n};\nvar unwrappedTreeRowsComputed = function (_a) {\n  var rows = _a.rows;\n  return unwrappedCustomTreeRows(rows);\n};\nvar CustomTreeDataBase = /*#__PURE__*/function (_super) {\n  __extends(CustomTreeDataBase, _super);\n  function CustomTreeDataBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  CustomTreeDataBase.prototype.render = function () {\n    var getChildRows = this.props.getChildRows;\n    var treeRowsComputed = function (_a) {\n      var rows = _a.rows;\n      return customTreeRowsWithMeta(rows, getChildRows);\n    };\n    return createElement(Plugin, {\n      name: \"CustomTreeData\",\n      dependencies: pluginDependencies$h\n    }, createElement(Getter, {\n      name: \"rows\",\n      computed: treeRowsComputed\n    }), createElement(Getter, {\n      name: \"getRowId\",\n      computed: getRowIdComputed$1\n    }), createElement(Getter, {\n      name: \"getRowLevelKey\",\n      computed: getRowLevelKeyComputed\n    }), createElement(Getter, {\n      name: \"isTreeRowLeaf\",\n      computed: isTreeRowLeafComputed\n    }), createElement(Getter, {\n      name: \"getTreeRowLevel\",\n      computed: getTreeRowLevelComputed\n    }), createElement(Getter, {\n      name: \"rows\",\n      computed: expandedTreeRowsComputed\n    }), createElement(Getter, {\n      name: \"getCollapsedRows\",\n      computed: collapsedTreeRowsGetterComputed\n    }), createElement(Getter, {\n      name: \"rows\",\n      computed: unwrappedTreeRowsComputed\n    }));\n  };\n  return CustomTreeDataBase;\n}(PureComponent);\n/***\r\n * A plugin that converts custom formatted tree data to a supported format and performs\r\n * local row expanding/collapsing.\r\n * */\nvar CustomTreeData = CustomTreeDataBase;\nvar TableTreeColumnBase = /*#__PURE__*/function (_super) {\n  __extends(TableTreeColumnBase, _super);\n  function TableTreeColumnBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  TableTreeColumnBase.prototype.render = function () {\n    var _a = this.props,\n      forColumnName = _a.for,\n      showSelectionControls = _a.showSelectionControls,\n      showSelectAll = _a.showSelectAll,\n      Indent = _a.indentComponent,\n      ExpandButton = _a.expandButtonComponent,\n      Checkbox = _a.checkboxComponent,\n      Content = _a.contentComponent,\n      Cell = _a.cellComponent;\n    return createElement(Plugin, {\n      name: \"TableTreeColumn\",\n      dependencies: [{\n        name: 'DataTypeProvider',\n        optional: true\n      }, {\n        name: 'TreeDataState'\n      }, {\n        name: 'SelectionState',\n        optional: !showSelectionControls\n      }, {\n        name: 'IntegratedSelection',\n        optional: !showSelectAll\n      }, {\n        name: 'Table'\n      }, {\n        name: 'TableHeaderRow',\n        optional: true\n      }],\n      key: forColumnName\n    }, createElement(Getter, {\n      name: \"tableTreeColumnName\",\n      value: forColumnName\n    }), createElement(Template, {\n      name: \"tableHeaderCellBefore\",\n      predicate: function (_a) {\n        var column = _a.column;\n        return column.name === forColumnName;\n      }\n    }, createElement(ExpandButton, {\n      visible: false,\n      expanded: false,\n      onToggle: function () {}\n    }), showSelectionControls && showSelectAll && createElement(TemplateConnector, null, function (_a, _b) {\n      var selectAllAvailable = _a.selectAllAvailable,\n        allSelected = _a.allSelected,\n        someSelected = _a.someSelected;\n      var toggleSelectAll = _b.toggleSelectAll;\n      return createElement(Checkbox, {\n        disabled: !selectAllAvailable,\n        checked: allSelected,\n        indeterminate: someSelected,\n        onChange: toggleSelectAll\n      });\n    })), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow,\n          tableColumn = _a.tableColumn;\n        return isTreeTableCell(tableRow, tableColumn, forColumnName);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a, _b) {\n        var getCollapsedRows = _a.getCollapsedRows,\n          expandedRowIds = _a.expandedRowIds,\n          selection = _a.selection,\n          isTreeRowLeaf = _a.isTreeRowLeaf,\n          getTreeRowLevel = _a.getTreeRowLevel,\n          getCellValue = _a.getCellValue;\n        var toggleRowExpanded = _b.toggleRowExpanded,\n          toggleSelection = _b.toggleSelection;\n        var _c = params.tableRow,\n          row = _c.row,\n          rowId = _c.rowId;\n        var columnName = params.tableColumn.column.name;\n        var value = getCellValue(row, columnName);\n        var collapsedRows = getCollapsedRows(row);\n        return createElement(TemplatePlaceholder, {\n          name: \"valueFormatter\",\n          params: {\n            value: value,\n            row: row,\n            column: params.tableColumn.column\n          }\n        }, function (content) {\n          return createElement(Cell, __assign({}, params, {\n            row: row,\n            column: params.tableColumn.column,\n            value: value\n          }), createElement(Indent, {\n            level: getTreeRowLevel(row)\n          }), createElement(ExpandButton, {\n            visible: collapsedRows ? !!collapsedRows.length : !isTreeRowLeaf(row),\n            expanded: expandedRowIds.indexOf(rowId) > -1,\n            onToggle: function () {\n              return toggleRowExpanded({\n                rowId: rowId\n              });\n            }\n          }), showSelectionControls && createElement(Checkbox, {\n            disabled: false,\n            checked: selection.indexOf(rowId) > -1,\n            indeterminate: false,\n            onChange: function () {\n              return toggleSelection({\n                rowIds: [rowId]\n              });\n            }\n          }), createElement(Content, null, content || value));\n        });\n      });\n    }));\n  };\n  TableTreeColumnBase.defaultProps = {\n    showSelectionControls: false,\n    showSelectAll: false\n  };\n  TableTreeColumnBase.components = {\n    cellComponent: 'Cell',\n    contentComponent: 'Content',\n    indentComponent: 'Indent',\n    expandButtonComponent: 'ExpandButton',\n    checkboxComponent: 'Checkbox'\n  };\n  return TableTreeColumnBase;\n}(PureComponent);\n/** A plugin that renders a table column with a toggle button and sorting indicators. */\nvar TableTreeColumn = TableTreeColumnBase;\nvar SearchStateBase = /*#__PURE__*/function (_super) {\n  __extends(SearchStateBase, _super);\n  function SearchStateBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this.state = {\n      value: props.value || props.defaultValue\n    };\n    var stateHelper = createStateHelper(_this, {\n      value: function () {\n        var onValueChange = _this.props.onValueChange;\n        return onValueChange;\n      }\n    });\n    _this.changeValue = stateHelper.applyFieldReducer.bind(stateHelper, 'value', changeSearchValue);\n    return _this;\n  }\n  SearchStateBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.value,\n      value = _a === void 0 ? prevState.value : _a;\n    return {\n      value: value\n    };\n  };\n  SearchStateBase.prototype.render = function () {\n    var value = this.state.value;\n    var filterExpressionComputed = function (_a) {\n      var filterExpression = _a.filterExpression,\n        columns = _a.columns;\n      return searchFilterExpression(value, columns, filterExpression);\n    };\n    return createElement(Plugin, {\n      name: \"SearchState\"\n    }, createElement(Getter, {\n      name: \"filterExpression\",\n      computed: filterExpressionComputed\n    }), createElement(Getter, {\n      name: \"searchValue\",\n      value: value\n    }), createElement(Action, {\n      name: \"changeSearchValue\",\n      action: this.changeValue\n    }));\n  };\n  SearchStateBase.defaultProps = {\n    defaultValue: ''\n  };\n  return SearchStateBase;\n}(PureComponent);\n/** A plugin that manages the search state. */\nvar SearchState = SearchStateBase;\nvar pluginDependencies$i = [{\n  name: 'Toolbar'\n}, {\n  name: 'SearchState'\n}];\nvar defaultMessages$7 = {\n  searchPlaceholder: 'Search...'\n};\nvar SearchPanelBase = /*#__PURE__*/function (_super) {\n  __extends(SearchPanelBase, _super);\n  function SearchPanelBase() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.ref = createRef();\n    return _this;\n  }\n  SearchPanelBase.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      Input = _a.inputComponent,\n      messages = _a.messages;\n    var getMessage = getMessagesFormatter(__assign(__assign({}, defaultMessages$7), messages));\n    return createElement(Plugin, {\n      name: \"SearchPanel\",\n      dependencies: pluginDependencies$i\n    }, createElement(Template, {\n      name: \"toolbarContent\"\n    }, createElement(TemplatePlaceholder, null), createElement(TemplateConnector, null, function (_a, _b) {\n      var searchValue = _a.searchValue,\n        isDataRemote = _a.isDataRemote;\n      var changeSearchValue = _b.changeSearchValue,\n        scrollToRow = _b.scrollToRow,\n        setSearchPanelRef = _b.setSearchPanelRef;\n      var onValueChange = function (value) {\n        if (isDataRemote) {\n          scrollToRow(TOP_POSITION);\n        }\n        changeSearchValue(value);\n      };\n      if (setSearchPanelRef) {\n        setSearchPanelRef(_this.ref);\n      }\n      return createElement(Input, {\n        value: searchValue,\n        inputRef: _this.ref,\n        onValueChange: onValueChange,\n        getMessage: getMessage\n      });\n    })));\n  };\n  SearchPanelBase.defaultProps = {\n    messages: {}\n  };\n  SearchPanelBase.components = {\n    inputComponent: 'Input'\n  };\n  return SearchPanelBase;\n}(PureComponent);\n/** A plugin that renders the Search Panel. */\nvar SearchPanel = SearchPanelBase;\nvar tableHeaderRowsComputed$2 = function (_a) {\n  var tableHeaderRows = _a.tableHeaderRows;\n  return tableHeaderRowsWithFixed(tableHeaderRows);\n};\nvar tableHeaderColumnChainsComputed = function (_a) {\n  var tableColumns = _a.tableColumns,\n    tableHeaderRows = _a.tableHeaderRows,\n    tableHeaderColumnChains = _a.tableHeaderColumnChains;\n  return tableHeaderColumnChainsWithFixed(tableHeaderColumnChains, tableHeaderRows, tableColumns);\n};\nvar CellPlaceholder$2 = function (props) {\n  return createElement(TemplatePlaceholder, {\n    params: props\n  });\n};\nvar pluginDependencies$j = [{\n  name: 'Table'\n}, {\n  name: 'TableBandHeader',\n  optional: true\n}, {\n  name: 'TableColumnReordering',\n  optional: true\n}, {\n  name: 'TableEditColumn',\n  optional: true\n}, {\n  name: 'TableEditRow',\n  optional: true\n}, {\n  name: 'TableFilterRow',\n  optional: true\n}, {\n  name: 'TableGroupRow',\n  optional: true\n}, {\n  name: 'TableHeaderRow',\n  optional: true\n}, {\n  name: 'TableRowDetail',\n  optional: true\n}, {\n  name: 'TableSelection',\n  optional: true\n}, {\n  name: 'TableSummaryRow',\n  optional: true\n}, {\n  name: 'TableTreeColumn',\n  optional: true\n}];\n// tslint:disable-next-line: max-line-length\nvar TableFixedColumnsBase = /*#__PURE__*/function (_super) {\n  __extends(TableFixedColumnsBase, _super);\n  function TableFixedColumnsBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this.state = {\n      tableColumnDimensions: {}\n    };\n    return _this;\n  }\n  TableFixedColumnsBase.prototype.handleListenerSizeChange = function (key, width) {\n    var tableColumnDimensions = this.state.tableColumnDimensions;\n    if (tableColumnDimensions[key] !== width) {\n      this.setState(function (state) {\n        var _a;\n        return {\n          tableColumnDimensions: __assign(__assign({}, state.tableColumnDimensions), (_a = {}, _a[key] = width, _a))\n        };\n      });\n    }\n  };\n  TableFixedColumnsBase.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      Cell = _a.cellComponent,\n      ListenerRow = _a.listenerRowComponent,\n      ListenerCell = _a.listenerCellComponent;\n    var leftColumns = this.props.leftColumns;\n    var rightColumns = this.props.rightColumns;\n    var tableColumnsComputed = function (_a) {\n      var tableColumns = _a.tableColumns;\n      return tableColumnsWithFixed(tableColumns, leftColumns, rightColumns);\n    };\n    return createElement(Plugin, {\n      name: \"TableFixedColumns\",\n      dependencies: pluginDependencies$j\n    }, createElement(Getter, {\n      name: \"tableHeaderRows\",\n      computed: tableHeaderRowsComputed$2\n    }), createElement(Getter, {\n      name: \"tableColumns\",\n      computed: tableColumnsComputed\n    }), createElement(Getter, {\n      name: \"tableHeaderColumnChains\",\n      computed: tableHeaderColumnChainsComputed\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableColumn = _a.tableColumn;\n        return !!tableColumn.fixed;\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var tableColumns = _a.tableColumns,\n          tableHeaderColumnChains = _a.tableHeaderColumnChains,\n          selection = _a.selection,\n          focused = _a.focused,\n          highlightSelectedRow = _a.highlightSelectedRow;\n        var selected = isRowHighlighted(highlightSelectedRow, selection, params.tableRow, focused);\n        var tableColumnDimensions = _this.state.tableColumnDimensions;\n        var fixedColumnProps = calculateFixedColumnProps(params, {\n          leftColumns: leftColumns,\n          rightColumns: rightColumns\n        }, tableColumns, tableColumnDimensions, tableHeaderColumnChains);\n        return createElement(Cell, __assign({}, params, fixedColumnProps, {\n          component: CellPlaceholder$2,\n          selected: selected\n        }));\n      });\n    }), createElement(Template, {\n      name: \"tableRow\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return !!isFixedTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(ListenerRow, __assign({}, params));\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return !!isFixedTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(ListenerCell, __assign({}, params, {\n        listen: !!params.tableColumn.fixed,\n        onSizeChange: function (_a) {\n          var width = _a.width;\n          return _this.handleListenerSizeChange(params.tableColumn.key, width);\n        }\n      }));\n    }));\n  };\n  TableFixedColumnsBase.components = {\n    cellComponent: 'Cell',\n    listenerRowComponent: 'ListenerRow',\n    listenerCellComponent: 'ListenerCell'\n  };\n  TableFixedColumnsBase.defaultProps = {\n    leftColumns: [],\n    rightColumns: []\n  };\n  return TableFixedColumnsBase;\n}(PureComponent);\n/** A plugin that enables you to fix columns to the left and right sides of the grid. */\nvar TableFixedColumns = TableFixedColumnsBase;\nvar groupSummaryItemsComputed = function (_a) {\n  var groupSummaryItems = _a.groupSummaryItems;\n  return prepareGroupSummaryItems(groupSummaryItems);\n};\nvar SummaryStateBase = /*#__PURE__*/function (_super) {\n  __extends(SummaryStateBase, _super);\n  function SummaryStateBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  SummaryStateBase.prototype.render = function () {\n    var _a = this.props,\n      totalItems = _a.totalItems,\n      groupItems = _a.groupItems,\n      treeItems = _a.treeItems;\n    return createElement(Plugin, {\n      name: \"SummaryState\"\n    }, createElement(Getter, {\n      name: \"totalSummaryItems\",\n      value: totalItems\n    }), createElement(Getter, {\n      name: \"groupSummaryItems\",\n      value: groupItems\n    }), createElement(Getter, {\n      name: \"groupSummaryItems\",\n      computed: groupSummaryItemsComputed\n    }), createElement(Getter, {\n      name: \"treeSummaryItems\",\n      value: treeItems\n    }));\n  };\n  SummaryStateBase.defaultProps = {\n    totalItems: [],\n    groupItems: [],\n    treeItems: []\n  };\n  return SummaryStateBase;\n}(PureComponent);\n/** A plugin that provides items for total, group, and tree summaries. */\nvar SummaryState = SummaryStateBase;\nvar pluginDependencies$k = [{\n  name: 'SummaryState'\n}, {\n  name: 'IntegratedGrouping',\n  optional: true\n}];\nvar IntegratedSummaryBase = /*#__PURE__*/function (_super) {\n  __extends(IntegratedSummaryBase, _super);\n  function IntegratedSummaryBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  IntegratedSummaryBase.prototype.render = function () {\n    var calculator = this.props.calculator;\n    var totalSummaryValuesComputed = function (_a) {\n      var rows = _a.rows,\n        totalSummaryItems = _a.totalSummaryItems,\n        getCellValue = _a.getCellValue,\n        getRowLevelKey = _a.getRowLevelKey,\n        isGroupRow = _a.isGroupRow,\n        getCollapsedRows = _a.getCollapsedRows;\n      return totalSummaryValues(rows, totalSummaryItems, getCellValue, getRowLevelKey, isGroupRow, getCollapsedRows, calculator);\n    };\n    var groupSummaryValuesComputed = function (_a) {\n      var rows = _a.rows,\n        groupSummaryItems = _a.groupSummaryItems,\n        getCellValue = _a.getCellValue,\n        getRowLevelKey = _a.getRowLevelKey,\n        isGroupRow = _a.isGroupRow,\n        getCollapsedRows = _a.getCollapsedRows;\n      return groupSummaryValues(rows, groupSummaryItems, getCellValue, getRowLevelKey, isGroupRow, getCollapsedRows, calculator);\n    };\n    var treeSummaryValuesComputed = function (_a) {\n      var rows = _a.rows,\n        treeSummaryItems = _a.treeSummaryItems,\n        getCellValue = _a.getCellValue,\n        getRowLevelKey = _a.getRowLevelKey,\n        isGroupRow = _a.isGroupRow,\n        getRowId = _a.getRowId;\n      return treeSummaryValues(rows, treeSummaryItems, getCellValue, getRowLevelKey, isGroupRow, getRowId, calculator);\n    };\n    return createElement(Plugin, {\n      name: \"IntegratedSummary\",\n      dependencies: pluginDependencies$k\n    }, createElement(Getter, {\n      name: \"totalSummaryValues\",\n      computed: totalSummaryValuesComputed\n    }), createElement(Getter, {\n      name: \"groupSummaryValues\",\n      computed: groupSummaryValuesComputed\n    }), createElement(Getter, {\n      name: \"treeSummaryValues\",\n      computed: treeSummaryValuesComputed\n    }));\n  };\n  IntegratedSummaryBase.defaultCalculator = defaultSummaryCalculator;\n  return IntegratedSummaryBase;\n}(PureComponent);\n/** A plugin that performs a built-in data summary calculation. */\nvar IntegratedSummary = IntegratedSummaryBase;\nvar pluginDependencies$l = [{\n  name: 'SummaryState'\n}];\nvar CustomSummaryBase = /*#__PURE__*/function (_super) {\n  __extends(CustomSummaryBase, _super);\n  function CustomSummaryBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  CustomSummaryBase.prototype.render = function () {\n    var _a = this.props,\n      totalValues = _a.totalValues,\n      groupValues = _a.groupValues,\n      treeValues = _a.treeValues;\n    return createElement(Plugin, {\n      name: \"CustomSummary\",\n      dependencies: pluginDependencies$l\n    }, createElement(Getter, {\n      name: \"totalSummaryValues\",\n      value: totalValues\n    }), createElement(Getter, {\n      name: \"groupSummaryValues\",\n      value: groupValues\n    }), createElement(Getter, {\n      name: \"treeSummaryValues\",\n      value: treeValues\n    }));\n  };\n  return CustomSummaryBase;\n}(PureComponent);\n/** A plugin that allows you to calculate a custom summary. */\nvar CustomSummary = CustomSummaryBase;\nvar dependencies$1 = [{\n  name: 'DataTypeProvider',\n  optional: true\n}, {\n  name: 'SummaryState'\n}, {\n  name: 'CustomSummary',\n  optional: true\n}, {\n  name: 'IntegratedSummary',\n  optional: true\n}, {\n  name: 'Table'\n}, {\n  name: 'TableTreeColumn',\n  optional: true\n}];\nvar tableBodyRowsComputed$2 = function (_a) {\n  var tableBodyRows = _a.tableBodyRows,\n    getRowLevelKey = _a.getRowLevelKey,\n    isGroupRow = _a.isGroupRow,\n    getRowId = _a.getRowId,\n    groupSummaryItems = _a.groupSummaryItems,\n    treeSummaryItems = _a.treeSummaryItems;\n  return tableRowsWithSummaries(tableBodyRows, groupSummaryItems, treeSummaryItems, getRowLevelKey, isGroupRow, getRowId);\n};\nvar tableFooterRowsComputed = function (_a) {\n  var tableFooterRows = _a.tableFooterRows,\n    totalSummaryItems = _a.totalSummaryItems;\n  return totalSummaryItems.length ? tableRowsWithTotalSummaries(tableFooterRows) : tableFooterRows;\n};\nvar TableSummaryRowBase = /*#__PURE__*/function (_super) {\n  __extends(TableSummaryRowBase, _super);\n  function TableSummaryRowBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  TableSummaryRowBase.prototype.renderContent = function (column, columnSummaries) {\n    var _a = this.props,\n      formatlessSummaryTypes = _a.formatlessSummaryTypes,\n      Item = _a.itemComponent,\n      messages = _a.messages;\n    return createElement(TableSummaryContent, {\n      column: column,\n      columnSummaries: columnSummaries,\n      formatlessSummaryTypes: formatlessSummaryTypes,\n      itemComponent: Item,\n      messages: messages\n    });\n  };\n  TableSummaryRowBase.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      TotalRow = _a.totalRowComponent,\n      GroupRow = _a.groupRowComponent,\n      TreeRow = _a.treeRowComponent,\n      TotalCell = _a.totalCellComponent,\n      GroupCell = _a.groupCellComponent,\n      TreeCell = _a.treeCellComponent,\n      TreeColumnCell = _a.treeColumnCellComponent,\n      TreeColumnContent = _a.treeColumnContentComponent,\n      TreeColumnIndent = _a.treeColumnIndentComponent;\n    return createElement(Plugin, {\n      name: \"TableSummaryRow\",\n      dependencies: dependencies$1\n    }, createElement(Getter, {\n      name: \"tableBodyRows\",\n      computed: tableBodyRowsComputed$2\n    }), createElement(Getter, {\n      name: \"tableFooterRows\",\n      computed: tableFooterRowsComputed\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow,\n          tableColumn = _a.tableColumn;\n        return isTotalSummaryTableCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var totalSummaryItems = _a.totalSummaryItems,\n          totalSummaryValues = _a.totalSummaryValues;\n        var columnSummaries = getColumnSummaries(totalSummaryItems, params.tableColumn.column.name, totalSummaryValues);\n        return createElement(TotalCell, __assign({}, params, {\n          column: params.tableColumn.column\n        }), _this.renderContent(params.tableColumn.column, columnSummaries));\n      });\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow,\n          tableColumn = _a.tableColumn;\n        return isGroupSummaryTableCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var groupSummaryItems = _a.groupSummaryItems,\n          groupSummaryValues = _a.groupSummaryValues;\n        var columnSummaries = getColumnSummaries(groupSummaryItems, params.tableColumn.column.name, groupSummaryValues[params.tableRow.row.compoundKey], function (summaryItem) {\n          return isFooterSummary(summaryItem);\n        });\n        return createElement(GroupCell, __assign({}, params, {\n          column: params.tableColumn.column\n        }), _this.renderContent(params.tableColumn.column, columnSummaries));\n      });\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow,\n          tableColumn = _a.tableColumn;\n        return isTreeSummaryTableCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var treeSummaryItems = _a.treeSummaryItems,\n          treeSummaryValues = _a.treeSummaryValues,\n          tableTreeColumnName = _a.tableTreeColumnName,\n          getRowId = _a.getRowId,\n          getTreeRowLevel = _a.getTreeRowLevel;\n        var columnSummaries = getColumnSummaries(treeSummaryItems, params.tableColumn.column.name, treeSummaryValues[getRowId(params.tableRow.row)]);\n        if (tableTreeColumnName === params.tableColumn.column.name) {\n          return createElement(TreeColumnCell, __assign({}, params, {\n            column: params.tableColumn.column\n          }), createElement(TreeColumnIndent, {\n            level: getTreeRowLevel(params.tableRow.row)\n          }), createElement(TreeColumnContent, null, _this.renderContent(params.tableColumn.column, columnSummaries)));\n        }\n        return createElement(TreeCell, __assign({}, params, {\n          column: params.tableColumn.column\n        }), _this.renderContent(params.tableColumn.column, columnSummaries));\n      });\n    }), createElement(Template, {\n      name: \"tableRow\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return !!isTotalSummaryTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(TotalRow, __assign({}, params));\n    }), createElement(Template, {\n      name: \"tableRow\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return !!isGroupSummaryTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(GroupRow, __assign({}, params));\n    }), createElement(Template, {\n      name: \"tableRow\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return !!isTreeSummaryTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(TreeRow, __assign({}, params));\n    }));\n  };\n  TableSummaryRowBase.TREE_ROW_TYPE = TABLE_TREE_SUMMARY_TYPE;\n  TableSummaryRowBase.GROUP_ROW_TYPE = TABLE_GROUP_SUMMARY_TYPE;\n  TableSummaryRowBase.TOTAL_ROW_TYPE = TABLE_TOTAL_SUMMARY_TYPE;\n  TableSummaryRowBase.defaultProps = {\n    formatlessSummaryTypes: [],\n    messages: {}\n  };\n  TableSummaryRowBase.components = {\n    totalRowComponent: 'TotalRow',\n    groupRowComponent: 'GroupRow',\n    treeRowComponent: 'TreeRow',\n    totalCellComponent: 'TotalCell',\n    groupCellComponent: 'GroupCell',\n    treeCellComponent: 'TreeCell',\n    treeColumnCellComponent: 'TableTreeCell',\n    treeColumnContentComponent: 'TableTreeContent',\n    treeColumnIndentComponent: 'TableTreeIndent',\n    itemComponent: 'Item'\n  };\n  return TableSummaryRowBase;\n}(PureComponent);\n/** A plugin that renders table rows that display a total, group, and tree summary. */\nvar TableSummaryRow = TableSummaryRowBase;\nvar virtualRowsComputed = function (_a) {\n  var skip = _a.skip,\n    rows = _a.rows,\n    virtualRowsCache = _a.virtualRowsCache;\n  return virtualRowsWithCache(skip, rows, virtualRowsCache);\n};\nvar rowsComputed = function (_a) {\n  var virtualRows = _a.virtualRows,\n    availableRowCount = _a.availableRowCount;\n  return plainRows(virtualRows, availableRowCount);\n};\nvar loadedRowsStartComputed = function (_a) {\n  var virtualRows = _a.virtualRows;\n  return loadedRowsStart(virtualRows);\n};\n// tslint:disable-next-line: max-line-length\nvar VirtualTableStateBase = /*#__PURE__*/function (_super) {\n  __extends(VirtualTableStateBase, _super);\n  function VirtualTableStateBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this.requestTimer = 0;\n    _this.setViewport = function (viewport, _a, _b) {\n      var virtualRows = _a.virtualRows;\n      var requestNextPage = _b.requestNextPage;\n      var pageSize = _this.props.pageSize;\n      var referenceIndex = getReferenceIndex(viewport);\n      if (needFetchMorePages(virtualRows, referenceIndex, pageSize)) {\n        requestNextPage({\n          referenceIndex: referenceIndex\n        });\n      }\n    };\n    _this.requestNextPageAction = function (_a, _b) {\n      var referenceIndex = _a.referenceIndex,\n        forceReload = _a.forceReload;\n      var virtualRows = _b.virtualRows;\n      var _c = _this.props,\n        pageSize = _c.pageSize,\n        totalRowCount = _c.totalRowCount,\n        infiniteScrolling = _c.infiniteScrolling;\n      var _d = _this.state,\n        requestedStartIndex = _d.requestedStartIndex,\n        requestedEndIndex = _d.requestedEndIndex;\n      var actualVirtualRows = forceReload ? emptyVirtualRows : virtualRows;\n      var _e = getRequestMeta(referenceIndex, virtualRows, pageSize, totalRowCount, forceReload, infiniteScrolling),\n        requestedRange = _e.requestedRange,\n        actualBounds = _e.actualBounds;\n      if (forceReload || shouldSendRequest(requestedRange, requestedStartIndex, requestedEndIndex)) {\n        _this.requestNextPage(requestedRange, actualVirtualRows, actualBounds);\n      }\n    };\n    _this.clearRowsCacheAction = function (_, __, _a) {\n      var requestNextPage = _a.requestNextPage;\n      _this.setState({\n        virtualRowsCache: emptyVirtualRows\n      });\n      requestNextPage({\n        forceReload: true\n      });\n    };\n    _this.resetVirtualTablePosition = function () {\n      return _this.requestFirstPage();\n    };\n    _this.state = {\n      virtualRowsCache: emptyVirtualRows,\n      requestedStartIndex: 0,\n      availableRowCount: props.totalRowCount || 0,\n      requestedEndIndex: 2 * props.pageSize\n    };\n    return _this;\n  }\n  VirtualTableStateBase.prototype.requestNextPage = function (requestedRange, virtualRows, actualBounds) {\n    var _this = this;\n    var _a = this.props,\n      getRows = _a.getRows,\n      infiniteScrolling = _a.infiniteScrolling,\n      totalRowCount = _a.totalRowCount;\n    var stateAvailableCount = this.state.availableRowCount;\n    if (this.requestTimer !== 0) {\n      clearTimeout(this.requestTimer);\n    }\n    this.requestTimer = window.setTimeout(function () {\n      var requestedStartIndex = requestedRange.start,\n        end = requestedRange.end;\n      var loadCount = end - requestedStartIndex;\n      var virtualRowsCache = trimRowsToInterval(virtualRows, actualBounds);\n      var availableRowCount = getAvailableRowCount(infiniteScrolling, actualBounds.end, stateAvailableCount, totalRowCount);\n      getRows(requestedStartIndex, loadCount);\n      _this.setState({\n        virtualRowsCache: virtualRowsCache,\n        availableRowCount: availableRowCount,\n        requestedStartIndex: requestedStartIndex,\n        requestedEndIndex: end\n      });\n    }, 50);\n  };\n  VirtualTableStateBase.prototype.requestFirstPage = function () {\n    var _this = this;\n    var _a = this.props,\n      getRows = _a.getRows,\n      pageSize = _a.pageSize;\n    var startIndex = 0;\n    var endIndex = 2 * pageSize;\n    if (this.requestTimer !== 0) {\n      clearTimeout(this.requestTimer);\n    }\n    this.requestTimer = window.setTimeout(function () {\n      getRows(startIndex, endIndex);\n      _this.setState({\n        virtualRowsCache: emptyVirtualRows,\n        requestedStartIndex: startIndex,\n        requestedEndIndex: endIndex\n      });\n    }, 50);\n  };\n  VirtualTableStateBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.availableRowCount,\n      prevAvailableRowCount = _a === void 0 ? prevState.availableRowCount : _a,\n      totalRowCount = nextProps.totalRowCount,\n      pageSize = nextProps.pageSize,\n      infiniteScrolling = nextProps.infiniteScrolling;\n    var prevRequestedStartIndex = prevState.requestedStartIndex,\n      prevVirtualRowCache = prevState.virtualRowsCache;\n    var availableRowCount = getAvailableRowCount(infiniteScrolling, pageSize * 2, prevAvailableRowCount, totalRowCount);\n    var requestedStartIndex = Math.max(Math.min(prevRequestedStartIndex, availableRowCount - pageSize), 0);\n    var virtualRowsCache = prevRequestedStartIndex === requestedStartIndex ? prevVirtualRowCache : emptyVirtualRows;\n    return {\n      availableRowCount: availableRowCount,\n      requestedStartIndex: requestedStartIndex,\n      virtualRowsCache: virtualRowsCache\n    };\n  };\n  VirtualTableStateBase.prototype.componentDidMount = function () {\n    var _a = this.props,\n      getRows = _a.getRows,\n      pageSize = _a.pageSize,\n      infiniteScrolling = _a.infiniteScrolling,\n      totalRowCount = _a.totalRowCount;\n    getRows(0, 2 * pageSize);\n    var newRowCount = infiniteScrolling ? 2 * pageSize : totalRowCount;\n    this.setState({\n      availableRowCount: newRowCount\n    });\n  };\n  VirtualTableStateBase.prototype.componentWillUnmount = function () {\n    if (this.requestTimer !== 0) {\n      window.clearTimeout(this.requestTimer);\n    }\n  };\n  VirtualTableStateBase.prototype.render = function () {\n    var _a = this.state,\n      virtualRowsCache = _a.virtualRowsCache,\n      availableRowCount = _a.availableRowCount;\n    var _b = this.props,\n      skip = _b.skip,\n      pageSize = _b.pageSize,\n      loading = _b.loading,\n      infiniteScrolling = _b.infiniteScrolling;\n    return createElement(Plugin, {\n      name: \"VirtualTableState\"\n    }, createElement(Getter, {\n      name: \"isDataRemote\",\n      value: true\n    }), createElement(Getter, {\n      name: \"isDataLoading\",\n      value: loading\n    }), createElement(Getter, {\n      name: \"isScrollingInfinite\",\n      value: infiniteScrolling\n    }), createElement(Getter, {\n      name: \"skip\",\n      value: skip\n    }), createElement(Getter, {\n      name: \"virtualRowsCache\",\n      value: virtualRowsCache\n    }), createElement(Getter, {\n      name: \"pageSize\",\n      value: pageSize\n    }), createElement(Getter, {\n      name: \"availableRowCount\",\n      value: availableRowCount\n    }), createElement(Getter, {\n      name: \"virtualRows\",\n      computed: virtualRowsComputed\n    }), createElement(Getter, {\n      name: \"rows\",\n      computed: rowsComputed\n    }), createElement(Getter, {\n      name: \"loadedRowsStart\",\n      computed: loadedRowsStartComputed\n    }), createElement(Action, {\n      name: \"requestNextPage\",\n      action: this.requestNextPageAction\n    }), createElement(Action, {\n      name: \"setViewport\",\n      action: this.setViewport\n    }), createElement(Action, {\n      name: \"clearRowCache\",\n      action: this.clearRowsCacheAction\n    }), createElement(Action, {\n      name: \"changeColumnSorting\",\n      action: this.clearRowsCacheAction\n    }), createElement(Action, {\n      name: \"changeColumnFilter\",\n      action: this.resetVirtualTablePosition\n    }), createElement(Action, {\n      name: \"changeSearchValue\",\n      action: this.resetVirtualTablePosition\n    }), createElement(Action, {\n      name: \"changeColumnGrouping\",\n      action: this.resetVirtualTablePosition\n    }));\n  };\n  VirtualTableStateBase.defaultProps = {\n    pageSize: 100\n  };\n  return VirtualTableStateBase;\n}(PureComponent);\nvar VirtualTableState = VirtualTableStateBase;\nvar pluginDependencies$m = [{\n  name: 'EditingState'\n}, {\n  name: 'Table'\n}, {\n  name: 'DataTypeProvider',\n  optional: true\n}];\nvar rowsWithEditingCellsComputed = function (_a) {\n  var tableBodyRows = _a.tableBodyRows,\n    editingCells = _a.editingCells;\n  return rowsWithEditingCells(tableBodyRows, editingCells);\n};\nvar columnsWithEditingCellsComputed = function (_a) {\n  var tableColumns = _a.tableColumns,\n    editingCells = _a.editingCells;\n  return columnsWithEditingCells(tableColumns, editingCells);\n};\n/* tslint:disable-next-line max-line-length*/\nvar INLINE_CELL_EDITING_ERROR = 'The startEditAction property of the InlineCellEditing plugin is given an invalid value.';\n// tslint:disable-next-line: max-line-length\nvar TableInlineCellEditingBase = function (props) {\n  var EditCell = props.cellComponent,\n    startEditAction = props.startEditAction,\n    selectTextOnEditStart = props.selectTextOnEditStart;\n  return createElement(Plugin, {\n    name: \"TableInlineCellEditing\",\n    dependencies: pluginDependencies$m\n  }, createElement(Getter, {\n    name: \"tableBodyRows\",\n    computed: rowsWithEditingCellsComputed\n  }), createElement(Getter, {\n    name: \"tableColumns\",\n    computed: columnsWithEditingCellsComputed\n  }), createElement(Template, {\n    name: \"tableCell\",\n    predicate: function (_a) {\n      var tableRow = _a.tableRow,\n        tableColumn = _a.tableColumn;\n      return tableRow.type === TABLE_DATA_TYPE && tableColumn.type === TABLE_DATA_TYPE;\n    }\n  }, function (params) {\n    return createElement(TemplateConnector, null, function (_a, _b) {\n      var _c;\n      var startEditCells = _b.startEditCells;\n      var rowId = params.tableRow.rowId,\n        column = params.tableColumn.column;\n      var columnName = column.name;\n      if (startEditAction !== 'click' && startEditAction !== 'doubleClick') {\n        throw new Error(INLINE_CELL_EDITING_ERROR);\n      }\n      var startEditCellCallback = function () {\n        return startEditCells({\n          editingCells: [{\n            rowId: rowId,\n            columnName: columnName\n          }]\n        });\n      };\n      var eventName = startEditAction === 'click' ? 'onClick' : 'onDoubleClick';\n      var newParams = __assign(__assign({}, params), (_c = {}, _c[eventName] = startEditCellCallback, _c));\n      return createElement(TemplatePlaceholder, {\n        params: newParams\n      });\n    });\n  }), createElement(Template, {\n    name: \"tableCell\",\n    predicate: function (_a) {\n      var tableRow = _a.tableRow,\n        tableColumn = _a.tableColumn;\n      return tableRow.hasEditCell && tableColumn.hasEditCell;\n    }\n  }, function (params) {\n    return createElement(TemplateConnector, null, function (_a, _b) {\n      var getCellValue = _a.getCellValue,\n        createRowChange = _a.createRowChange,\n        rowChanges = _a.rowChanges,\n        isColumnEditingEnabled = _a.isColumnEditingEnabled;\n      var changeRow = _b.changeRow,\n        stopEditCells = _b.stopEditCells,\n        commitChangedRows = _b.commitChangedRows,\n        cancelChangedRows = _b.cancelChangedRows;\n      var _c = params.tableRow,\n        rowId = _c.rowId,\n        row = _c.row,\n        column = params.tableColumn.column;\n      var columnName = column.name;\n      var changedRow = __assign(__assign({}, row), getRowChange(rowChanges, rowId));\n      var value = getCellValue(changedRow, columnName);\n      var onValueChange = function (newValue) {\n        var changeArgs = {\n          rowId: rowId,\n          change: createRowChange(changedRow, newValue, columnName)\n        };\n        changeRow(changeArgs);\n      };\n      var onKeyDown = function (_a) {\n        var key = _a.key;\n        if (key === 'Enter') {\n          commitChangedRows({\n            rowIds: [rowId]\n          });\n          stopEditCells({\n            editingCells: [{\n              rowId: rowId,\n              columnName: columnName\n            }]\n          });\n        } else if (key === 'Escape') {\n          cancelChangedRows({\n            rowIds: [rowId]\n          });\n          stopEditCells({\n            editingCells: [{\n              rowId: rowId,\n              columnName: columnName\n            }]\n          });\n        }\n      };\n      var onBlur = function () {\n        commitChangedRows({\n          rowIds: [rowId]\n        });\n        stopEditCells({\n          editingCells: [{\n            rowId: rowId,\n            columnName: columnName\n          }]\n        });\n      };\n      var onFocus = selectTextOnEditStart ? function (e) {\n        return e.target.select();\n      } : function () {};\n      var editingEnabled = isColumnEditingEnabled(columnName);\n      return createElement(TemplatePlaceholder, {\n        name: \"valueEditor\",\n        params: {\n          column: column,\n          row: row,\n          value: value,\n          onValueChange: onValueChange,\n          disabled: !editingEnabled\n        }\n      }, function (content) {\n        return createElement(EditCell, __assign({}, params, {\n          row: row,\n          column: column,\n          value: value,\n          editingEnabled: editingEnabled,\n          onValueChange: onValueChange,\n          autoFocus: true,\n          onKeyDown: onKeyDown,\n          onBlur: onBlur,\n          onFocus: onFocus\n        }), content);\n      });\n    });\n  }));\n};\nTableInlineCellEditingBase.components = {\n  cellComponent: 'Cell'\n};\nTableInlineCellEditingBase.defaultProps = {\n  startEditAction: 'click',\n  selectTextOnEditStart: false\n};\n// tslint:disable-next-line: max-line-length\nvar TableInlineCellEditing = TableInlineCellEditingBase;\nvar defaultMessages$8 = {\n  showExportMenu: 'Export',\n  exportAll: 'Export all data',\n  exportSelected: 'Export selected rows'\n};\nvar ExportPanelBase = /*#__PURE__*/function (_super) {\n  __extends(ExportPanelBase, _super);\n  function ExportPanelBase() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.state = {\n      visible: false\n    };\n    _this.setButtonRef = function (button) {\n      return _this.button = button;\n    };\n    _this.handleToggle = function () {\n      var visible = _this.state.visible;\n      _this.setState({\n        visible: !visible\n      });\n    };\n    _this.handleHide = function () {\n      return _this.setState({\n        visible: false\n      });\n    };\n    return _this;\n  }\n  ExportPanelBase.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      ToggleButton = _a.toggleButtonComponent,\n      Menu = _a.menuComponent,\n      MenuItem = _a.menuItemComponent,\n      messages = _a.messages,\n      startExport = _a.startExport;\n    var visible = this.state.visible;\n    var getMessage = getMessagesFormatter(__assign(__assign({}, defaultMessages$8), messages));\n    return createElement(Plugin, {\n      name: \"ExportPanel\",\n      dependencies: [{\n        name: 'SelectionState',\n        optional: true\n      }, {\n        name: 'Toolbar'\n      }]\n    }, createElement(Template, {\n      name: \"toolbarContent\"\n    }, createElement(TemplatePlaceholder, null), createElement(TemplateConnector, null, function (_a) {\n      var selection = _a.selection;\n      return createElement(Fragment, null, createElement(ToggleButton, {\n        buttonRef: _this.setButtonRef,\n        onToggle: _this.handleToggle,\n        getMessage: getMessage\n      }), createElement(Menu, {\n        visible: visible,\n        onHide: _this.handleHide,\n        target: _this.button\n      }, createElement(MenuItem, {\n        key: \"exportAll\",\n        text: getMessage('exportAll'),\n        onClick: function () {\n          _this.handleHide();\n          startExport();\n        }\n      }), (selection === null || selection === void 0 ? void 0 : selection.length) ? createElement(MenuItem, {\n        key: \"exportSelected\",\n        text: getMessage('exportSelected'),\n        onClick: function () {\n          _this.handleHide();\n          startExport({\n            selectedOnly: true\n          });\n        }\n      }) : null));\n    })));\n  };\n  ExportPanelBase.components = {\n    toggleButtonComponent: 'ToggleButton',\n    menuComponent: 'Menu',\n    menuItemComponent: 'MenuItem'\n  };\n  return ExportPanelBase;\n}(PureComponent);\nvar ExportPanel = ExportPanelBase;\nvar CellPlaceholder$3 = function (props) {\n  return createElement(TemplatePlaceholder, {\n    params: props\n  });\n};\nvar RowPlaceholder$1 = function (props) {\n  return createElement(TemplatePlaceholder, {\n    params: props\n  });\n};\nvar TableKeyboardNavigationCore = /*#__PURE__*/function (_super) {\n  __extends(TableKeyboardNavigationCore, _super);\n  function TableKeyboardNavigationCore(props) {\n    var _this = _super.call(this, props) || this;\n    _this.elements = {};\n    var focusedCell = props.focusedCell || props.defaultFocusedCell;\n    _this.state = {\n      focusedElement: focusedCell ? __assign({\n        part: TABLE_DATA_TYPE.toString()\n      }, focusedCell) : focusedCell\n    };\n    _this.handleKeyDownOnWidget = _this.handleKeyDownOnWidget.bind(_this);\n    _this.updateRef = _this.updateRef.bind(_this);\n    _this.setFocusedElement = _this.setFocusedElement.bind(_this);\n    _this.setSearchPanelRef = _this.setSearchPanelRef.bind(_this);\n    return _this;\n  }\n  TableKeyboardNavigationCore.getDerivedStateFromProps = function (props, state) {\n    var focusedCell = props.focusedCell !== undefined ? props.focusedCell : state.focusedElement;\n    return {\n      focusedElement: focusedCell ? __assign({\n        part: TABLE_DATA_TYPE.toString()\n      }, focusedCell) : undefined\n    };\n  };\n  TableKeyboardNavigationCore.prototype.componentDidMount = function () {\n    this.props.rootRef.current.addEventListener('keydown', this.handleKeyDownOnWidget);\n  };\n  TableKeyboardNavigationCore.prototype.componentWillUnmount = function () {\n    this.props.rootRef.current.removeEventListener('keydown', this.handleKeyDownOnWidget);\n  };\n  TableKeyboardNavigationCore.prototype.pushRef = function (ref, key1, key2) {\n    var focusedElement = this.state.focusedElement;\n    var tableColumns = this.props.tableColumns;\n    if (!this.elements[key1]) {\n      this.elements[key1] = [];\n    }\n    if (!this.elements[key1][key2]) {\n      this.elements[key1][key2] = [];\n    }\n    this.elements[key1][key2].push(ref);\n    if ((focusedElement === null || focusedElement === void 0 ? void 0 : focusedElement.rowKey) === key1 && (focusedElement === null || focusedElement === void 0 ? void 0 : focusedElement.columnKey) === key2) {\n      focus(this.elements, focusedElement, undefined, this.props.onFocusedCellChange);\n    }\n    if (key1.toString().includes(TABLE_ADDED_TYPE.toString()) && key2 === tableColumns[0].key) {\n      this.changeFocusedElement({\n        part: TABLE_DATA_TYPE.toString(),\n        columnKey: key2,\n        rowKey: key1\n      }, focusedElement);\n    }\n  };\n  TableKeyboardNavigationCore.prototype.setSearchPanelRef = function (ref) {\n    this.searchPanelRef = ref;\n  };\n  TableKeyboardNavigationCore.prototype.removeRef = function (key1, key2) {\n    delete this.elements[key1][key2];\n    if (Object.keys(this.elements[key1]).length === 0) {\n      delete this.elements[key1];\n    }\n  };\n  TableKeyboardNavigationCore.prototype.updateRef = function (_a) {\n    var ref = _a.ref,\n      key1 = _a.key1,\n      key2 = _a.key2,\n      action = _a.action;\n    if (action === 'add') {\n      this.pushRef(ref, key1, key2);\n    } else {\n      this.removeRef(key1, key2);\n    }\n  };\n  TableKeyboardNavigationCore.prototype.changeFocusedElement = function (focusedCell, prevFocusedCell) {\n    var onFocusedCellChange = this.props.onFocusedCellChange;\n    this.setState({\n      focusedElement: focusedCell\n    });\n    focus(this.elements, focusedCell, prevFocusedCell, onFocusedCellChange);\n  };\n  TableKeyboardNavigationCore.prototype.handleKeyDownOnWidget = function (event) {\n    var _a;\n    var focusedElement = this.state.focusedElement;\n    var _b = this.props,\n      tableColumns = _b.tableColumns,\n      tableBodyRows = _b.tableBodyRows,\n      tableHeaderRows = _b.tableHeaderRows,\n      expandedRowIds = _b.expandedRowIds,\n      scrollToColumn = _b.scrollToColumn,\n      inlineEditing = _b.inlineEditing;\n    if (event.key === 'f' && (event.ctrlKey || event.metaKey)) {\n      if (this.searchPanelRef) {\n        event.preventDefault();\n        (_a = this.searchPanelRef.current) === null || _a === void 0 ? void 0 : _a.click();\n      }\n      if (focusedElement) {\n        this.changeFocusedElement(undefined, focusedElement);\n      }\n      return;\n    }\n    if (focusedElement && !isCellExist(this.elements, focusedElement) && event.key === 'Tab') {\n      var focusedCell = getClosestCellByRow(tableBodyRows, focusedElement, this.elements);\n      event.preventDefault();\n      this.changeFocusedElement(focusedCell, focusedElement);\n      return;\n    }\n    if (focusedElement || isTabArrowUpDown(event)) {\n      var _c = getNextFocusedCell(tableColumns, tableBodyRows, tableHeaderRows, expandedRowIds, this.elements, event, inlineEditing, focusedElement, scrollToColumn),\n        element = _c.element,\n        scrolling = _c.scrolling;\n      if (element) {\n        if (scrolling) {\n          scrollToColumn(scrolling === 'left' ? LEFT_POSITION : RIGHT_POSITION);\n        }\n        event.preventDefault();\n        this.changeFocusedElement(element, focusedElement);\n      } else if (isTabArrowUpDown(event) && focusedElement) {\n        this.changeFocusedElement(undefined, focusedElement);\n      }\n    }\n  };\n  TableKeyboardNavigationCore.prototype.setFocusedElement = function (_a) {\n    var key1 = _a.key1,\n      key2 = _a.key2,\n      event = _a.event;\n    var focusedElement = this.state.focusedElement;\n    var inlineEditing = this.props.inlineEditing;\n    if (key1 === 'paging' || key1 === 'toolbar') {\n      this.changeFocusedElement(undefined, focusedElement);\n    } else if (key2.includes(TABLE_FLEX_TYPE.toString())) {\n      var columnKey = this.props.tableColumns[0].key;\n      this.changeFocusedElement({\n        rowKey: key1,\n        columnKey: columnKey,\n        index: -1,\n        part: getPart(key1)\n      }, focusedElement);\n    } else {\n      var part = getPart(key1);\n      this.changeFocusedElement({\n        rowKey: key1,\n        columnKey: key2,\n        index: getIndexToFocus(key1, key2, this.elements, event, inlineEditing, part),\n        part: part\n      }, focusedElement);\n    }\n  };\n  TableKeyboardNavigationCore.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      Cell = _a.cellComponent,\n      Row = _a.rowComponent,\n      focusedRowEnabled = _a.focusedRowEnabled,\n      tableBodyRows = _a.tableBodyRows;\n    var focusedElement = this.state.focusedElement;\n    var getFocusedGetter = function () {\n      return getFocusing(tableBodyRows, focusedElement);\n    };\n    return createElement(Plugin, {\n      name: \"TableKeyboardNavigationCore\"\n    }, createElement(Action, {\n      name: \"setSearchPanelRef\",\n      action: this.setSearchPanelRef\n    }), focusedRowEnabled && createElement(Getter, {\n      name: \"highlightSelectedRow\",\n      value: true\n    }), focusedRowEnabled && createElement(Getter, {\n      name: \"focused\",\n      computed: getFocusedGetter\n    }), createElement(Template, {\n      name: \"tableCell\"\n    }, function (params) {\n      return createElement(Cell, __assign({}, params, {\n        component: CellPlaceholder$3,\n        tabIndex: 0,\n        updateRefForKeyboardNavigation: _this.updateRef,\n        setFocusedElement: _this.setFocusedElement,\n        focused: isCellFocused(params.tableRow, params.tableColumn, focusedElement)\n      }));\n    }), createElement(Template, {\n      name: \"header\"\n    }, createElement(TemplatePlaceholder, {\n      params: {\n        updateRefForKeyboardNavigation: this.updateRef,\n        setFocusedElement: this.setFocusedElement\n      }\n    })), createElement(Template, {\n      name: \"footer\"\n    }, createElement(TemplatePlaceholder, {\n      params: {\n        updateRefForKeyboardNavigation: this.updateRef,\n        setFocusedElement: this.setFocusedElement\n      }\n    })), focusedRowEnabled && createElement(Template, {\n      name: \"tableRow\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return !!isDataTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(Row, __assign({}, params, {\n        component: RowPlaceholder$1,\n        focused: isRowFocused(params.tableRow, focusedElement === null || focusedElement === void 0 ? void 0 : focusedElement.rowKey)\n      }));\n    }));\n  };\n  return TableKeyboardNavigationCore;\n}(PureComponent);\n// tslint:disable-next-line:max-classes-per-file\nvar TableKeyboardNavigationBase = /*#__PURE__*/function (_super) {\n  __extends(TableKeyboardNavigationBase, _super);\n  function TableKeyboardNavigationBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  TableKeyboardNavigationBase.prototype.render = function () {\n    var _this = this;\n    return createElement(Plugin, {\n      name: \"TableKeyboardNavigation\",\n      dependencies: [{\n        name: 'Table'\n      }]\n    }, createElement(TemplateConnector, null, function (_a, _b) {\n      var tableColumns = _a.tableColumns,\n        tableBodyRows = _a.tableBodyRows,\n        rootRef = _a.rootRef,\n        tableHeaderRows = _a.tableHeaderRows,\n        expandedRowIds = _a.expandedRowIds;\n      var scrollToColumn = _b.scrollToColumn,\n        stopEditCells = _b.stopEditCells,\n        commitChangedRows = _b.commitChangedRows,\n        cancelChangedRows = _b.cancelChangedRows,\n        startEditCells = _b.startEditCells;\n      return rootRef.current ? createElement(TableKeyboardNavigationCore, __assign({\n        tableColumns: tableColumns,\n        tableBodyRows: tableBodyRows,\n        rootRef: rootRef,\n        tableHeaderRows: filterHeaderRows(tableHeaderRows),\n        expandedRowIds: expandedRowIds,\n        scrollToColumn: scrollToColumn,\n        inlineEditing: {\n          stopEditCells: stopEditCells,\n          commitChangedRows: commitChangedRows,\n          cancelChangedRows: cancelChangedRows,\n          startEditCells: startEditCells\n        }\n      }, _this.props)) : null;\n    }));\n  };\n  TableKeyboardNavigationBase.components = {\n    cellComponent: 'Cell',\n    rowComponent: 'Row'\n  };\n  return TableKeyboardNavigationBase;\n}(PureComponent);\n// tslint:disable-next-line: max-line-length\nvar TableKeyboardNavigation = TableKeyboardNavigationBase;\nvar getRowStyle = function (_a) {\n  var row = _a.row;\n  return row.height !== undefined ? {\n    height: row.height + \"px\"\n  } : undefined;\n};\nvar isNumber = function (value) {\n  return typeof value === 'number' || !Number.isNaN(Number(value));\n};\n\n/* globals requestAnimationFrame cancelAnimationFrame */\nvar TableLayoutBase = /*#__PURE__*/function (_super) {\n  __extends(TableLayoutBase, _super);\n  function TableLayoutBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this.savedOffsetWidth = -1;\n    _this.raf = -1;\n    _this.state = {\n      animationState: new Map()\n    };\n    _this.animations = new Map();\n    _this.savedScrollWidth = {};\n    _this.tableRef = createRef();\n    return _this;\n  }\n  TableLayoutBase.prototype.componentDidMount = function () {\n    if (this.tableRef.current) {\n      var forwardedRef = this.props.forwardedRef;\n      if (typeof forwardedRef === 'function') {\n        forwardedRef(this.tableRef.current);\n      } else if (forwardedRef) {\n        forwardedRef.current = this.tableRef.current;\n      }\n    }\n  };\n  TableLayoutBase.prototype.componentDidUpdate = function (prevProps) {\n    var columns = this.props.columns;\n    var prevColumns = prevProps.columns;\n    var animationState = this.state.animationState;\n    var activeAnimationExists = !shallowEqual(columns, prevColumns) || !!animationState.size || !!this.animations.size;\n    // NOTE: animation should be recomputed only when columns are changed or\n    // an active animation is in progress. Otherwise it will be recalculated on\n    // each scroll event.\n    if (activeAnimationExists) {\n      this.processAnimation(prevColumns);\n    }\n  };\n  TableLayoutBase.prototype.processAnimation = function (prevColumns) {\n    var columns = this.props.columns;\n    var tableWidth = this.getTableWidth(prevColumns, columns);\n    this.animations = getAnimations(prevColumns, columns, tableWidth, this.animations);\n    cancelAnimationFrame(this.raf);\n    this.raf = requestAnimationFrame(this.processAnimationFrame.bind(this));\n  };\n  TableLayoutBase.prototype.getTableWidth = function (prevColumns, columns) {\n    var _a = this.tableRef.current,\n      offsetWidth = _a.offsetWidth,\n      scrollWidth = _a.scrollWidth;\n    var animationState = this.state.animationState;\n    var widthChanged = this.savedOffsetWidth !== offsetWidth || !this.savedScrollWidth[columns.length];\n    var columnCountChanged = columns.length !== prevColumns.length;\n    if (columnCountChanged || widthChanged && !animationState.size) {\n      this.savedScrollWidth = {};\n      this.savedScrollWidth[columns.length] = scrollWidth;\n      this.savedOffsetWidth = offsetWidth;\n    }\n    return this.savedScrollWidth[columns.length];\n  };\n  TableLayoutBase.prototype.getColumns = function () {\n    var columns = this.props.columns;\n    var animationState = this.state.animationState;\n    var result = columns;\n    var isFixedWidth = columns.filter(function (column) {\n      return column.width === undefined || column.width === 'auto';\n    }).length === 0;\n    if (isFixedWidth) {\n      // presumably a flex column added here instead of in a getter in the Table plugin\n      // to make sure that all manipulations on taleColumns have already done earlier\n      result = __spread(result, [{\n        key: TABLE_FLEX_TYPE.toString(),\n        type: TABLE_FLEX_TYPE\n      }]);\n    }\n    if (animationState.size) {\n      result = result.map(function (column) {\n        return animationState.has(column.key) ? __assign(__assign({}, column), {\n          animationState: animationState.get(column.key)\n        }) : column;\n      });\n    }\n    return result;\n  };\n  TableLayoutBase.prototype.processAnimationFrame = function () {\n    var animationComponentState = this.state.animationState;\n    this.animations = filterActiveAnimations(this.animations);\n    if (!this.animations.size) {\n      if (animationComponentState.size) {\n        this.setState({\n          animationState: new Map()\n        });\n      }\n      return;\n    }\n    var animationState = evalAnimations(this.animations);\n    this.setState({\n      animationState: animationState\n    });\n  };\n  TableLayoutBase.prototype.render = function () {\n    var _a = this.props,\n      Layout = _a.layoutComponent,\n      minColumnWidth = _a.minColumnWidth,\n      forwardedRef = _a.forwardedRef,\n      restProps = __rest(_a, [\"layoutComponent\", \"minColumnWidth\", \"forwardedRef\"]);\n    var columns = this.getColumns();\n    var minWidth = columns.map(function (column) {\n      return column.width || (column.type === TABLE_FLEX_TYPE ? 0 : minColumnWidth);\n    }).filter(function (value) {\n      return value !== 'auto' && value !== 0;\n    }).map(function (value) {\n      return isNumber(value) ? value + \"px\" : value;\n    }).join(' + ');\n    return createElement(Layout, __assign({}, restProps, {\n      tableRef: this.tableRef,\n      columns: columns,\n      minWidth: minWidth,\n      minColumnWidth: minColumnWidth\n    }));\n  };\n  return TableLayoutBase;\n}(PureComponent);\n/** @internal */\nvar TableLayout = TableLayoutBase;\nvar shouldUpdateRow = function (prevProps, nextProps) {\n  var prevCells = prevProps.cells,\n    prevRow = prevProps.row;\n  var nextCells = nextProps.cells,\n    nextRow = nextProps.row;\n  if (prevRow !== nextRow || prevCells.length !== nextCells.length) {\n    return false;\n  }\n  return !nextCells.some(function (nextCell, i) {\n    var prevCell = prevCells[i];\n    return prevCell.column !== nextCell.column || prevCell.colSpan !== nextCell.colSpan;\n  });\n};\nvar VirtualRowLayout = memo(function (_a) {\n  var row = _a.row,\n    cells = _a.cells,\n    Row = _a.rowComponent,\n    Cell = _a.cellComponent,\n    forwardedRef = _a.forwardedRef;\n  return createElement(Row, {\n    forwardedRef: forwardedRef,\n    tableRow: row,\n    style: getRowStyle({\n      row: row\n    })\n  }, cells.map(function (_a) {\n    var column = _a.column,\n      colSpan = _a.colSpan;\n    return createElement(Cell, {\n      key: column.key,\n      tableRow: row,\n      tableColumn: column,\n      colSpan: colSpan\n    });\n  }));\n}, shouldUpdateRow);\n\n// tslint:disable-next-line: max-line-length\nvar VirtualTableLayoutBlock = /*#__PURE__*/function (_super) {\n  __extends(VirtualTableLayoutBlock, _super);\n  function VirtualTableLayoutBlock() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  VirtualTableLayoutBlock.prototype.render = function () {\n    var _a = this.props,\n      collapsedGrid = _a.collapsedGrid,\n      rowRefsHandler = _a.rowRefsHandler,\n      Body = _a.bodyComponent,\n      cellComponent = _a.cellComponent,\n      rowComponent = _a.rowComponent,\n      isFixed = _a.isFixed;\n    return createElement(Body, {\n      isFixed: isFixed\n    }, collapsedGrid.rows.map(function (visibleRow) {\n      var row = visibleRow.row,\n        _a = visibleRow.cells,\n        cells = _a === void 0 ? [] : _a;\n      return createElement(VirtualRowLayout, {\n        key: row.key,\n        row: row,\n        cells: cells,\n        forwardedRef: function (ref) {\n          return rowRefsHandler(row, ref);\n        },\n        rowComponent: rowComponent,\n        cellComponent: cellComponent\n      });\n    }));\n  };\n  return VirtualTableLayoutBlock;\n}(PureComponent);\n\n/** @internal */\nvar ColumnGroup = /*#__PURE__*/function (_super) {\n  __extends(ColumnGroup, _super);\n  function ColumnGroup() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  ColumnGroup.prototype.render = function () {\n    var columns = this.props.columns;\n    return createElement(\"colgroup\", null, columns.map(function (_a) {\n      var key = _a.key,\n        width = _a.width;\n      var styleWidth = typeof width === 'number' ? width + \"px\" : width;\n      return createElement(\"col\", {\n        key: key,\n        style: width !== undefined ? {\n          width: styleWidth\n        } : undefined\n      });\n    }));\n  };\n  return ColumnGroup;\n}(PureComponent);\nvar AUTO_HEIGHT = 'auto';\nvar MAX_WINDOW_HEIGHT = 10000000;\nvar FACTOR = 3;\nvar defaultProps$3 = {\n  headerRows: [],\n  footerRows: [],\n  headComponent: function () {\n    return null;\n  },\n  footerComponent: function () {\n    return null;\n  },\n  tableComponent: function () {\n    return null;\n  },\n  containerComponent: forwardRef(function () {\n    return null;\n  })\n};\n/** @internal */\n// tslint:disable-next-line: max-line-length\nvar VirtualTableLayout = /*#__PURE__*/function (_super) {\n  __extends(VirtualTableLayout, _super);\n  function VirtualTableLayout(props) {\n    var _this = _super.call(this, props) || this;\n    _this.rowRefs = new Map();\n    _this.registerRowRef = function (row, ref) {\n      if (row.type === TABLE_STUB_TYPE) {\n        return;\n      }\n      if (ref === null) {\n        _this.rowRefs.delete(row.key);\n      } else {\n        _this.rowRefs.set(row.key, ref);\n      }\n    };\n    _this.getRowHeight = function (row) {\n      var _a;\n      if (row) {\n        var realHeight = (_a = _this.rowRefs.get(row.key)) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect().height;\n        return row.height || realHeight || _this.props.estimatedRowHeight;\n      }\n      return _this.props.estimatedRowHeight;\n    };\n    _this.onScroll = function (e) {\n      var node = e.target;\n      if (_this.shouldSkipScrollEvent(e)) {\n        return;\n      }\n      var viewportTop = node.scrollTop,\n        viewportLeft = node.scrollLeft;\n      var _a = _this.state,\n        containerHeight = _a.containerHeight,\n        skipItems = _a.skipItems,\n        prevViewPort = _a.viewportTop;\n      var countSkipRows = _this.getCountSkipRows();\n      var dif = viewportTop - prevViewPort;\n      var pxInPercent = viewportTop / MAX_WINDOW_HEIGHT;\n      // on scrolling with touchpad or mouse viewport difference less then FACTOR * container height\n      // and skipItems must not recalculated\n      var isDif = Math.abs(dif) < FACTOR * containerHeight;\n      var top = Math.min(Math.round(pxInPercent * countSkipRows), countSkipRows);\n      _this.setState({\n        viewportTop: viewportTop,\n        viewportLeft: viewportLeft,\n        skipItems: isDif ? skipItems : [top, countSkipRows - top]\n      });\n    };\n    _this.handleContainerSizeChange = function (_a) {\n      var width = _a.width,\n        height = _a.height;\n      _this.setState({\n        containerHeight: height,\n        containerWidth: width\n      });\n    };\n    _this.state = {\n      viewportTop: 0,\n      skipItems: [0, 0],\n      containerHeight: 600,\n      containerWidth: 800,\n      viewportLeft: 0\n    };\n    _this.getColumnWidthGetter = memoize(function (tableColumns, tableWidth, minColumnWidth) {\n      return getColumnWidthGetter(tableColumns, tableWidth, minColumnWidth);\n    });\n    return _this;\n  }\n  VirtualTableLayout.prototype.getCountSkipRows = function () {\n    var containerHeight = this.props.totalRowCount * this.props.estimatedRowHeight;\n    if (containerHeight > MAX_WINDOW_HEIGHT) {\n      return Math.round(this.props.totalRowCount - MAX_WINDOW_HEIGHT / this.props.estimatedRowHeight);\n    }\n    return 0;\n  };\n  VirtualTableLayout.prototype.componentDidUpdate = function (prevProps, prevState) {\n    var _a = this.props,\n      bodyRows = _a.bodyRows,\n      columns = _a.columns;\n    // NOTE: the boundaries depend not only on scroll position and container dimensions\n    // but on body rows too. This boundaries update is especially important when\n    // lazy loading is used because by the time that all involved events are handled\n    // no rows are loaded yet.\n    var bodyRowsChanged = prevProps.bodyRows !== bodyRows;\n    // Also it's the only place where we can respond to the column count change\n    var columnCountChanged = prevProps.columns.length !== columns.length;\n    var _b = this.state,\n      viewportTop = _b.viewportTop,\n      viewportLeft = _b.viewportLeft,\n      containerWidth = _b.containerWidth,\n      containerHeight = _b.containerHeight;\n    var viewportTopChanged = prevState.viewportTop !== viewportTop;\n    var viewportLeftChanged = prevState.viewportLeft !== viewportLeft;\n    var containerWidthChanged = prevState.containerWidth !== containerWidth;\n    var containerHeightChanged = prevState.containerHeight !== containerHeight;\n    if (prevProps.totalRowCount !== this.props.totalRowCount) {\n      var countSkipRows = this.getCountSkipRows();\n      var skipItems = this.state.skipItems;\n      if (countSkipRows !== 0 && skipItems[0] === 0 && skipItems[1] === 0) {\n        this.setState({\n          skipItems: [0, countSkipRows]\n        });\n      }\n    }\n    if (bodyRowsChanged || columnCountChanged || columns[0].width !== undefined && isColumnsWidthDifferent(prevProps.columns, columns) || viewportTopChanged || viewportLeftChanged || containerWidthChanged || containerHeightChanged) {\n      this.updateViewport();\n    }\n  };\n  VirtualTableLayout.prototype.shouldSkipScrollEvent = function (e) {\n    var node = e.target;\n    // NOTE: prevent nested scroll to update viewport\n    if (node !== e.currentTarget) {\n      return true;\n    }\n    // NOTE: normalize position:\n    // in Firefox and Chrome (zoom > 100%) when scrolled to the bottom\n    // in Edge when scrolled to the right edge\n    var correction = 1;\n    var nodeHorizontalOffset = parseInt(node.scrollLeft + node.clientWidth, 10) - correction;\n    var nodeVerticalOffset = parseInt(node.scrollTop + node.clientHeight, 10) - correction;\n    // NOTE: prevent iOS to flicker in bounces and correct rendering on high dpi screens\n    if (node.scrollTop < 0 || node.scrollLeft < 0 || nodeHorizontalOffset > Math.max(node.scrollWidth, node.clientWidth) || nodeVerticalOffset > Math.max(node.scrollHeight, node.clientHeight)) {\n      return true;\n    }\n    return false;\n  };\n  VirtualTableLayout.prototype.updateViewport = function () {\n    var _a = this.props,\n      viewport = _a.viewport,\n      setViewport = _a.setViewport;\n    var newViewport = this.calculateViewport();\n    if (viewport !== newViewport) {\n      setViewport(newViewport);\n    }\n  };\n  VirtualTableLayout.prototype.calculateViewport = function () {\n    var _a = this.state,\n      viewportTop = _a.viewportTop,\n      skipItems = _a.skipItems,\n      viewportLeft = _a.viewportLeft,\n      containerHeight = _a.containerHeight,\n      containerWidth = _a.containerWidth;\n    var _b = this.props,\n      loadedRowsStart = _b.loadedRowsStart,\n      bodyRows = _b.bodyRows,\n      headerRows = _b.headerRows,\n      footerRows = _b.footerRows,\n      columns = _b.columns,\n      minColumnWidth = _b.minColumnWidth,\n      isDataRemote = _b.isDataRemote,\n      viewport = _b.viewport;\n    var getColumnWidth = this.getColumnWidthGetter(columns, containerWidth, minColumnWidth);\n    return getViewport({\n      viewportTop: viewportTop,\n      skipItems: skipItems,\n      viewportLeft: viewportLeft,\n      containerHeight: containerHeight,\n      containerWidth: containerWidth\n    }, {\n      loadedRowsStart: loadedRowsStart,\n      columns: columns,\n      bodyRows: bodyRows,\n      headerRows: headerRows,\n      footerRows: footerRows,\n      isDataRemote: isDataRemote,\n      viewport: viewport\n    }, this.getRowHeight, getColumnWidth);\n  };\n  VirtualTableLayout.prototype.getCollapsedGrids = function (viewport) {\n    var _a = this.state,\n      containerWidth = _a.containerWidth,\n      viewportLeft = _a.viewportLeft,\n      skipItems = _a.skipItems;\n    var _b = this.props,\n      headerRows = _b.headerRows,\n      bodyRows = _b.bodyRows,\n      footerRows = _b.footerRows,\n      columns = _b.columns,\n      loadedRowsStart = _b.loadedRowsStart,\n      totalRowCount = _b.totalRowCount,\n      getCellColSpan = _b.getCellColSpan,\n      minColumnWidth = _b.minColumnWidth;\n    var getColumnWidth = this.getColumnWidthGetter(columns, containerWidth, minColumnWidth);\n    return getCollapsedGrids({\n      headerRows: headerRows,\n      bodyRows: bodyRows,\n      footerRows: footerRows,\n      columns: columns,\n      loadedRowsStart: loadedRowsStart,\n      totalRowCount: totalRowCount,\n      getCellColSpan: getCellColSpan,\n      viewportLeft: viewportLeft,\n      containerWidth: containerWidth,\n      viewport: viewport,\n      skipItems: skipItems,\n      getRowHeight: this.getRowHeight,\n      getColumnWidth: getColumnWidth\n    });\n  };\n  VirtualTableLayout.prototype.render = function () {\n    var _a = this.props,\n      Container = _a.containerComponent,\n      Table = _a.tableComponent,\n      Head = _a.headComponent,\n      Body = _a.bodyComponent,\n      Footer = _a.footerComponent,\n      tableRef = _a.tableRef,\n      height = _a.height,\n      headerRows = _a.headerRows,\n      footerRows = _a.footerRows,\n      minColumnWidth = _a.minColumnWidth,\n      minWidth = _a.minWidth,\n      cellComponent = _a.cellComponent,\n      rowComponent = _a.rowComponent,\n      viewport = _a.viewport,\n      scrollTop = _a.scrollTop,\n      columns = _a.columns,\n      nextColumnId = _a.nextColumnId;\n    var scrollLeft = getScrollLeft(columns.length, minColumnWidth, nextColumnId);\n    var collapsedGrids = this.getCollapsedGrids(viewport);\n    var commonProps = {\n      cellComponent: cellComponent,\n      rowComponent: rowComponent,\n      minColumnWidth: minColumnWidth,\n      minWidth: minWidth,\n      rowRefsHandler: this.registerRowRef\n    };\n    var sizerHeight = height === AUTO_HEIGHT ? null : height;\n    return createElement(Sizer, {\n      onSizeChange: this.handleContainerSizeChange,\n      containerComponent: Container,\n      style: {\n        height: sizerHeight\n      },\n      onScroll: this.onScroll,\n      scrollTop: scrollTop,\n      scrollLeft: scrollLeft\n    }, createElement(Table, {\n      forwardedRef: tableRef,\n      style: {\n        minWidth: minWidth + \"px\"\n      }\n    }, createElement(ColumnGroup, {\n      columns: collapsedGrids.bodyGrid.columns\n    }), !!headerRows.length && createElement(VirtualTableLayoutBlock, __assign({}, commonProps, {\n      name: \"header\",\n      isFixed: true,\n      collapsedGrid: collapsedGrids.headerGrid,\n      bodyComponent: Head\n    })), createElement(VirtualTableLayoutBlock, __assign({}, commonProps, {\n      name: \"body\",\n      collapsedGrid: collapsedGrids.bodyGrid,\n      bodyComponent: Body\n    })), !!footerRows.length && createElement(VirtualTableLayoutBlock, __assign({}, commonProps, {\n      name: \"footer\",\n      isFixed: true,\n      collapsedGrid: collapsedGrids.footerGrid,\n      bodyComponent: Footer\n    }))));\n  };\n  VirtualTableLayout.defaultProps = defaultProps$3;\n  return VirtualTableLayout;\n}(PureComponent);\nvar getColumnStyle = function (_a) {\n  var column = _a.column;\n  return column.animationState;\n};\n/** @internal */\nvar RowLayout = memo(function (props) {\n  var row = props.row,\n    columns = props.columns,\n    Row = props.rowComponent,\n    Cell = props.cellComponent,\n    getCellColSpan = props.getCellColSpan;\n  var getColSpan = useCallback(function (tableRow, tableColumn) {\n    return getCellColSpan({\n      tableRow: tableRow,\n      tableColumn: tableColumn,\n      tableColumns: columns\n    });\n  }, [columns, getCellColSpan]);\n  return createElement(Row, {\n    tableRow: row,\n    style: getRowStyle({\n      row: row\n    })\n  }, columns.map(function (column) {\n    return createElement(Cell, {\n      key: column.key,\n      tableRow: row,\n      tableColumn: column,\n      style: getColumnStyle({\n        column: column\n      }),\n      colSpan: getColSpan(row, column)\n    });\n  }));\n});\n\n/** @internal */\nvar RowsBlockLayout = /*#__PURE__*/function (_super) {\n  __extends(RowsBlockLayout, _super);\n  function RowsBlockLayout() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  RowsBlockLayout.prototype.render = function () {\n    var _a = this.props,\n      rows = _a.rows,\n      columns = _a.columns,\n      Block = _a.blockComponent,\n      rowComponent = _a.rowComponent,\n      cellComponent = _a.cellComponent,\n      getCellColSpan = _a.getCellColSpan;\n    return createElement(Block, null, rows.map(function (row) {\n      return createElement(RowLayout, {\n        key: row.key,\n        row: row,\n        columns: columns,\n        rowComponent: rowComponent,\n        cellComponent: cellComponent,\n        getCellColSpan: getCellColSpan\n      });\n    }));\n  };\n  return RowsBlockLayout;\n}(PureComponent);\nvar defaultProps$4 = {\n  headerRows: [],\n  footerRows: [],\n  headComponent: function () {\n    return null;\n  },\n  footerComponent: function () {\n    return null;\n  }\n};\n/** @internal */\nvar StaticTableLayout = /*#__PURE__*/function (_super) {\n  __extends(StaticTableLayout, _super);\n  function StaticTableLayout() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  StaticTableLayout.prototype.render = function () {\n    var _a = this.props,\n      headerRows = _a.headerRows,\n      bodyRows = _a.bodyRows,\n      footerRows = _a.footerRows,\n      columns = _a.columns,\n      minWidth = _a.minWidth,\n      Container = _a.containerComponent,\n      Table = _a.tableComponent,\n      headComponent = _a.headComponent,\n      bodyComponent = _a.bodyComponent,\n      footerComponent = _a.footerComponent,\n      rowComponent = _a.rowComponent,\n      cellComponent = _a.cellComponent,\n      getCellColSpan = _a.getCellColSpan,\n      tableRef = _a.tableRef;\n    var commonProps = {\n      columns: columns,\n      rowComponent: rowComponent,\n      cellComponent: cellComponent,\n      getCellColSpan: getCellColSpan\n    };\n    return createElement(Container, null, createElement(Table, {\n      forwardedRef: tableRef,\n      style: {\n        minWidth: \"calc(\" + minWidth + \")\"\n      }\n    }, createElement(ColumnGroup, {\n      columns: columns\n    }), !!headerRows.length && createElement(RowsBlockLayout, __assign({\n      rows: headerRows,\n      blockComponent: headComponent\n    }, commonProps)), createElement(RowsBlockLayout, __assign({\n      rows: bodyRows,\n      blockComponent: bodyComponent\n    }, commonProps)), !!footerRows.length && createElement(RowsBlockLayout, __assign({\n      rows: footerRows,\n      blockComponent: footerComponent\n    }, commonProps))));\n  };\n  StaticTableLayout.defaultProps = defaultProps$4;\n  return StaticTableLayout;\n}(PureComponent);\n\n/** @internal */\nvar emptyViewport = {\n  columns: [[0, 0]],\n  rows: [0, 0],\n  headerRows: [0, 0],\n  footerRows: [0, 0],\n  top: 0,\n  left: 0,\n  width: 800,\n  height: 600\n};\nvar tableColumnsComputed = function (_a) {\n  var tableColumns = _a.tableColumns;\n  return checkColumnWidths(tableColumns);\n};\n/** @internal */\nvar makeVirtualTable = function (Table, _a) {\n  var VirtualLayout = _a.VirtualLayout,\n    FixedHeader = _a.FixedHeader,\n    FixedFooter = _a.FixedFooter,\n    SkeletonCell = _a.SkeletonCell,\n    defaultEstimatedRowHeight = _a.defaultEstimatedRowHeight,\n    defaultHeight = _a.defaultHeight;\n  var VirtualTable = /*#__PURE__*/function (_super) {\n    __extends(VirtualTable, _super);\n    function VirtualTable(props) {\n      var _this = _super.call(this, props) || this;\n      _this.setViewport = function (viewport) {\n        _this.setState({\n          viewport: viewport\n        });\n      };\n      _this.state = {\n        viewport: emptyViewport,\n        nextRowId: undefined,\n        nextColumnId: undefined\n      };\n      _this.scrollToRow = function (nextRowId) {\n        return _this.setState({\n          nextRowId: nextRowId\n        });\n      };\n      _this.scrollToColumn = function (nextColumnId) {\n        return _this.setState({\n          nextColumnId: nextColumnId\n        });\n      };\n      return _this;\n    }\n    VirtualTable.prototype.componentDidUpdate = function (_, prevState) {\n      var prevId = prevState.nextRowId,\n        prevColumnId = prevState.nextColumnId;\n      var _a = this.state,\n        currentId = _a.nextRowId,\n        currentColumnId = _a.nextColumnId;\n      if (currentId !== undefined && currentId === prevId) {\n        this.setState({\n          nextRowId: undefined\n        });\n      }\n      if (currentColumnId !== undefined && prevColumnId === currentColumnId) {\n        this.setState({\n          nextColumnId: undefined\n        });\n      }\n    };\n    VirtualTable.prototype.render = function () {\n      var _this = this;\n      var _a = this.props,\n        height = _a.height,\n        estimatedRowHeight = _a.estimatedRowHeight,\n        SkeletonStubCell = _a.skeletonCellComponent,\n        children = _a.children,\n        restProps = __rest(_a, [\"height\", \"estimatedRowHeight\", \"skeletonCellComponent\", \"children\"]);\n      var _b = this.state,\n        stateViewport = _b.viewport,\n        nextId = _b.nextRowId,\n        nextColumnId = _b.nextColumnId;\n      return createElement(Plugin, {\n        name: \"VirtualTable\"\n      }, createElement(Table, __assign({\n        layoutComponent: VirtualLayout\n      }, restProps)), createElement(Action, {\n        name: \"setViewport\",\n        action: this.setViewport\n      }), createElement(Action, {\n        name: \"scrollToRow\",\n        action: this.scrollToRow\n      }), createElement(Action, {\n        name: \"scrollToColumn\",\n        action: this.scrollToColumn\n      }), createElement(Getter, {\n        name: \"viewport\",\n        value: stateViewport\n      }), createElement(Getter, {\n        name: \"tableColumns\",\n        computed: tableColumnsComputed\n      }), createElement(Template, {\n        name: \"tableLayout\"\n      }, function (params) {\n        return createElement(TemplateConnector, null, function (_a, _b) {\n          var availableRowCount = _a.availableRowCount,\n            loadedRowsStart = _a.loadedRowsStart,\n            tableBodyRows = _a.tableBodyRows,\n            isDataRemote = _a.isDataRemote,\n            viewport = _a.viewport;\n          var setViewport = _b.setViewport;\n          var onTopRowChange = _this.props.onTopRowChange;\n          var rowId = getTopRowId(viewport, tableBodyRows, isDataRemote);\n          onTopRowChange(rowId);\n          var totalRowCount = availableRowCount || tableBodyRows.length;\n          var scrollTop = getScrollTop(tableBodyRows, totalRowCount, nextId, estimatedRowHeight, isDataRemote);\n          return createElement(TemplatePlaceholder, {\n            params: __assign(__assign({}, params), {\n              totalRowCount: totalRowCount,\n              loadedRowsStart: loadedRowsStart,\n              isDataRemote: isDataRemote,\n              height: height,\n              estimatedRowHeight: estimatedRowHeight,\n              setViewport: setViewport,\n              viewport: viewport,\n              scrollTop: scrollTop,\n              nextColumnId: nextColumnId\n            })\n          });\n        });\n      }), createElement(Template, {\n        name: \"tableCell\",\n        predicate: function (_a) {\n          var tableRow = _a.tableRow;\n          return !!isStubTableCell(tableRow);\n        }\n      }, function (params) {\n        return createElement(TemplateConnector, null, function (_a) {\n          var isDataRemote = _a.isDataRemote;\n          return isDataRemote ? createElement(SkeletonStubCell, __assign({}, params)) : createElement(TemplatePlaceholder, null);\n        });\n      }));\n    };\n    VirtualTable.defaultProps = {\n      estimatedRowHeight: defaultEstimatedRowHeight,\n      height: defaultHeight,\n      skeletonCellComponent: SkeletonCell,\n      onTopRowChange: function () {}\n    };\n    VirtualTable.TOP_POSITION = TOP_POSITION;\n    VirtualTable.BOTTOM_POSITION = BOTTOM_POSITION;\n    return VirtualTable;\n  }(PureComponent);\n  Object.values(Table.components).forEach(function (name) {\n    VirtualTable[name] = Table[name];\n  });\n  VirtualTable.FixedHeader = FixedHeader;\n  VirtualTable.FixedFooter = FixedFooter;\n  VirtualTable.SkeletonCell = SkeletonCell;\n  return VirtualTable;\n};\nvar Node = /*#__PURE__*/function () {\n  function Node(start, rows) {\n    this.prev = null;\n    this.next = null;\n    this.start = start;\n    this.rows = rows;\n  }\n  return Node;\n}();\n// tslint:disable-next-line:max-classes-per-file\nvar LRUCache = /*#__PURE__*/function () {\n  function LRUCache(pageSize, capacity) {\n    if (capacity === void 0) {\n      capacity = Number.POSITIVE_INFINITY;\n    }\n    this.pages = new Map();\n    this.pageSize = pageSize;\n    this.capacity = capacity;\n    this.initList();\n  }\n  LRUCache.prototype.initList = function () {\n    this.head = new Node(-1, []);\n    this.tail = new Node(-1, []);\n    this.head.next = this.tail;\n    this.tail.prev = this.head;\n  };\n  LRUCache.prototype.addPage = function (pageStart, rows) {\n    if (this.pages.has(pageStart)) {\n      this.removePage(pageStart);\n    }\n    var node = new Node(pageStart, rows);\n    var last = this.tail.prev;\n    last.next = node;\n    node.next = this.tail;\n    node.prev = last;\n    this.tail.prev = node;\n    this.pages.set(pageStart, node);\n    if (this.pages.size > this.capacity) {\n      this.removePage(this.head.next.start);\n    }\n  };\n  LRUCache.prototype.removePage = function (start) {\n    var node = this.pages.get(start);\n    node.prev.next = node.next;\n    node.next.prev = node.prev;\n    this.pages.delete(start);\n  };\n  LRUCache.prototype.getPage = function (pageStart) {\n    if (!this.pages.has(pageStart)) {\n      return null;\n    }\n    var rows = this.pages.get(pageStart).rows;\n    this.removePage(pageStart);\n    this.addPage(pageStart, rows);\n    return rows;\n  };\n  LRUCache.prototype.clear = function () {\n    this.pages.clear();\n    this.initList();\n  };\n  return LRUCache;\n}();\nvar createRowCache = function (pageSize, capacity) {\n  if (pageSize === void 0) {\n    pageSize = 100;\n  }\n  if (capacity === void 0) {\n    capacity = Number.POSITIVE_INFINITY;\n  }\n  var cache = new LRUCache(pageSize, capacity / pageSize);\n  return {\n    getRows: function (skip, take) {\n      var result = [];\n      var pageCount = Math.ceil(take / pageSize);\n      for (var i = 0; i < pageCount; i += 1) {\n        var pageStart = skip + i * pageSize;\n        var chunk = cache.getPage(pageStart);\n        if (chunk !== null) {\n          result = result.concat(chunk);\n        }\n        // yield if last page is incomplete\n        if (chunk === null || i !== pageCount - 1 && chunk.length !== pageSize) {\n          return result;\n        }\n      }\n      return result;\n    },\n    setRows: function (skip, rows) {\n      var pageCount = Math.ceil(rows.length / pageSize);\n      for (var i = 0; i < pageCount; i += 1) {\n        var pageStart = i * pageSize;\n        var rowsChunk = rows.slice(pageStart, pageStart + pageSize);\n        // put incomplete page only if it is last one\n        if (rowsChunk.length === pageSize || i === pageCount - 1) {\n          cache.addPage(pageStart + skip, rowsChunk);\n        }\n      }\n    },\n    invalidate: function () {\n      return cache.clear();\n    }\n  };\n};\nvar withKeyboardNavigation = function (key1, key2) {\n  return function (Component) {\n    var ComponentWithNavigation = /*#__PURE__*/function (_super) {\n      __extends(ComponentWithNavigation, _super);\n      function ComponentWithNavigation(props) {\n        var _this = _super.call(this, props) || this;\n        _this.ref = {\n          current: null\n        };\n        _this.handleClick = _this.handleClick.bind(_this);\n        _this.setForwardedRef = _this.setForwardedRef.bind(_this);\n        return _this;\n      }\n      ComponentWithNavigation.prototype.setForwardedRef = function (node) {\n        var _a, _b;\n        (_a = this.ref.current) === null || _a === void 0 ? void 0 : _a.removeEventListener('mouseup', this.handleClick);\n        this.ref.current = node;\n        (_b = this.ref.current) === null || _b === void 0 ? void 0 : _b.addEventListener('mouseup', this.handleClick);\n      };\n      ComponentWithNavigation.prototype.componentDidMount = function () {\n        var _a = this.props,\n          updateRefForKeyboardNavigation = _a.updateRefForKeyboardNavigation,\n          tableRow = _a.tableRow,\n          tableColumn = _a.tableColumn;\n        if (this.ref.current && updateRefForKeyboardNavigation) {\n          updateRefForKeyboardNavigation({\n            ref: this.ref,\n            key1: key1 || tableRow.key,\n            key2: key2 || tableColumn.key,\n            action: 'add'\n          });\n        }\n      };\n      ComponentWithNavigation.prototype.componentWillUnmount = function () {\n        var _a = this.props,\n          updateRefForKeyboardNavigation = _a.updateRefForKeyboardNavigation,\n          tableRow = _a.tableRow,\n          tableColumn = _a.tableColumn;\n        if (this.ref.current && updateRefForKeyboardNavigation) {\n          updateRefForKeyboardNavigation({\n            ref: this.ref,\n            key1: key1 || tableRow.key,\n            key2: key2 || tableColumn.key,\n            action: 'remove'\n          });\n          this.ref.current.removeEventListener('mouseup', this.handleClick);\n        }\n      };\n      ComponentWithNavigation.prototype.handleClick = function (event) {\n        var _a = this.props,\n          tableRow = _a.tableRow,\n          tableColumn = _a.tableColumn,\n          setFocusedElement = _a.setFocusedElement;\n        if (setFocusedElement) {\n          setFocusedElement({\n            key1: key1 || tableRow.key,\n            key2: key2 || tableColumn.key,\n            event: event\n          });\n        }\n      };\n      ComponentWithNavigation.prototype.render = function () {\n        var _a = this.props,\n          setFocusedElement = _a.setFocusedElement,\n          updateRefForKeyboardNavigation = _a.updateRefForKeyboardNavigation,\n          restProps = __rest(_a, [\"setFocusedElement\", \"updateRefForKeyboardNavigation\"]);\n        return createElement(Component, __assign({\n          forwardedRef: this.setForwardedRef\n        }, restProps));\n      };\n      return ComponentWithNavigation;\n    }(PureComponent);\n    return ComponentWithNavigation;\n  };\n};\nvar InlineSummaryItem = memo(function (_a) {\n  var _b = _a.summary,\n    messageKey = _b.messageKey,\n    columnTitle = _b.columnTitle,\n    SummaryComponent = _b.component,\n    getMessage = _a.getMessage;\n  return createElement(Fragment, null, getMessage(messageKey, {\n    columnTitle: columnTitle\n  }), createElement(SummaryComponent, null));\n});\nexport { ColumnChooser, CustomGrouping, CustomPaging, CustomSummary, CustomTreeData, DataTypeProvider, DragDropProvider, EditingState, ExportPanel, FilteringState, Grid, GroupPanelLayout, GroupingPanel, GroupingState, InlineSummaryItem, IntegratedFiltering, IntegratedGrouping, IntegratedPaging, IntegratedSelection, IntegratedSorting, IntegratedSummary, PagingPanel, PagingState, RowDetailState, SearchPanel, SearchState, SelectionState, SortingState, StaticTableLayout, SummaryState, Table, TableBandHeader, TableColumnReordering, TableColumnResizing, TableColumnVisibility, TableEditColumn, TableEditRow, TableFilterRow, TableFixedColumns, TableGroupRow, TableHeaderRow, TableInlineCellEditing, TableKeyboardNavigation, TableLayout, TableRowDetail, TableSelection, TableSummaryRow, TableSummaryRowBase, TableTreeColumn, Toolbar, TreeDataState, VirtualTableLayout, VirtualTableState, createRowCache, defaultMessages$1 as defaultMessages, emptyViewport, makeVirtualTable, withKeyboardNavigation };","map":{"version":3,"sources":["../src/plugins/internal/table-group-row-columns.tsx","../src/plugins/internal/grid-core-getters.tsx","../src/plugins/internal/table-columns-getter.tsx","../src/plugins/internal/visible-table-columns.tsx","../src/plugins/internal/ordered-table-columns.tsx","../src/plugins/grid-core.tsx","../src/grid.tsx","../src/plugins/column-chooser.tsx","../src/plugins/filtering-state.tsx","../src/plugins/integrated-filtering.tsx","../src/plugins/editing-state.tsx","../src/plugins/paging-state.tsx","../src/plugins/integrated-paging.tsx","../src/plugins/custom-paging.tsx","../src/plugins/grouping-state.tsx","../src/plugins/integrated-grouping.tsx","../src/plugins/custom-grouping.tsx","../src/plugins/selection-state.tsx","../src/plugins/integrated-selection.tsx","../src/plugins/sorting-state.tsx","../src/plugins/integrated-sorting.tsx","../src/plugins/drag-drop-provider.tsx","../src/plugins/table-column-reordering.tsx","../src/plugins/table.tsx","../src/plugins/table-selection.tsx","../src/plugins/row-detail-state.tsx","../src/plugins/table-row-detail.tsx","../src/components/summary/constants.ts","../src/components/summary/table-summary-content.tsx","../src/components/summary/group-summaries.tsx","../src/plugins/table-group-row.tsx","../src/plugins/table-header-row.tsx","../src/plugins/table-band-header.tsx","../src/plugins/table-filter-row.tsx","../src/plugins/table-edit-row.tsx","../src/plugins/table-edit-column.tsx","../src/plugins/table-column-resizing.tsx","../src/plugins/paging-panel.tsx","../src/components/group-panel-layout/item-layout.tsx","../src/components/group-panel-layout.tsx","../src/plugins/grouping-panel.tsx","../src/plugins/data-type-provider.tsx","../src/plugins/table-column-visibility.tsx","../src/plugins/toolbar.tsx","../src/plugins/tree-data-state.tsx","../src/plugins/custom-tree-data.tsx","../src/plugins/table-tree-column.tsx","../src/plugins/search-state.tsx","../src/plugins/search-panel.tsx","../src/plugins/table-fixed-columns.tsx","../src/plugins/summary-state.tsx","../src/plugins/integrated-summary.tsx","../src/plugins/custom-summary.tsx","../src/plugins/table-summary-row.tsx","../src/plugins/virtual-table/virtual-table-state.tsx","../src/plugins/table-inline-cell-editing.tsx","../src/plugins/export-panel.tsx","../src/plugins/table-keyboard-navigation.tsx","../src/utils/helpers.ts","../src/components/table-layout.tsx","../src/components/table-layout/virtual-row-layout.tsx","../src/components/table-layout/virtual-table-layout-block.tsx","../src/components/table-layout/column-group.tsx","../src/components/table-layout/virtual-table-layout.tsx","../src/components/table-layout/row-layout.tsx","../src/components/table-layout/rows-block-layout.tsx","../src/components/table-layout/static-table-layout.tsx","../src/plugins/virtual-table/virtual-table.tsx","../src/utils/row-cache.ts","../src/utils/with-keyboard-navigation.tsx","../src/components/summary/inline-summary-item.tsx"],"names":["React.memo","React.createElement","React.useCallback","React.PureComponent","React.createRef","React.Fragment","pluginDependencies","columnExtensionValueGetter","getCollapsedRowsComputed","expandedGroupedRowsComputed","DragDropProviderCore","draftOrderComputed","React.forwardRef","defaultMessages","tableBodyRowsComputed","getCellColSpanComputed","tableHeaderRowsComputed","CellPlaceholder","defaultProps","getRowIdComputed","dependencies","RowPlaceholder"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,IAAM,2BAA2B,GAAkC,UACjE,sBAAsB,EAAE,gBAAqB,EAAA;EAArB,IAAA,gBAAA,KAAA,KAAA,CAAA,EAAA;IAAA,gBAAA,GAAA,EAAqB;EAAA;EAE7C,IAAM,GAAG,GAAG,gBAAgB,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,eAAe,EAAA;IACvD,GAAG,CAAC,eAAe,CAAC,UAAU,CAAC,GAAG,eAAe,CAAC,eAAe;IACjE,OAAO,GAAG;GACX,EAAE,CAAA,CAAE,CAAC;EAEN,OAAO,UAAA,UAAU,EAAA;IAAI,OAAA,GAAG,CAAC,UAAU,CAAC,IAAI,sBAAsB;EAAA,CAAA;AAChE,CAAC;AAED;AACO,IAAM,wBAAwB,GAEjCA,IAAU,CAAC,UAAC,EAEf,EAAA;MADC,iBAAiB,GAAA,EAAA,CAAA,iBAAA;IAAE,sBAAsB,GAAA,EAAA,CAAA,sBAAA;IAAE,gBAAgB,GAAA,EAAA,CAAA,gBAAA;EAE3D,IAAM,oBAAoB,GAAG,UAAC,EAEpB,EAAA;QADR,OAAO,GAAA,EAAA,CAAA,OAAA;MAAE,YAAY,GAAA,EAAA,CAAA,YAAA;MAAE,QAAQ,GAAA,EAAA,CAAA,QAAA;MAAE,aAAa,GAAA,EAAA,CAAA,aAAA;IACjC,OAAA,wBAAwB,CACrC,OAAO,EACP,YAAY,EACZ,QAAQ,EACR,aAAa,EACb,iBAAkB,EAClB,2BAA2B,CAAC,sBAAuB,EAAE,gBAAgB,CAAC,CACvE;GAAA;EAED,OACEC,aAAAA,CAAC,MAAM,EAAA,IAAA,EACLA,aAAAA,CAAC,MAAM,EAAA;IAAC,IAAI,EAAC,cAAc;IAAC,QAAQ,EAAE;EAAoB,CAAA,CAAI,CACvD;AAEb,CAAC,CAAC;AAEF,wBAAwB,CAAC,YAAY,GAAG;EACtC,iBAAiB,EAAE;CACpB;ACrCM,IAAM,eAAe,GAAkDD,IAAU,CAAC,UAAC,EAKzF,EAAA;MAJC,IAAI,GAAA,EAAA,CAAA,IAAA;IACJ,OAAO,GAAA,EAAA,CAAA,OAAA;IACP,QAAQ,GAAA,EAAA,CAAA,QAAA;IACR,YAAY,GAAA,EAAA,CAAA,YAAA;EACR,OACJC,aAAAA,CAAC,MAAM,EAAA,IAAA,EACLA,aAAAA,CAAC,MAAM,EAAA;IAAC,IAAI,EAAC,MAAM;IAAC,KAAK,EAAE;EAAI,CAAA,CAAI,EACnCA,aAAAA,CAAC,MAAM,EAAA;IAAC,IAAI,EAAC,UAAU;IAAC,KAAK,EAAE,WAAW,CAAC,QAAS,EAAE,IAAI;EAAC,CAAA,CAAI,EAC/DA,aAAAA,CAAC,MAAM,EAAA;IAAC,IAAI,EAAC,SAAS;IAAC,KAAK,EAAE;EAAO,CAAA,CAAI,EACzCA,aAAAA,CAAC,MAAM,EAAA;IAAC,IAAI,EAAC,cAAc;IAAC,KAAK,EAAE,eAAe,CAAC,YAAa,EAAE,OAAO;EAAC,CAAA,CAAI,CACvE;AANL,CAOL,CAAC;ACZK,IAAM,8BAA8B,GAEvCD,IAAU,CAAC,UAAC,EAAoB,EAAA;MAAlB,gBAAgB,GAAA,EAAA,CAAA,gBAAA;EAChC,IAAM,oBAAoB,GAAGE,WAAiB,CAC5C,UAAC,EAAW,EAAA;QAAT,OAAO,GAAA,EAAA,CAAA,OAAA;IAAO,OACf,wBAAwB,CAAC,OAAO,EAAE,gBAAiB,CAAC;GACrD,EAAE,CAAC,gBAAgB,CAAC,CAAC;EACxB,0BAA0B,CAAC,gBAAiB,CAAC;EAE7C,OACED,aAAAA,CAAC,MAAM,EAAA,IAAA,EACLA,aAAAA,CAAC,MAAM,EAAA;IAAC,IAAI,EAAC,cAAc;IAAC,QAAQ,EAAE;EAAoB,CAAA,CAAI,CACvD;AAEb,CAAC,CAAC;ACVF,IAAM,2BAA2B,GAAG,UAClC,EAA4C,EAAA;MAA1C,YAAY,GAAA,EAAA,CAAA,YAAA;IAAE,iBAAiB,GAAA,EAAA,CAAA,iBAAA;EAC9B,OAAA,mBAAmB,CAAC,YAAY,EAAE,iBAAiB,CAAC;AAApD,CAAoD;AAEzD;AACO,IAAM,mBAAmB,GAE5BD,IAAU,CAAC,UAAC,EAEf,EAAA;MADC,iBAAiB,GAAA,EAAA,CAAA,iBAAA;EACb,OACJC,aAAAA,CAAC,MAAM,EAAA,IAAA,EACLA,aAAAA,CAAC,MAAM,EAAA;IAAC,IAAI,EAAC,mBAAmB;IAAC,KAAK,EAAE;EAAiB,CAAA,CAAI,EAC7DA,aAAAA,CAAC,MAAM,EAAA;IAAC,IAAI,EAAC,cAAc;IAAC,QAAQ,EAAE;EAA2B,CAAA,CAAI,CAC9D;AAJL,CAKL,CAAC;AAEF,mBAAmB,CAAC,YAAY,GAAG;EACjC,iBAAiB,EAAE;CACpB;;AClBD;AACO,IAAM,mBAAmB,GAE5B,UAAC,EAEJ,EAAA;MADC,KAAK,GAAA,EAAA,CAAA,KAAA;EAEL,IAAM,eAAe,GAAG,UACtB,EAAyB,EAAA;QAAvB,YAAY,GAAA,EAAA,CAAA,YAAA;IACX,OAAA,cAAc,CAAC,YAAY,EAAE,KAAM,CAAC;GAAA;EAEzC,OACEA,aAAAA,CAAC,MAAM,EAAA,IAAA,EACLA,aAAAA,CAAC,MAAM,EAAA;IAAC,IAAI,EAAC,cAAc;IAAC,QAAQ,EAAE;EAAe,CAAA,CAAI,CAClD;AAEb,CAAC;AAED,mBAAmB,CAAC,YAAY,GAAG;EACjC,KAAK,EAAE;CACR;ACvBD,IAAA,QAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA8BE,SAAAA,CAAAA,QAAAA,EAAAA,MAAAA,CAAAA;EAE5B,SAAA,QAAA,CAAY,KAAK,EAAA;IAAjB,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAK,CAAC,IAAA,IAAA;IAEZ,KAAI,CAAC,KAAK,GAAG;MACX,GAAG,EAAE,CAAA;KACN;IACD,KAAI,CAAC,OAAO,GAAGC,SAAe,EAAE;;EACjC;EAED,QAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjB,YAAA;IACE,IAAI,CAAC,QAAQ,CAAC;MACZ,GAAG,EAAE,IAAI,CAAC;KACX,CAAC;GACH;EAED,QAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACE,IAAM,EAAA,GAGF,IAAI,CAAC,KAAK;MAFG,IAAI,GAAA,EAAA,CAAA,aAAA;MAChB,SAAS,GAAA,MAAA,CAAA,EAAA,EAFR,CAAA,eAAA,CAGL,CAAa;IACN,IAAA,GAAG,GAAK,IAAI,CAAC,KAAK,CAAA,GAAf;IAEX,OACEH,aAAAA,CAAC,MAAM,EAAA,IAAA,EACLA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,MAAM;MAAC,KAAK,EAAE;IAAC,CAAA,CAAI,EAChCA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,iBAAiB;MAAC,KAAK,EAAE;IAAC,CAAA,CAAI,EAC3CA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,SAAS;MAAC,KAAK,EAAE;IAAG,CAAA,CAAI,EACrCA,aAAAA,CAAC,eAAe,EAAA,QAAA,CAAA,CAAA,CAAA,EAAK,SAAS,CAAA,CAAI,EAElCA,aAAAA,CAAC,QAAQ,EAAA;MAAC,IAAI,EAAC;IAAM,CAAA,EACnBA,aAAAA,CAAC,IAAI,EAAA;MAAC,OAAO,EAAE,IAAI,CAAC;IAAO,CAAA,EACzBA,aAAAA,CAAC,mBAAmB,EAAA;MAAC,IAAI,EAAC;IAAQ,CAAA,CAAG,EACrCA,aAAAA,CAAC,mBAAmB,EAAA;MAAC,IAAI,EAAC;IAAM,CAAA,CAAG,EACnCA,aAAAA,CAAC,mBAAmB,EAAA;MAAC,IAAI,EAAC;IAAQ,CAAA,CAAG,CAChC,CACE,CACJ;GAEZ;EACH,OAAA,QAAC;AAAD,CAAC,CAzC6BE,aAAmB,CAAA;ACFjD,IAAM,QAAQ,GAAyB,UAAC,EAOvC,EAAA;MANC,IAAI,GAAA,EAAA,CAAA,IAAA;IACJ,OAAO,GAAA,EAAA,CAAA,OAAA;IACP,QAAQ,GAAA,EAAA,CAAA,QAAA;IACR,YAAY,GAAA,EAAA,CAAA,YAAA;IACZ,aAAa,GAAA,EAAA,CAAA,aAAA;IACb,QAAQ,GAAA,EAAA,CAAA,QAAA;EACJ,OACJF,aAAAA,CAAC,UAAU,EAAA,IAAA,EACTA,aAAAA,CAAC,QAAQ,EAAA;IACP,IAAI,EAAE,IAAI;IACV,OAAO,EAAE,OAAO;IAChB,QAAQ,EAAE,QAAQ;IAClB,YAAY,EAAE,YAAY;IAC1B,aAAa,EAAE;EAAa,CAAA,CAC5B,EACD,QAAQ,CACE;AAVT,CAWL;AAED;;;;;;AAMA,IAAa,IAAI,GAAmC,QAAQ;ACvB5D,IAAM,kBAAkB,GAAG,CACzB;EAAE,IAAI,EAAE;AAAuB,CAAE,EACjC;EAAE,IAAI,EAAE;AAAS,CAAE,CACpB;AAED,IAAA,iBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAgCE,SAAAA,CAAAA,iBAAAA,EAAAA,MAAAA,CAAAA;EAY9B,SAAA,iBAAA,CAAY,KAAK,EAAA;IAAjB,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAK,CAAC,IAAA,IAAA;IAEZ,KAAI,CAAC,KAAK,GAAG;MACX,OAAO,EAAE;KACV;IAED,KAAI,CAAC,YAAY,GAAG,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAI,CAAC;IAChD,KAAI,CAAC,UAAU,GAAG,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAI,CAAC;IAC5C,KAAI,CAAC,YAAY,GAAG,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAI,CAAC;;EACjD;EAED,iBAAA,CAAA,SAAA,CAAA,YAAY,GAAZ,UAAa,MAAM,EAAA;IACjB,IAAI,CAAC,MAAM,GAAG,MAAM;GACrB;EAED,iBAAA,CAAA,SAAA,CAAA,YAAY,GAAZ,YAAA;IACU,IAAA,OAAO,GAAK,IAAI,CAAC,KAAK,CAAA,OAAf;IACf,IAAI,CAAC,QAAQ,CAAC;MAAE,OAAO,EAAE,CAAC;IAAO,CAAE,CAAC;GACrC;EAED,iBAAA,CAAA,SAAA,CAAA,UAAU,GAAV,YAAA;IACE,IAAI,CAAC,QAAQ,CAAC;MAAE,OAAO,EAAE;IAAK,CAAE,CAAC;GAClC;EAED,iBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IAAA,IAAA,KAAA,GAAA,IAAA;IACQ,IAAA,EAAA,GAMF,IAAI,CAAC,KAAK;MALM,OAAO,GAAA,EAAA,CAAA,gBAAA;MACL,SAAS,GAAA,EAAA,CAAA,kBAAA;MACd,IAAI,GAAA,EAAA,CAAA,aAAA;MACI,YAAY,GAAA,EAAA,CAAA,qBAAA;MACnC,QAAQ,GAAA,EAAA,CAAA,QACI;IACd,IAAM,UAAU,GAAG,oBAAoB,CAAC,QAAS,CAAC;IAC1C,IAAA,OAAO,GAAK,IAAI,CAAC,KAAK,CAAA,OAAf;IAEf,OACEF,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC,eAAe;MACpB,YAAY,EAAE;IAAkB,CAAA,EAEhCA,aAAAA,CAAC,QAAQ,EAAA;MAAC,IAAI,EAAC;IAAgB,CAAA,EAC7BA,aAAAA,CAAC,mBAAmB,EAAA,IAAA,CAAG,EACvBA,aAAAA,CAAC,iBAAiB,EAAA,IAAA,EACf,UACC,EAAuD,EACvD,EAA0B,EAAA;UADxB,OAAO,GAAA,EAAA,CAAA,OAAA;QAAE,iBAAiB,GAAA,EAAA,CAAA,iBAAA;QAAE,uBAAuB,GAAA,EAAA,CAAA,uBAAA;UACnD,sBAAsB,GAAA,EAAA,CAAA,sBAAA;MACrB,OACHA,aAAAA,CAACI,QAAc,EAAA,IAAA,EACbJ,aAAAA,CAAC,YAAY,EAAA;QACX,SAAS,EAAE,KAAI,CAAC,YAAY;QAC5B,QAAQ,EAAE,KAAI,CAAC,YAAY;QAC3B,UAAU,EAAE,UAAU;QACtB,MAAM,EAAE;MAAO,CAAA,CACf,EACFA,aAAAA,CAAC,OAAO,EAAA;QACN,OAAO,EAAE,OAAO;QAChB,MAAM,EAAE,KAAI,CAAC,MAAM;QACnB,MAAM,EAAE,KAAI,CAAC;MAAU,CAAA,EAEvBA,aAAAA,CAAC,SAAS,EAAA,IAAA,EACP,kBAAkB,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAC5C,GAAG,CAAC,UAAC,IAAI,EAAA;QACA,IAAM,UAAU,GAAK,IAAI,CAAC,MAAM,CAAA,IAAhB;QACxB,IAAM,eAAe,GAAG,uBAAuB,CAAC,UAAU,CAAC;QAC3D,OACEA,aAAAA,CAAC,IAAI,EAAA;UACH,GAAG,EAAE,UAAU;UACf,IAAI,EAAE,IAAI;UACV,QAAQ,EAAE,CAAC,eAAe;UAC1B,QAAQ,EAAE,YAAA;YAAM,OAAA,sBAAsB,CAAC,UAAU,CAAC;UAAA;QAAA,CAAA,CAClD;OAEL,CAAC,CACM,CACJ,CACK;KAClB,CACiB,CACX,CACJ;GAEZ;EA7FM,iBAAA,CAAA,YAAY,GAAG;IACpB,QAAQ,EAAE,CAAA;GACX;EACM,iBAAA,CAAA,UAAU,GAAG;IAClB,gBAAgB,EAAE,SAAS;IAC3B,kBAAkB,EAAE,WAAW;IAC/B,aAAa,EAAE,MAAM;IACrB,qBAAqB,EAAE;GACxB;EAsFH,OAAA,iBAAC;CA/FD,CAAgCE,aAAmB,CAAA;AAiGnD;;;;;AAKA,IAAa,aAAa,GAA4C,iBAAiB;ACvGvF,IAAM,0BAA0B,GAAG,UAAC,gBAAgB,EAAE,YAAY,EAAA;EAAK,OACrE,6BAA6B,CAAC,gBAAgB,EAAE,kBAAkB,EAAE,YAAY,CAAC;AAAA,CAClF;AACD,IAAM,wBAAwB,GAAG,UAC/B,EAA6D,EAAA;MAA3D,OAAO,GAAA,EAAA,CAAA,OAAA;IAAoB,qBAAqB,GAAA,EAAA,CAAA,gBAAA;EAC/C,OAAA,gBAAgB,CAAC,OAAO,EAAE,qBAAqB,CAAC;AAAhD,CAAgD;AAErD,IAAA,kBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAiCA,SAAAA,CAAAA,kBAAAA,EAAAA,MAAAA,CAAAA;EAO/B,SAAA,kBAAA,CAAY,KAAK,EAAA;IAAjB,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAK,CAAC,IAAA,IAAA;IAEZ,KAAI,CAAC,KAAK,GAAG;MACX,OAAO,EAAE,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC;KACjC;IACD,IAAM,WAAW,GAAG,iBAAiB,CACnC,KAAI,EACJ;MACE,OAAO,EAAE,YAAA;QACC,IAAA,eAAe,GAAK,KAAI,CAAC,KAAK,CAAA,eAAf;QACvB,OAAO,eAAe;MACvB;KACF,CACF;IAED,KAAI,CAAC,kBAAkB,GAAG,WAAW,CAAC,iBAAiB,CACpD,IAAI,CAAC,WAAW,EAAE,SAAS,EAAE,kBAAkB,CAAC;;EACpD;;EAGM,kBAAA,CAAA,wBAAwB,GAA/B,UAAgC,SAAS,EAAE,SAAS,EAAA;IAEhD,IAAA,EAAA,GACE,SAAS,CAAA,OADgB;MAA3B,OAAO,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,SAAS,CAAC,OAAO,GAAA,EAAA;IAG7B,OAAO;MACL,OAAO,EAAA;KACR;GACF;EAED,kBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACU,IAAA,OAAO,GAAK,IAAI,CAAC,KAAK,CAAA,OAAf;IACT,IAAA,EAAA,GAA+C,IAAI,CAAC,KAAK;MAAvD,gBAAgB,GAAA,EAAA,CAAA,gBAAA;MAAE,sBAAsB,GAAA,EAAA,CAAA,sBAAe;IAE/D,OACEF,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC;IAAgB,CAAA,EAErBA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,SAAS;MAAC,KAAK,EAAE;IAAO,CAAA,CAAI,EACzCA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,kBAAkB;MAAC,QAAQ,EAAE;IAAwB,CAAA,CAAI,EACtEA,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC,0BAA0B;MAC/B,KAAK,EAAE,0BAA0B,CAAC,gBAAgB,EAAE,sBAAsB;IAAC,CAAA,CAC3E,EACFA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,oBAAoB;MAAC,MAAM,EAAE,IAAI,CAAC;IAAkB,CAAA,CAAI,CAC9D;GAEZ;EAtDM,kBAAA,CAAA,YAAY,GAAG;IACpB,cAAc,EAAE,EAAE;IAClB,sBAAsB,EAAE;GACzB;EAoDH,OAAA,kBAAC;CAxDD,CAAiCE,aAAmB,CAAA;AA0DpD;AACA,IAAa,cAAc,GAA6C,kBAAkB;ACjE1F,IAAMG,oBAAkB,GAAG,CACzB;EAAE,IAAI,EAAE,gBAAgB;EAAE,QAAQ,EAAE;AAAI,CAAE,EAC1C;EAAE,IAAI,EAAE,aAAa;EAAE,QAAQ,EAAE;AAAI,CAAE,CACxC;AAED,IAAM,wBAAwB,GAAG,UAAC,EAAiB,EAAA;MAAf,IAAI,GAAA,EAAA,CAAA,IAAA;EAAgB,OAAA,2BAA2B,CAAC,IAAI,CAAC;AAAjC,CAAiC;AACzF,IAAM,qBAAqB,GAAG,UAAC,EAAiB,EAAA;MAAf,IAAI,GAAA,EAAA,CAAA,IAAA;EAAgB,OAAA,qBAAqB,CAAC,IAAI,CAAC;AAA3B,CAA2B;AAEhF,IAAA,uBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAsCH,SAAAA,CAAAA,uBAAAA,EAAAA,MAAAA,CAAAA;EAAtC,SAAA,uBAAA,GAAA;;EAqCC;EAlCC,uBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACU,IAAA,gBAAgB,GAAK,IAAI,CAAC,KAAK,CAAA,gBAAf;IACxB,IAAM,kBAAkB,GAEpB,UAAA,UAAU,EAAA;MAAI,OAAA,kBAAkB,CAClC,gBAAgB,EAAE,UAAU,CAC7B,CAAC,SAAU;IAAA,CAAA;IAEZ,IAAM,YAAY,GAAG,UAAC,EAMZ,EAAA;UALR,IAAI,GAAA,EAAA,CAAA,IAAA;QACJ,gBAAgB,GAAA,EAAA,CAAA,gBAAA;QAChB,YAAY,GAAA,EAAA,CAAA,YAAA;QACZ,cAAc,GAAA,EAAA,CAAA,cAAA;QACd,gBAAgB,GAAA,EAAA,CAAA,gBAAA;MACH,OAAA,YAAY,CACzB,IAAI,EACJ,gBAAgB,EAChB,YAAY,EACZ,kBAAkB,EAClB,cAAc,EACd,gBAAgB,CACjB;KAAA;IAED,OACEF,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC,qBAAqB;MAC1B,YAAY,EAAEK;IAAkB,CAAA,EAEhCL,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,MAAM;MAAC,QAAQ,EAAE;IAAY,CAAA,CAAI,EAC9CA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,kBAAkB;MAAC,QAAQ,EAAE;IAAwB,CAAA,CAAI,EACtEA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,MAAM;MAAC,QAAQ,EAAE;IAAqB,CAAA,CAAI,CAChD;GAEZ;EACH,OAAA,uBAAC;AAAD,CAAC,CArCqCE,aAAmB,CAAA;AAuCzD,uBAAuB,CAAC,gBAAgB,GAAG,sBAAsB;AAEjE,IAAa,mBAAmB,GAM5B,uBAAuB;AC7C3B,IAAMI,4BAA0B,GAAG,UACjC,gBAAgB,EAAE,YAAY,EAAA;EAC3B,OAAA,6BAA6B,CAAC,gBAAgB,EAAE,gBAAgB,EAAE,YAAY,CAAC;AAAA,CAAA;AAEpF,IAAA,gBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA+BJ,SAAAA,CAAAA,gBAAAA,EAAAA,MAAAA,CAAAA;EAwB7B,SAAA,gBAAA,CAAY,KAAK,EAAA;IAAjB,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAK,CAAC,IAAA,IAAA;IACZ,IAAM,UAAU,GAAG,KAAK,CAAC,UAAU,IAAI,KAAK,CAAC,iBAAiB;IAC9D,IAAM,SAAS,GAAG,KAAK,CAAC,SAAS,IAAI,KAAK,CAAC,gBAAgB;IAC3D,IAAM,aAAa,GAAG,YAAA;MACZ,IAAY,eAAe,GAAK,KAAI,CAAC,KAAK,CAAA,UAAf;MACnC,OAAO,eAAe;KACvB;IACD,IAAM,YAAY,GAAG,YAAA;MACX,IAAW,cAAc,GAAK,KAAI,CAAC,KAAK,CAAA,SAAf;MACjC,OAAO,cAAc;KACtB;IAED,KAAI,CAAC,KAAK,GAAG;MACX,SAAS,EAAA,SAAA;MACT,UAAU,EAAA,UAAA;MACV,aAAa,EAAE,KAAK,CAAC,aAAa,IAAI,KAAK,CAAC,oBAAoB;MAChE,aAAa,EAAE,KAAK,CAAC,aAAa,IAAI,KAAK,CAAC,oBAAoB;MAChE,YAAY,EAAE,KAAK,CAAC,YAAY,IAAI,KAAK,CAAC;KAC3C;IAED,IAAM,WAAW,GAAgB,iBAAiB,CAChD,KAAI,EACJ;MACE,aAAa,EAAE,YAAA;QACL,IAAA,qBAAqB,GAAK,KAAI,CAAC,KAAK,CAAA,qBAAf;QAC7B,OAAO,qBAAqB;OAC7B;MACD,YAAY,EAAE,YAAA;QACJ,IAAA,oBAAoB,GAAK,KAAI,CAAC,KAAK,CAAA,oBAAf;QAC5B,OAAO,oBAAoB;OAC5B;MACD,SAAS,EAAE,YAAA;QACD,IAAA,iBAAiB,GAAK,KAAI,CAAC,KAAK,CAAA,iBAAf;QACzB,OAAO,iBAAiB;OACzB;MACD,UAAU,EAAE,YAAA;QACF,IAAA,kBAAkB,GAAK,KAAI,CAAC,KAAK,CAAA,kBAAf;QAC1B,OAAO,kBAAkB;OAC1B;MACD,aAAa,EAAE,YAAA;QACL,IAAA,qBAAqB,GAAK,KAAI,CAAC,KAAK,CAAA,qBAAf;QAC7B,OAAO,qBAAqB;MAC7B;KACF,CACF;IAED,KAAI,CAAC,aAAa,GAAG,WAAW,CAAC,iBAAiB,CAC/C,IAAI,CAAC,WAAW,EAAE,eAAe,EAAE,aAAa,CAAC;IACpD,KAAI,CAAC,YAAY,GAAG,WAAW,CAAC,iBAAiB,CAC9C,IAAI,CAAC,WAAW,EAAE,eAAe,EAAE,YAAY,CAAC;IAEnD,KAAI,CAAC,cAAc,GAAG,WAAW,CAAC,iBAAiB,CAClD,IAAI,CAAC,WAAW,EAAE,cAAc,EAAE,cAAc,CAAC;IAClD,KAAI,CAAC,aAAa,GAAG,WAAW,CAAC,iBAAiB,CAC/C,IAAI,CAAC,WAAW,EAAE,cAAc,EAAE,aAAa,CAAC;IAEnD,KAAI,CAAC,SAAS,GAAG,WAAW,CAAC,iBAAiB,CAC3C,IAAI,CAAC,WAAW,EAAE,YAAY,EAAE,SAAS,CAAC;IAC7C,KAAI,CAAC,iBAAiB,GAAG,WAAW,CAAC,iBAAiB,CACnD,IAAI,CAAC,WAAW,EAAE,YAAY,EAAE,aAAa,CAAC;IACjD,KAAI,CAAC,iBAAiB,GAAG,UAAC,EAAU,EAAA;UAAR,MAAM,GAAA,EAAA,CAAA,MAAA;MACxB,IAAA,eAAe,GAAK,KAAI,CAAC,KAAK,CAAA,eAAf;MACvB,eAAe,CAAC;QACd,OAAO,EAAE,gBAAgB,CAAC,aAAa,EAAE,EAAE,MAAM;OAClD,CAAC;MACF,KAAI,CAAC,iBAAiB,CAAC;QAAE,MAAM,EAAA;MAAA,CAAE,CAAC;KACnC;IAED,KAAI,CAAC,MAAM,GAAG,WAAW,CAAC,iBAAiB,CACxC,IAAI,CAAC,WAAW,EAAE,WAAW,EAAE,MAAM,CAAC;IACzC,KAAI,CAAC,cAAc,GAAG,WAAW,CAAC,iBAAiB,CAChD,IAAI,CAAC,WAAW,EAAE,WAAW,EAAE,cAAc,CAAC;IACjD,KAAI,CAAC,eAAe,GAAG,WAAW,CAAC,iBAAiB,CACjD,IAAI,CAAC,WAAW,EAAE,WAAW,EAAE,eAAe,CAAC;IAClD,KAAI,CAAC,eAAe,GAAG,UAAC,EAAU,EAAA;UAAR,MAAM,GAAA,EAAA,CAAA,MAAA;MACtB,IAAA,eAAe,GAAK,KAAI,CAAC,KAAK,CAAA,eAAf;MACvB,eAAe,CAAC;QACd,KAAK,EAAE,cAAc,CAAC,YAAY,EAAE,EAAE,MAAM;OAC7C,CAAC;MACF,KAAI,CAAC,eAAe,CAAC;QAAE,MAAM,EAAA;MAAA,CAAE,CAAC;KACjC;IAED,KAAI,CAAC,UAAU,GAAG,WAAW,CAAC,iBAAiB,CAC5C,IAAI,CAAC,WAAW,EAAE,eAAe,EAAE,UAAU,CAAC;IACjD,KAAI,CAAC,iBAAiB,GAAG,WAAW,CAAC,iBAAiB,CACnD,IAAI,CAAC,WAAW,EAAE,eAAe,EAAE,iBAAiB,CAAC;IACxD,KAAI,CAAC,iBAAiB,GAAG,UAAC,EAAU,EAAA;UAAR,MAAM,GAAA,EAAA,CAAA,MAAA;MACxB,IAAA,eAAe,GAAK,KAAI,CAAC,KAAK,CAAA,eAAf;MACvB,eAAe,CAAC;QAAE,OAAO,EAAE;MAAM,CAAE,CAAC;MACpC,KAAI,CAAC,iBAAiB,CAAC;QAAE,MAAM,EAAA;MAAA,CAAE,CAAC;KACnC;;EACF;EAEM,gBAAA,CAAA,wBAAwB,GAA/B,UAAgC,SAAS,EAAE,SAAS,EAAA;IAEhD,IAAA,EAAA,GAKE,SAAS,CAAA,aAL4B;MAAvC,aAAa,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,SAAS,CAAC,aAAa,GAAA,EAAA;MACvC,EAAA,GAIE,SAAS,CAAA,YAJ0B;MAArC,YAAY,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,SAAS,CAAC,YAAY,GAAA,EAAA;MACrC,EAAA,GAGE,SAAS,CAAA,UAHsB;MAAjC,UAAU,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,SAAS,CAAC,UAAU,GAAA,EAAA;MACjC,EAAA,GAEE,SAAS,CAAA,SAFoB;MAA/B,SAAS,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,SAAS,CAAC,SAAS,GAAA,EAAA;MAC/B,EAAA,GACE,SAAS,CAAA,aAD4B;MAAvC,aAAa,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,SAAS,CAAC,aAAa,GAAA,EAAA;IAGzC,OAAO;MACL,aAAa,EAAA,aAAA;MACb,YAAY,EAAA,YAAA;MACZ,UAAU,EAAA,UAAA;MACV,SAAS,EAAA,SAAA;MACT,aAAa,EAAA;KACd;GACF;EAED,gBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACQ,IAAA,EAAA,GAA8D,IAAI,CAAC,KAAK;MAAtE,eAAe,GAAA,EAAA,CAAA,eAAA;MAAE,gBAAgB,GAAA,EAAA,CAAA,gBAAA;MAAE,oBAAoB,GAAA,EAAA,CAAA,oBAAe;IACxE,IAAA,EAAA,GAEF,IAAI,CAAC,KAAK;MADZ,aAAa,GAAA,EAAA,CAAA,aAAA;MAAE,YAAY,GAAA,EAAA,CAAA,YAAA;MAAE,UAAU,GAAA,EAAA,CAAA,UAAA;MAAE,SAAS,GAAA,EAAA,CAAA,SAAA;MAAE,aAAa,GAAA,EAAA,CAAA,aACrD;IAEd,OACEF,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC;IAAc,CAAA,EAEnBA,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC,iBAAiB;MACtB,KAAK,EAAE,qBAAqB,CAAC,eAAe,EAAE,gBAAgB;IAAC,CAAA,CAC/D,EAEFA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,eAAe;MAAC,KAAK,EAAE;IAAa,CAAA,CAAI,EACrDA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,eAAe;MAAC,MAAM,EAAE,IAAI,CAAC;IAAa,CAAA,CAAI,EAC3DA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,cAAc;MAAC,MAAM,EAAE,IAAI,CAAC;IAAY,CAAA,CAAI,EAEzDA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,cAAc;MAAC,KAAK,EAAE;IAAY,CAAA,CAAI,EACnDA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,gBAAgB;MAAC,MAAM,EAAE,IAAI,CAAC;IAAc,CAAA,CAAI,EAC7DA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,eAAe;MAAC,MAAM,EAAE,IAAI,CAAC;IAAa,CAAA,CAAI,EAE3DA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,YAAY;MAAC,KAAK,EAAE;IAAU,CAAA,CAAI,EAC/CA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,WAAW;MAAC,MAAM,EAAE,IAAI,CAAC;IAAS,CAAA,CAAI,EACnDA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,mBAAmB;MAAC,MAAM,EAAE,IAAI,CAAC;IAAiB,CAAA,CAAI,EACnEA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,mBAAmB;MAAC,MAAM,EAAE,IAAI,CAAC;IAAiB,CAAA,CAAI,EAEnEA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,WAAW;MAAC,KAAK,EAAE;IAAS,CAAA,CAAI,EAC7CA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,QAAQ;MAAC,MAAM,EAAE,IAAI,CAAC;IAAM,CAAA,CAAI,EAC7CA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,gBAAgB;MAAC,MAAM,EAAE,IAAI,CAAC;IAAc,CAAA,CAAI,EAC7DA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,iBAAiB;MAAC,MAAM,EAAE,IAAI,CAAC;IAAe,CAAA,CAAI,EAC/DA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,iBAAiB;MAAC,MAAM,EAAE,IAAI,CAAC;IAAe,CAAA,CAAI,EAE/DA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,eAAe;MAAC,KAAK,EAAE;IAAa,CAAA,CAAI,EACrDA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,YAAY;MAAC,MAAM,EAAE,IAAI,CAAC;IAAU,CAAA,CAAI,EACrDA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,mBAAmB;MAAC,MAAM,EAAE,IAAI,CAAC;IAAiB,CAAA,CAAI,EACnEA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,mBAAmB;MAAC,MAAM,EAAE,IAAI,CAAC;IAAiB,CAAA,CAAI,EAEnEA,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC,wBAAwB;MAC7B,KAAK,EAAEM,4BAA0B,CAAC,gBAAgB,EAAE,oBAAoB;IAAC,CAAA,CACzE,CACK;GAEZ;EApLM,gBAAA,CAAA,YAAY,GAAG;IACpB,oBAAoB,EAAE,IAAI;IAC1B,oBAAoB,EAAE,EAAE;IACxB,mBAAmB,EAAE,EAAE;IACvB,iBAAiB,EAAE,CAAA,CAAE;IACrB,gBAAgB,EAAE,EAAE;IACpB,oBAAoB,EAAE;GACvB;EA8KH,OAAA,gBAAC;CAtLD,CAA+BJ,aAAmB,CAAA;AAwLlD;;;;AAIA,IAAa,YAAY,GAA2C,gBAAgB;AChNpF,IAAA,eAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA8BA,SAAAA,CAAAA,eAAAA,EAAAA,MAAAA,CAAAA;EAQ5B,SAAA,eAAA,CAAY,KAAK,EAAA;IAAjB,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAK,CAAC,IAAA,IAAA;IAEZ,KAAI,CAAC,KAAK,GAAG;MACX,WAAW,EAAE,KAAK,CAAC,WAAW,IAAI,KAAK,CAAC,kBAAkB;MAC1D,QAAQ,EAAE,KAAK,CAAC,QAAQ,KAAK,SAAS,GAAG,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC;KACjE;IAED,IAAM,WAAW,GAAG,iBAAiB,CACnC,KAAI,EACJ;MACE,WAAW,EAAE,YAAA;QACH,IAAA,mBAAmB,GAAK,KAAI,CAAC,KAAK,CAAA,mBAAf;QAC3B,OAAO,mBAAmB;OAC3B;MACD,QAAQ,EAAE,YAAA;QACA,IAAA,gBAAgB,GAAK,KAAI,CAAC,KAAK,CAAA,gBAAf;QACxB,OAAO,gBAAgB;MACxB;KACF,CACF;IAED,KAAI,CAAC,cAAc,GAAG,WAAW,CAAC,iBAAiB,CAChD,IAAI,CAAC,WAAW,EAAE,aAAa,EAAE,cAAc,CAAC;IACnD,KAAI,CAAC,WAAW,GAAG,WAAW,CAAC,iBAAiB,CAC7C,IAAI,CAAC,WAAW,EAAE,UAAU,EAAE,WAAW,CAAC;;EAC9C;EAEM,eAAA,CAAA,wBAAwB,GAA/B,UAAgC,SAAS,EAAE,SAAS,EAAA;IAEhD,IAAA,EAAA,GAEE,SAAS,CAAA,WAFwB;MAAnC,WAAW,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,SAAS,CAAC,WAAW,GAAA,EAAA;MACnC,EAAA,GACE,SAAS,CAAA,QADkB;MAA7B,QAAQ,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,SAAS,CAAC,QAAQ,GAAA,EAAA;IAG/B,OAAO;MACL,WAAW,EAAA,WAAA;MACX,QAAQ,EAAA;KACT;GACF;EAED,eAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACQ,IAAA,EAAA,GAA4B,IAAI,CAAC,KAAK;MAApC,QAAQ,GAAA,EAAA,CAAA,QAAA;MAAE,WAAW,GAAA,EAAA,CAAA,WAAe;IAE5C,OACEF,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC;IAAa,CAAA,EAElBA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,aAAa;MAAC,KAAK,EAAE;IAAW,CAAA,CAAI,EACjDA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,UAAU;MAAC,KAAK,EAAE;IAAQ,CAAA,CAAI,EAC3CA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,gBAAgB;MAAC,MAAM,EAAE,IAAI,CAAC;IAAc,CAAA,CAAI,EAC7DA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,aAAa;MAAC,MAAM,EAAE,IAAI,CAAC;IAAW,CAAA,CAAI,CAChD;GAEZ;EA5DM,eAAA,CAAA,YAAY,GAAG;IACpB,eAAe,EAAE,EAAE;IACnB,kBAAkB,EAAE;GACrB;EA0DH,OAAA,eAAC;CA9DD,CAA8BE,aAAmB,CAAA;AAgEjD;;;;;AAKA,IAAa,WAAW,GAA0C,eAAe;ACrEjF,IAAMG,oBAAkB,GAAG,CACzB;EAAE,IAAI,EAAE;AAAa,CAAE,CACxB;AAED,IAAM,uBAAuB,GAAG,UAC9B,EAA2C,EAAA;MAAzC,IAAI,GAAA,EAAA,CAAA,IAAA;IAAE,QAAQ,GAAA,EAAA,CAAA,QAAA;IAAE,cAAc,GAAA,EAAA,CAAA,cAAA;EAC7B,OAAA,mBAAmB,CAAC,IAAI,EAAE,QAAQ,EAAE,cAAc,CAAC;AAAnD,CAAmD;AACxD,IAAM,kBAAkB,GAAG,UAAC,EAAiB,EAAA;MAAf,IAAI,GAAA,EAAA,CAAA,IAAA;EAAgB,OAAA,QAAQ,CAAC,IAAI,CAAC;AAAd,CAAc;AAChE,IAAM,qBAAqB,GAAG,UAC5B,EAA8C,EAAA;MAA5C,IAAI,GAAA,EAAA,CAAA,IAAA;IAAE,QAAQ,GAAA,EAAA,CAAA,QAAA;IAAe,IAAI,GAAA,EAAA,CAAA,WAAA;EAChC,OAAA,aAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC;AAAnC,CAAmC;AACxC,IAAM,mBAAmB,GAAG,UAC1B,EAAoD,EAAE,EAA2B,EAAA;MAAlE,IAAI,GAAA,EAAA,CAAA,WAAA;IAAE,UAAU,GAAA,EAAA,CAAA,UAAA;IAAE,QAAQ,GAAA,EAAA,CAAA,QAAA;MAAe,cAAc,GAAA,EAAA,CAAA,cAAA;EACnE,OAAA,WAAW,CAAC,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,cAAc,CAAC;AAAvD,CAAuD;AAE5D;AACA,IAAA,oBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAmCH,SAAAA,CAAAA,oBAAAA,EAAAA,MAAAA,CAAAA;EAAnC,SAAA,oBAAA,GAAA;;EAcC;EAbC,oBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACE,OACEF,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC,kBAAkB;MACvB,YAAY,EAAEK;IAAkB,CAAA,EAEhCL,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,MAAM;MAAC,QAAQ,EAAE;IAAuB,CAAA,CAAI,EACzDA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,YAAY;MAAC,QAAQ,EAAE;IAAkB,CAAA,CAAI,EAC1DA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,aAAa;MAAC,QAAQ,EAAE;IAAmB,CAAA,CAAI,EAC5DA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,MAAM;MAAC,QAAQ,EAAE;IAAqB,CAAA,CAAI,CAChD;GAEZ;EACH,OAAA,oBAAC;AAAD,CAAC,CAdkCE,aAAmB,CAAA;AAgBtD;;;;AAIA,IAAa,gBAAgB,GAA+C,oBAAoB;ACvChG,IAAMG,oBAAkB,GAAG,CACzB;EAAE,IAAI,EAAE;AAAa,CAAE,CACxB;AAED,IAAA,gBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA+BH,SAAAA,CAAAA,gBAAAA,EAAAA,MAAAA,CAAAA;EAA/B,SAAA,gBAAA,GAAA;;EAiBC;EAZC,gBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACU,IAAA,UAAU,GAAK,IAAI,CAAC,KAAK,CAAA,UAAf;IAElB,OACEF,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC,cAAc;MACnB,YAAY,EAAEK;IAAkB,CAAA,EAEhCL,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,YAAY;MAAC,KAAK,EAAE;IAAU,CAAA,CAAI,CACxC;GAEZ;EAfM,gBAAA,CAAA,YAAY,GAAG;IACpB,UAAU,EAAE;GACb;EAcH,OAAA,gBAAC;CAjBD,CAA+BE,aAAmB,CAAA;AAmBlD;AACA,IAAa,YAAY,GAA2C,gBAAgB;ACXpF,IAAM,YAAY,GAAG,CACnB;EAAE,IAAI,EAAE,cAAc;EAAE,QAAQ,EAAE;AAAI,CAAE,CACzC;AAED,IAAMI,4BAA0B,GAAG,UACjC,gBAAgB,EAAE,YAAY,EAAA;EAC3B,OAAA,6BAA6B,CAAC,gBAAgB,EAAE,iBAAiB,EAAE,YAAY,CAAC;AAAA,CAAA;AAErF,IAAA,iBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAgCJ,SAAAA,CAAAA,iBAAAA,EAAAA,MAAAA,CAAAA;EAW9B,SAAA,iBAAA,CAAY,KAAK,EAAA;IAAjB,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAK,CAAC,IAAA,IAAA;IAEZ,KAAI,CAAC,KAAK,GAAG;MACX,QAAQ,EAAE,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC,eAAe;MACjD,aAAa,EAAE,IAAI;MACnB,cAAc,EAAE,KAAK,CAAC,cAAc,IAAI,KAAK,CAAC;KAC/C;IAED,KAAI,CAAC,WAAW,GAAG,iBAAiB,CAClC,KAAI,EACJ;MACE,QAAQ,EAAE,YAAA;QACA,IAAA,gBAAgB,GAAK,KAAI,CAAC,KAAK,CAAA,gBAAf;QACxB,OAAO,gBAAgB;OACxB;MACD,cAAc,EAAE,YAAA;QACN,IAAA,sBAAsB,GAAK,KAAI,CAAC,KAAK,CAAA,sBAAf;QAC9B,OAAO,sBAAsB;MAC9B;KACF,CACF;IAED,KAAI,CAAC,oBAAoB,GAAG,KAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,KAAI,CAAC;IAChE,KAAI,CAAC,mBAAmB,GAAG,KAAI,CAAC,WAAW,CAAC,YAAY,CACrD,IAAI,CAAC,KAAI,CAAC,WAAW,EAAE,oBAAoB,CAAC;IAC/C,KAAI,CAAC,mBAAmB,GAAG,KAAI,CAAC,WAAW,CAAC,YAAY,CACrD,IAAI,CAAC,KAAI,CAAC,WAAW,EAAE,mBAAmB,CAAC;IAC9C,KAAI,CAAC,yBAAyB,GAAG,KAAI,CAAC,WAAW,CAAC,YAAY,CAC3D,IAAI,CAAC,KAAI,CAAC,WAAW,EAAE,yBAAyB,CAAC;IACpD,KAAI,CAAC,mBAAmB,GAAG,KAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAI,CAAC;;EAC/D;EAEM,iBAAA,CAAA,wBAAwB,GAA/B,UAAgC,SAAS,EAAE,SAAS,EAAA;IAEhD,IAAA,EAAA,GAEE,SAAS,CAAA,QAFkB;MAA7B,QAAQ,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,SAAS,CAAC,QAAQ,GAAA,EAAA;MAC7B,EAAA,GACE,SAAS,CAAA,cAD8B;MAAzC,cAAc,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,SAAS,CAAC,cAAc,GAAA,EAAA;IAG3C,OAAO;MACL,QAAQ,EAAA,QAAA;MACR,cAAc,EAAA;KACf;GACF;EAED,iBAAA,CAAA,SAAA,CAAA,mBAAmB,GAAnB,UACE,EAA8D,EAC9D,EAAoB,EACpB,EAAgC,EAAA;QAD9B,OAAO,GAAA,EAAA,CAAA,OAAA;QACP,mBAAmB,GAAA,EAAA,CAAA,mBAAA;IAFnB,IAAA,UAAU,GAAA,EAAA,CAAA,UAAA;MAAE,SAAS,GAAA,EAAA,CAAA,SAAA;MAAK,UAAU,GAAA,MAAA,CAAA,EAAA,EAAtC,CAAA,YAAA,EAAA,WAAA,CAAwC,CAAF;IAI9B,IAAA,QAAQ,GAAK,IAAI,CAAC,KAAK,CAAA,QAAf;IAChB,IAAM,aAAa,GAAG,QAAQ,CAC3B,SAAS,CAAC,UAAA,cAAc,EAAA;MAAI,OAAA,cAAc,CAAC,UAAU,KAAK,UAAU;IAAA,CAAA,CAAC;IACxE,IAAI,aAAa,KAAK,CAAC,CAAC,EAAE;MACxB,mBAAmB,CAAA,QAAA,CAAA;QACjB,UAAU,EAAA,UAAA;QACV,SAAS,EAAE,SAAS,IAAI,QAAQ,CAAC,GAAG,CAAC,UAAA,cAAc,EAAA;UAAI,OAAA,cAAc,CAAC,UAAU;QAAA,CAAA;MAAC,CAAA,EAC9E,UAAU,CAAA,CACb;MACF,OAAO,KAAK;IACb;IAED,IAAM,SAAS,GAAG,eAAe,CAAC,aAAa,EAAE,QAAQ,EAAE,OAAO,CAAC;IACnE,mBAAmB,CAAA,QAAA,CAAA;MACjB,UAAU,EAAA,UAAA;MACV,SAAS,EAAA,SAAA;MACT,SAAS,EAAE;IAAI,CAAA,EACZ,UAAU,CAAA,CACb;IACF,OAAO,KAAK;GACb;EAED,iBAAA,CAAA,SAAA,CAAA,oBAAoB,GAApB,UACE,EAAiD,EACjD,OAAiB,EACjB,OAAiB,EAAA;QAFf,UAAU,GAAA,EAAA,CAAA,UAAA;MAAE,UAAU,GAAA,EAAA,CAAA,UAAA;IAIxB,IAAI,CAAC,WAAW,CAAC,YAAY,CAC3B,oBAAoB,EACpB;MAAE,UAAU,EAAA,UAAA;MAAE,UAAU,EAAA;IAAA,CAAE,EAC1B,UAAC,SAAS,EAAE,KAAK,EAAA;MACP,IAAA,QAAQ,GAAK,SAAS,CAAA,QAAd;MACR,IAAU,YAAY,GAAK,KAAK,CAAA,QAAV;MACtB,IAAA,OAAO,GAAK,OAAQ,CAAA,OAAb;MACP,IAAA,mBAAmB,GAAK,OAAQ,CAAA,mBAAb;MAE3B,IAAI,CAAC,OAAO,EAAE;MAEd,IAAM,kBAAkB,GAAG,OAAO,CAC/B,SAAS,CAAC,UAAA,aAAa,EAAA;QAAI,OAAA,aAAa,CAAC,UAAU,KAAK,UAAU;MAAA,CAAA,CAAC;MACtE,IAAM,iBAAiB,GAAG,YAAY,CACnC,SAAS,CAAC,UAAA,cAAc,EAAA;QAAI,OAAA,cAAc,CAAC,UAAU,KAAK,UAAU;MAAA,CAAA,CAAC;MACxE,IAAM,aAAa,GAAG,QAAQ,CAC3B,SAAS,CAAC,UAAA,cAAc,EAAA;QAAI,OAAA,cAAc,CAAC,UAAU,KAAK,UAAU;MAAA,CAAA,CAAC;MAExE,IAAI,kBAAkB,KAAK,CAAC,CAAC,IACvB,iBAAiB,KAAK,YAAY,CAAC,MAAM,GAAG,CAAC,IAAI,aAAa,KAAK,CAAC,CAAE,EAAE;MAE9E,IAAM,SAAS,GAAG,eAAe,CAC/B,aAAa,KAAK,CAAC,CAAC,GAAG,QAAQ,CAAC,MAAM,GAAG,aAAa,EACtD,QAAQ,EACR,OAAO,CACR;MAED,IAAI,kBAAkB,KAAK,SAAS,EAAE;MAEtC,mBAAmB,CAAA,QAAA,CAAA;QACjB,SAAS,EAAA,SAAA;QACT,SAAS,EAAE;MAAI,CAAA,EACZ,OAAO,CAAC,kBAAkB,CAAC,CAAA,CAC9B;KACH,CACF;GACF;EAED,iBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACQ,IAAA,EAAA,GAA8C,IAAI,CAAC,KAAK;MAAtD,QAAQ,GAAA,EAAA,CAAA,QAAA;MAAE,aAAa,GAAA,EAAA,CAAA,aAAA;MAAE,cAAc,GAAA,EAAA,CAAA,cAAe;IACxD,IAAA,EAAA,GAA8C,IAAI,CAAC,KAAK;MAAtD,gBAAgB,GAAA,EAAA,CAAA,gBAAA;MAAE,qBAAqB,GAAA,EAAA,CAAA,qBAAe;IAE9D,OACEF,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC,eAAe;MACpB,YAAY,EAAE;IAAY,CAAA,EAE1BA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,UAAU;MAAC,KAAK,EAAE;IAAQ,CAAA,CAAI,EAC3CA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,eAAe;MAAC,KAAK,EAAE,aAAa,IAAI;IAAQ,CAAA,CAAI,EACjEA,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC,yBAAyB;MAC9B,KAAK,EAAEM,4BAA0B,CAAC,gBAAgB,EAAE,qBAAqB;IAAC,CAAA,CAC1E,EACFN,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,sBAAsB;MAAC,MAAM,EAAE,IAAI,CAAC;IAAoB,CAAA,CAAI,EACzEA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,qBAAqB;MAAC,MAAM,EAAE,IAAI,CAAC;IAAmB,CAAA,CAAI,EACvEA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,2BAA2B;MAAC,MAAM,EAAE,IAAI,CAAC;IAAyB,CAAA,CAAI,EAEnFA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,gBAAgB;MAAC,KAAK,EAAE;IAAc,CAAA,CAAI,EACvDA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,qBAAqB;MAAC,MAAM,EAAE,IAAI,CAAC;IAAmB,CAAA,CAAI,EAEvEA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,qBAAqB;MAAC,MAAM,EAAE,IAAI,CAAC;IAAmB,CAAA,CAAI,CAChE;GAEZ;EAtJM,iBAAA,CAAA,YAAY,GAAG;IACpB,eAAe,EAAE,EAAE;IACnB,qBAAqB,EAAE,EAAE;IACzB,qBAAqB,EAAE;GACxB;EAmJH,OAAA,iBAAC;CAxJD,CAAgCE,aAAmB,CAAA;AA0JnD;;;;AAIA,IAAa,aAAa,GAA4C,iBAAiB;AC3KvF,IAAMG,oBAAkB,GAAG,CACzB;EAAE,IAAI,EAAE;AAAe,CAAE,CAC1B;AAED,IAAME,0BAAwB,GAAG,UAC/B,EAA6B,EAAA;MAA3B,gBAAgB,GAAA,EAAA,CAAA,gBAAA;EACf,OAAA,wBAAwB,CAAC,gBAAgB,CAAC;AAA1C,CAA0C;AAC/C,IAAM,2BAA2B,GAAG,UAClC,EAAwD,EAAA;MAAtD,IAAI,GAAA,EAAA,CAAA,IAAA;IAAE,QAAQ,GAAA,EAAA,CAAA,QAAA;IAAE,cAAc,GAAA,EAAA,CAAA,cAAA;IAAE,WAAW,GAAA,EAAA,CAAA,WAAA;EAC1C,OAAA,iBAAiB,CAAC,IAAI,EAAE,QAAQ,EAAE,cAAc,EAAE,WAAW,CAAC;AAA9D,CAA8D;AAEnE,IAAA,sBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAqCL,SAAAA,CAAAA,sBAAAA,EAAAA,MAAAA,CAAAA;EAArC,SAAA,sBAAA,GAAA;;EAwBC;EAvBC,sBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACU,IAAA,gBAAgB,GAAK,IAAI,CAAC,KAAK,CAAA,gBAAf;IACxB,IAAM,iBAAiB,GAAG,UAAA,UAAU,EAAA;MAAI,OAAC,kBAAkB,CACzD,gBAAgB,EAAE,UAAU,CACrB,CAAC,QAAQ;IAAA,CAAA;IAElB,IAAM,mBAAmB,GAAG,UAC1B,EAAyC,EAAA;UAAvC,IAAI,GAAA,EAAA,CAAA,IAAA;QAAE,QAAQ,GAAA,EAAA,CAAA,QAAA;QAAE,YAAY,GAAA,EAAA,CAAA,YAAA;MAC3B,OAAA,WAAW,CAAC,IAAI,EAAE,QAAQ,EAAE,YAAY,EAAE,iBAAiB,CAAC;KAAA;IAEjE,OACEF,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC,oBAAoB;MACzB,YAAY,EAAEK;IAAkB,CAAA,EAEhCL,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,YAAY;MAAC,KAAK,EAAE;IAAe,CAAA,CAAI,EACpDA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,gBAAgB;MAAC,KAAK,EAAE;IAAsB,CAAA,CAAI,EAC/DA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,kBAAkB;MAAC,QAAQ,EAAEO;IAAwB,CAAA,CAAI,EACtEP,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,MAAM;MAAC,QAAQ,EAAE;IAAmB,CAAA,CAAI,EACrDA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,MAAM;MAAC,QAAQ,EAAE;IAA2B,CAAA,CAAI,CACtD;GAEZ;EACH,OAAA,sBAAC;AAAD,CAAC,CAxBoCE,aAAmB,CAAA;AA0BxD;AACA;IACa,kBAAkB,GAAiD,sBAAsB;AACtG;;ACxCA,IAAMG,oBAAkB,GAAG,CACzB;EAAE,IAAI,EAAE;AAAe,CAAE,CAC1B;AAED,IAAME,0BAAwB,GAAG,UAC/B,EAA6B,EAAA;MAA3B,gBAAgB,GAAA,EAAA,CAAA,gBAAA;EACf,OAAA,wBAAwB,CAAC,gBAAgB,CAAC;AAA1C,CAA0C;AAC/C,IAAMC,6BAA2B,GAAG,UAClC,EAAwD,EAAA;MAAtD,IAAI,GAAA,EAAA,CAAA,IAAA;IAAE,QAAQ,GAAA,EAAA,CAAA,QAAA;IAAE,cAAc,GAAA,EAAA,CAAA,cAAA;IAAE,WAAW,GAAA,EAAA,CAAA,WAAA;EAC1C,OAAA,iBAAiB,CAAC,IAAI,EAAE,QAAQ,EAAE,cAAc,EAAE,WAAW,CAAC;AAA9D,CAA8D;AACnE,IAAM,gBAAgB,GAAG,UAAC,EAA2B,EAAA;MAAzB,QAAQ,GAAA,EAAA,CAAA,QAAA;IAAE,IAAI,GAAA,EAAA,CAAA,IAAA;EAAgB,OAAA,yBAAyB,CAAC,QAAQ,EAAE,IAAI,CAAC;AAAzC,CAAyC;AAEnG,IAAA,kBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAiCN,SAAAA,CAAAA,kBAAAA,EAAAA,MAAAA,CAAAA;EAAjC,SAAA,kBAAA,GAAA;;EA+BC;EA9BC,kBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACQ,IAAA,EAAA,GAIF,IAAI,CAAC,KAAK;MAHZ,cAAc,GAAA,EAAA,CAAA,cAAA;MACJ,eAAe,GAAA,EAAA,CAAA,QAAA;MACT,qBAAqB,GAAA,EAAA,CAAA,cACzB;IACd,IAAM,mBAAmB,GAAG,UAC1B,EAA2B,EAAA;UAAzB,IAAI,GAAA,EAAA,CAAA,IAAA;QAAE,QAAQ,GAAA,EAAA,CAAA,QAAA;MACb,OAAA,iBAAiB,CAAC,IAAI,EAAE,QAAQ,EAAE,cAAc,CAAC;KAAA;IAEtD,OACEF,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC,gBAAgB;MACrB,YAAY,EAAEK;IAAkB,CAAA,EAE/B,eAAe,IACdL,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,UAAU;MAAC,KAAK,EAAE;IAAe,CAAA,CAC/C,EACA,qBAAqB,IACpBA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,gBAAgB;MAAC,KAAK,EAAE;IAAqB,CAAA,CAC3D,EACDA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,YAAY;MAAC,KAAK,EAAE;IAAe,CAAA,CAAI,EACpDA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,gBAAgB;MAAC,KAAK,EAAE;IAAsB,CAAA,CAAI,EAC/DA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,kBAAkB;MAAC,QAAQ,EAAEO;IAAwB,CAAA,CAAI,EACtEP,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,MAAM;MAAC,QAAQ,EAAE;IAAmB,CAAA,CAAI,EACrDA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,UAAU;MAAC,QAAQ,EAAE;IAAgB,CAAA,CAAI,EACtDA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,MAAM;MAAC,QAAQ,EAAEQ;IAA2B,CAAA,CAAI,CACtD;GAEZ;EACH,OAAA,kBAAC;AAAD,CAAC,CA/BgCN,aAAmB,CAAA;AAiCpD;AACA;AACA,IAAa,cAAc,GAA6C,kBAAkB;ACpD1F,IAAA,kBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAiCA,SAAAA,CAAAA,kBAAAA,EAAAA,MAAAA,CAAAA;EAM/B,SAAA,kBAAA,CAAY,KAAK,EAAA;IAAjB,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAK,CAAC,IAAA,IAAA;IAEZ,KAAI,CAAC,KAAK,GAAG;MACX,SAAS,EAAE,KAAK,CAAC,SAAS,IAAI,KAAK,CAAC;KACrC;IAED,IAAM,WAAW,GAAG,iBAAiB,CACnC,KAAI,EACJ;MACE,SAAS,EAAE,YAAA;QACD,IAAA,iBAAiB,GAAK,KAAI,CAAC,KAAK,CAAA,iBAAf;QACzB,OAAO,iBAAiB;MACzB;KACF,CACF;IAED,KAAI,CAAC,eAAe,GAAG,WAAW,CAAC,iBAAiB,CACjD,IAAI,CAAC,WAAW,EAAE,WAAW,EAAE,eAAe,CAAC;;EACnD;EAEM,kBAAA,CAAA,wBAAwB,GAA/B,UAAgC,SAAS,EAAE,SAAS,EAAA;IAEhD,IAAA,EAAA,GACE,SAAS,CAAA,SADoB;MAA/B,SAAS,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,SAAS,CAAC,SAAS,GAAA,EAAA;IAGjC,OAAO;MACL,SAAS,EAAA;KACV;GACF;EAED,kBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACU,IAAA,SAAS,GAAK,IAAI,CAAC,KAAK,CAAA,SAAf;IAEjB,OACEF,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC;IAAgB,CAAA,EAErBA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,WAAW;MAAC,KAAK,EAAE;IAAS,CAAA,CAAI,EAC7CA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,iBAAiB;MAAC,MAAM,EAAE,IAAI,CAAC;IAAe,CAAA,CAAI,CACxD;GAEZ;EA/CM,kBAAA,CAAA,YAAY,GAAG;IACpB,gBAAgB,EAAE;GACnB;EA8CH,OAAA,kBAAC;CAjDD,CAAiCE,aAAmB,CAAA;AAmDpD;AACA,IAAa,cAAc,GAA6C,kBAAkB;ACjD1F,IAAM,iCAAiC,GAAG,UACxC,EAAuC,EAAA;MAArC,IAAI,GAAA,EAAA,CAAA,IAAA;IAAE,QAAQ,GAAA,EAAA,CAAA,QAAA;IAAE,UAAU,GAAA,EAAA,CAAA,UAAA;EACzB,OAAA,yBAAyB,CAAC,IAAI,EAAE,QAAQ,EAAE,UAAU,CAAC;AAArD,CAAqD;AAC1D,IAAM,mBAAmB,GAAG,UAAC,EAA4B,EAAA;MAA1B,IAAI,GAAA,EAAA,CAAA,IAAA;IAAE,SAAS,GAAA,EAAA,CAAA,SAAA;EAAgB,OAAA,WAAW,CAAC,IAAI,EAAE,SAAS,CAAC;AAA5B,CAA4B;AAC1F,IAAM,oBAAoB,GAAG,UAAC,EAA4B,EAAA;MAA1B,IAAI,GAAA,EAAA,CAAA,IAAA;IAAE,SAAS,GAAA,EAAA,CAAA,SAAA;EAAgB,OAAA,YAAY,CAAC,IAAI,EAAE,SAAS,CAAC;AAA7B,CAA6B;AAC5F,IAAM,0BAA0B,GAAG,UACjC,EAAwC,EAAA;MAA9B,iBAAiB,GAAA,EAAA,CAAA,IAAA,CAAA,iBAAA;EACxB,OAAA,CAAC,CAAC,iBAAiB,CAAC,MAAM;AAA1B,CAA0B;AAE/B,IAAM,eAAe,GAAG,UACtB,KAAK,EAAE,EAAwC,EAAE,EAA4B,EAAA;MAA5D,iBAAiB,GAAA,EAAA,CAAA,IAAA,CAAA,iBAAA;MAAiB,eAAe,GAAA,EAAA,CAAA,eAAA;EAElE,eAAe,CAAC;IAAE,KAAK,EAAA,KAAA;IAAE,MAAM,EAAE;EAAiB,CAAE,CAAC;AACvD,CAAC;AACD,IAAM,kBAAkB,GAAG,UAAC,EAAiB,EAAA;MAAf,IAAI,GAAA,EAAA,CAAA,IAAA;EAAgB,OAAA,kBAAkB,CAAC,IAAI,CAAC;AAAxB,CAAwB;AAE1E,IAAMG,oBAAkB,GAAG,CACzB;EAAE,IAAI,EAAE;AAAgB,CAAE,CAC3B;AAED;AACA,IAAA,uBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAsCH,SAAAA,CAAAA,uBAAAA,EAAAA,MAAAA,CAAAA;EAAtC,SAAA,uBAAA,GAAA;;EAgBC;EAfC,uBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACE,OACEF,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC,qBAAqB;MAC1B,YAAY,EAAEK;IAAkB,CAAA,EAEhCL,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,MAAM;MAAC,QAAQ,EAAE;IAAiC,CAAA,CAAI,EACnEA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,aAAa;MAAC,QAAQ,EAAE;IAAmB,CAAA,CAAI,EAC5DA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,cAAc;MAAC,QAAQ,EAAE;IAAoB,CAAA,CAAI,EAC9DA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,oBAAoB;MAAC,QAAQ,EAAE;IAA0B,CAAA,CAAI,EAC1EA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,iBAAiB;MAAC,MAAM,EAAE;IAAe,CAAA,CAAI,EAC1DA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,MAAM;MAAC,QAAQ,EAAE;IAAkB,CAAA,CAAI,CAC7C;GAEZ;EACH,OAAA,uBAAC;AAAD,CAAC,CAhBqCE,aAAmB,CAAA;AAkBzD;AACA;IACa,mBAAmB,GAAkD,uBAAuB;AACzG;;ACvCA,IAAMI,4BAA0B,GAAG,UACjC,gBAAgB,EAAE,YAAY,EAAA;EAC3B,OAAA,6BAA6B,CAAC,gBAAgB,EAAE,gBAAgB,EAAE,YAAY,CAAC;AAAA,CAAA;AAEpF,IAAA,gBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA+BJ,SAAAA,CAAAA,gBAAAA,EAAAA,MAAAA,CAAAA;EAO7B,SAAA,gBAAA,CAAY,KAAK,EAAA;IAAjB,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAK,CAAC,IAAA,IAAA;IAEZ,KAAI,CAAC,KAAK,GAAG;MACX,OAAO,EAAE,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC;KACjC;IAED,IAAM,WAAW,GAAG,iBAAiB,CACnC,KAAI,EACJ;MACE,OAAO,EAAE,YAAA;QACC,IAAA,eAAe,GAAK,KAAI,CAAC,KAAK,CAAA,eAAf;QACvB,OAAO,eAAe;MACvB;KACF,CACF;IAED,KAAI,CAAC,mBAAmB,GAAG,WAAW,CAAC,YAAY,CAChD,IAAI,CAAC,WAAW,EAAE,UAAC,SAAS,EAAE,OAAO,EAAA;MAC5B,IAAA,EAAA,GAAgC,KAAI,CAAC,KAAK,CAAA,OAAf;QAA3B,OAAO,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,SAAS,CAAC,OAAO,GAAA,EAAA;MACnC,IAAM,uBAAuB,GAAG,0BAA0B,CAAC,OAAO,EAAE,KAAK,CAAC,gBAAgB,CAAC;MAC3F,IAAM,SAAS,GAAG,kBAAkB,CAClC,SAAS,CAAC,OAAO,EAAE,OAAO,CAAC,SAAS,EAAE,uBAAuB,CAC9D;MACD,OAAO,mBAAmB,CAAC,SAAS,EAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAO,OAAO,CAAA,EAAA;QAAE,SAAS,EAAA;MAAA,CAAA,CAAA,CAAG;KACjE,CAAC;;EACL;EAEM,gBAAA,CAAA,wBAAwB,GAA/B,UAAgC,SAAS,EAAE,SAAS,EAAA;IAEhD,IAAA,EAAA,GACE,SAAS,CAAA,OADgB;MAA3B,OAAO,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,SAAS,CAAC,OAAO,GAAA,EAAA;IAG7B,OAAO;MACL,OAAO,EAAA;KACR;GACF;EAED,gBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACU,IAAA,OAAO,GAAK,IAAI,CAAC,KAAK,CAAA,OAAf;IACT,IAAA,EAAA,GAA6C,IAAI,CAAC,KAAK;MAArD,gBAAgB,GAAA,EAAA,CAAA,gBAAA;MAAE,oBAAoB,GAAA,EAAA,CAAA,oBAAe;IAE7D,OACEF,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC;IAAc,CAAA,EAEnBA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,SAAS;MAAC,KAAK,EAAE;IAAO,CAAA,CAAI,EACzCA,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC,wBAAwB;MAC7B,KAAK,EAAEM,4BAA0B,CAAC,gBAAgB,EAAE,oBAAoB;IAAC,CAAA,CACzE,EACFN,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,qBAAqB;MAAC,MAAM,EAAE,IAAI,CAAC;IAAmB,CAAA,CAAI,CAChE;GAEZ;EA5DM,gBAAA,CAAA,YAAY,GAAG;IACpB,cAAc,EAAE,EAAE;IAClB,oBAAoB,EAAE;GACvB;EA0DH,OAAA,gBAAC;CA9DD,CAA+BE,aAAmB,CAAA;AAgElD;AACA;AACA,IAAa,YAAY,GAA2C,gBAAgB;AC9EpF,IAAMG,oBAAkB,GAAG,CACzB;EAAE,IAAI,EAAE;AAAc,CAAE,CACzB;AAED,IAAA,qBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAoCH,SAAAA,CAAAA,qBAAAA,EAAAA,MAAAA,CAAAA;EAApC,SAAA,qBAAA,GAAA;;EAoBC;EAnBC,qBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACU,IAAA,gBAAgB,GAAK,IAAI,CAAC,KAAK,CAAA,gBAAf;IACxB,IAAM,gBAAgB,GAAG,UAAA,UAAU,EAAA;MAAI,OACrC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAChD,CAAC,OAAQ;IAAA,CAAA;IAEV,IAAM,YAAY,GAAG,UACnB,EAAoE,EAAA;UAAlE,IAAI,GAAA,EAAA,CAAA,IAAA;QAAE,OAAO,GAAA,EAAA,CAAA,OAAA;QAAE,YAAY,GAAA,EAAA,CAAA,YAAA;QAAE,UAAU,GAAA,EAAA,CAAA,UAAA;QAAE,cAAc,GAAA,EAAA,CAAA,cAAA;MACtD,OAAA,UAAU,CAAC,IAAI,EAAE,OAAO,EAAE,YAAY,EAAE,gBAAgB,EAAE,UAAU,EAAE,cAAc,CAAC;KAAA;IAE1F,OACEF,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC,mBAAmB;MACxB,YAAY,EAAEK;IAAkB,CAAA,EAEhCL,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,MAAM;MAAC,QAAQ,EAAE;IAAY,CAAA,CAAI,CACvC;GAEZ;EACH,OAAA,qBAAC;AAAD,CAAC,CApBmCE,aAAmB,CAAA;AAsBvD;AACA,IAAa,iBAAiB,GAAgD,qBAAqB;ACvBnG,IAAM,gBAAgB,GAAG,UAAC,OAAO,EAAE,OAAO,EAAA;EAAK,OAAA,OAAO,CACnD,MAAM,CAAC,UAAA,IAAI,EAAA;IAAI,OAAA,IAAI,CAAC,IAAI,KAAK,QAAQ;EAAA,CAAA,CAAC,CACtC,GAAG,CAAC,UAAA,IAAI,EAAA;IAAI,OAAA,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,EAAA;MAAI,OAAA,MAAM,CAAC,IAAI,KAAK,IAAI,CAAC,UAAU;IAAA,CAAA,CAAC;EAAA,CAAA,CAAC;AAAA,CAAA;AAEvE;AACA,IAAA,oBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAmCA,SAAAA,CAAAA,oBAAAA,EAAAA,MAAAA,CAAAA;EAQjC,SAAA,oBAAA,CAAY,KAAK,EAAA;IAAjB,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAK,CAAC,IAAA,IAAA;IAEZ,KAAI,CAAC,KAAK,GAAG;MACX,OAAO,EAAE,IAAI;MACb,YAAY,EAAE;KACf;IAED,KAAI,CAAC,MAAM,GAAG,UAAC,EAAyB,EAAA;UAAvB,OAAO,GAAA,EAAA,CAAA,OAAA;QAAE,YAAY,GAAA,EAAA,CAAA,YAAA;MAAO,OAAA,KAAI,CAAC,QAAQ,CAAC;QAAE,OAAO,EAAA,OAAA;QAAE,YAAY,EAAA;MAAA,CAAE,CAAC;KAAA;;EACtF;EAED,oBAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjB,YAAA;IACE,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,IAAI;GAC7B;EAED,oBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IAAA,IAAA,KAAA,GAAA,IAAA;IACQ,IAAA,EAAA,GAGF,IAAI,CAAC,KAAK;MAFQ,SAAS,GAAA,EAAA,CAAA,kBAAA;MACZ,MAAM,GAAA,EAAA,CAAA,eACX;IACR,IAAA,EAAA,GAGF,IAAI,CAAC,KAAK;MAFZ,OAAO,GAAA,EAAA,CAAA,OAAA;MACP,YAAY,GAAA,EAAA,CAAA,YACA;IAEd,OACEF,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC;IAAkB,CAAA,EAEvBA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,iBAAiB;MAAC,KAAK,EAAA;IAAA,CAAA,CAAG,EACvCA,aAAAA,CAAC,QAAQ,EAAA;MAAC,IAAI,EAAC;IAAM,CAAA,EACnBA,aAAAA,CAACS,kBAAoB,EAAA;MACnB,QAAQ,EAAE,IAAI,CAAC;IAAM,CAAA,EAErBT,aAAAA,CAAC,mBAAmB,EAAA,IAAA,CAAG,CACF,EACtB,OAAO,IACNA,aAAAA,CAAC,iBAAiB,EAAA,IAAA,EACf,UAAC,EAAW,EAAA;UAAT,OAAO,GAAA,EAAA,CAAA,OAAA;MAAO,OAChB,YAAY,CACVA,aAAAA,CAAC,SAAS,EAAA;QACR,YAAY,EAAE;MAAa,CAAA,EAE1B,gBAAgB,CAAC,OAAO,EAAE,OAAO,CAAC,CAChC,GAAG,CAAC,UAAA,MAAM,EAAA;QAAI,OACbA,aAAAA,CAAC,MAAM,EAAA;UACL,GAAG,EAAE,MAAM,CAAC,IAAI;UAChB,MAAM,EAAE;QAAM,CAAA,CACd;MAAA,CACH,CAAC,CAEM,EACZ,KAAI,CAAC,OAAO,CACb;KACF,CAEJ,CACQ,CACJ;GAEZ;EAnEM,oBAAA,CAAA,UAAU,GAAG;IAClB,kBAAkB,EAAE,WAAW;IAC/B,eAAe,EAAE;GAClB;EAiEH,OAAA,oBAAC;CArED,CAAmCE,aAAmB,CAAA;AAuEtD;AACA;AACA,IAAa,gBAAgB,GAA+C,oBAAoB;AC5DhG,IAAMG,oBAAkB,GAAG,CACzB;EAAE,IAAI,EAAE;AAAO,CAAE,EACjB;EAAE,IAAI,EAAE,kBAAkB;EAAE,QAAQ,EAAE;AAAI,CAAE,CAC7C;AAED,IAAM,uBAAuB,GAAG,UAC9B,EAA4B,EAAA;MAA1B,eAAe,GAAA,EAAA,CAAA,eAAA;EACd,OAAA,6BAA6B,CAAC,eAAe,CAAC;AAA9C,CAA8C;AAEnD;AACA,IAAA,wBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAuCH,SAAAA,CAAAA,wBAAAA,EAAAA,MAAAA,CAAAA;EAerC,SAAA,wBAAA,CAAY,KAAK,EAAA;IAAjB,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAK,CAAC,IAAA,IAAA;IAPd,KAAA,CAAA,oBAAoB,GAAgD,CAAA,CAAE;IACtE,KAAA,CAAA,cAAc,GAA2B,EAAE;IAQzC,KAAI,CAAC,KAAK,GAAG;MACX,KAAK,EAAE,KAAK,CAAC,YAAY;MACzB,iBAAiB,EAAE,CAAC,CAAC;MACrB,iBAAiB,EAAE,CAAC;KACrB;IAED,KAAI,CAAC,MAAM,GAAG,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAI,CAAC;IACxC,KAAI,CAAC,OAAO,GAAG,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAI,CAAC;IAC1C,KAAI,CAAC,MAAM,GAAG,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAI,CAAC;;EACzC;EAED,wBAAA,CAAA,SAAA,CAAA,QAAQ,GAAR,YAAA;IACU,IAAO,UAAU,GAAK,IAAI,CAAC,KAAK,CAAA,KAAf;IAEvB,IAAA,EAAA,GACE,IAAI,CAAC,KAAK,CAAA,KADM;MAAlB,KAAK,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,UAAU,GAAA,EAAA;IAEpB,OAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACK,IAAI,CAAC,KAAK,CAAA,EAAA;MACb,KAAK,EAAA;IAAA,CAAA,CAAA;GAER;EAED,wBAAA,CAAA,SAAA,CAAA,aAAa,GAAb,YAAA;IACQ,IAAA,EAAA,GAAkD,IAAI,CAAC,QAAQ,EAAE;MAA/D,KAAK,GAAA,EAAA,CAAA,KAAA;MAAE,iBAAiB,GAAA,EAAA,CAAA,iBAAA;MAAE,iBAAiB,GAAA,EAAA,CAAA,iBAAoB;IACvE,OAAOQ,UAAkB,CAAC,KAAK,EAAE,iBAAiB,EAAE,iBAAiB,CAAC;GACvE;EAED,wBAAA,CAAA,SAAA,CAAA,mBAAmB,GAAnB,YAAA;IAAA,IAAA,KAAA,GAAA,IAAA;IACE,OAAO,IAAI,CAAC,aAAa,EAAE,CACxB,MAAM,CAAC,UAAA,UAAU,EAAA;MAAI,OAAA,CAAC,CAAC,KAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC;IAAA,CAAA,CAAC;GACjE;EAED,wBAAA,CAAA,SAAA,CAAA,mBAAmB,GAAnB,YAAA;IAAA,IAAA,KAAA,GAAA,IAAA;IACE,IAAI,CAAC,cAAc,GAAI,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,GACpE,IAAI,CAAC,cAAc,GACnB,IAAI,CAAC,mBAAmB,EAAE,CACzB,GAAG,CAAC,UAAA,UAAU,EAAA;MAAI,OAAA,KAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,EAAE;IAAA,CAAA,CAAC;GAChE;EAED,wBAAA,CAAA,SAAA,CAAA,mBAAmB,GAAnB,YAAA;IACE,IAAI,CAAC,cAAc,GAAG,EAAE;GACzB;EAED,wBAAA,CAAA,SAAA,CAAA,0BAA0B,GAA1B,UAA2B,YAAwC,EAAA;IAAnE,IAAA,KAAA,GAAA,IAAA;IACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,CACnC,OAAO,CAAC,UAAC,UAAU,EAAA;MAClB,IAAM,WAAW,GAAG,YAAY,CAC7B,SAAS,CAAC,UAAC,EAAgB,EAAA;YAAd,IAAI,GAAA,EAAA,CAAA,IAAA;UAAE,MAAM,GAAA,EAAA,CAAA,MAAA;QAAO,OAAA,IAAI,KAAK,eAAe,IAAI,MAAO,CAAC,IAAI,KAAK,UAAU;OAAA,CAAC;MAC3F,IAAI,WAAW,KAAK,CAAC,CAAC,EAAE;QACtB,OAAO,KAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC;MAC7C;KACF,CAAC;GACL;;EAGD,wBAAA,CAAA,SAAA,CAAA,yBAAyB,GAAzB,UAA0B,WAAkC,EAAE,MAA4B,EAAE,YAAwC,EAAA;IAClI,IAAI,WAAW,CAAC,IAAI,KAAK,eAAe,EAAE;MACxC,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,MAAO,CAAC,IAAI,CAAC,GAAG,MAAM;IAC7D;IACD,IAAI,CAAC,0BAA0B,CAAC,YAAY,CAAC;GAC9C;EAED,wBAAA,CAAA,SAAA,CAAA,UAAU,GAAV,UAAW,EAA8C,EAAA;QAA5C,OAAO,GAAA,EAAA,CAAA,OAAA;MAAkB,CAAC,GAAA,EAAA,CAAA,YAAA,CAAA,CAAA;IACrC,IAAM,gBAAgB,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,UAAU;IAC9C,IAAM,gBAAgB,GAAG,IAAI,CAAC,mBAAmB,EAAE;IACnD,IAAM,yBAAyB,GAAG,gBAAgB,CAAC,OAAO,CAAC,gBAAgB,CAAC;IAE5E,IAAI,yBAAyB,KAAK,CAAC,CAAC,EAAE;IAEtC,IAAI,CAAC,mBAAmB,EAAE;IAC1B,IAAM,cAAc,GAAG,IAAI,CAAC,cAAc;IAE1C,IAAM,mBAAmB,GAAG,yBAAyB,CAAC,cAAc,EAAE,CAAC,CAAC;IAExE,IAAI,mBAAmB,KAAK,CAAC,CAAC,EAAE;IAE1B,IAAA,EAAA,GAGF,IAAI,CAAC,QAAQ,EAAE;MAFE,qBAAqB,GAAA,EAAA,CAAA,iBAAA;MACrB,qBAAqB,GAAA,EAAA,CAAA,iBACvB;IACnB,IAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE;IACvC,IAAM,iBAAiB,GAAG,UAAU,CAAC,OAAO,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,CAAC;IAEnF,IAAI,iBAAiB,KAAK,qBAAqB,EAAE;IAEjD,IAAM,iBAAiB,GAAG,qBAAqB,KAAK,CAAC,CAAC,GAClD,UAAU,CAAC,OAAO,CAAC,gBAAgB,CAAC,GACpC,qBAAqB;IAEzB,IAAI,CAAC,QAAQ,CAAC;MACZ,iBAAiB,EAAA,iBAAA;MACjB,iBAAiB,EAAA;KAClB,CAAC;GACH;EAED,wBAAA,CAAA,SAAA,CAAA,WAAW,GAAX,YAAA;IACE,IAAI,CAAC,QAAQ,CAAC;MACZ,iBAAiB,EAAE,CAAC,CAAC;MACrB,iBAAiB,EAAE,CAAC;KACrB,CAAC;IAEF,IAAI,CAAC,mBAAmB,EAAE;GAC3B;EAED,wBAAA,CAAA,SAAA,CAAA,UAAU,GAAV,YAAA;IACQ,IAAA,EAAA,GAAkD,IAAI,CAAC,QAAQ,EAAE;MAA/D,iBAAiB,GAAA,EAAA,CAAA,iBAAA;MAAE,iBAAiB,GAAA,EAAA,CAAA,iBAAA;MAAE,KAAK,GAAA,EAAA,CAAA,KAAoB;IAC/D,IAAA,aAAa,GAAK,IAAI,CAAC,KAAK,CAAA,aAAf;IAErB,IAAI,iBAAiB,KAAK,CAAC,CAAC,IAAI,iBAAiB,KAAK,CAAC,CAAC,EAAE;IAE1D,IAAM,SAAS,GAAG,iBAAiB,CAAC,KAAK,EAAE;MACzC,gBAAgB,EAAE,KAAK,CAAC,iBAAiB,CAAC;MAC1C,gBAAgB,EAAE,KAAK,CAAC,iBAAiB;KAC1C,CAAa;IAEd,IAAI,CAAC,QAAQ,CAAC;MACZ,KAAK,EAAE,SAAS;MAChB,iBAAiB,EAAE,CAAC,CAAC;MACrB,iBAAiB,EAAE,CAAC;KACrB,CAAC;IAEF,IAAI,aAAa,EAAE;MACjB,aAAa,CAAC,SAAS,CAAC;IACzB;IAED,IAAI,CAAC,mBAAmB,EAAE;GAC3B;EAED,wBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IAAA,IAAA,KAAA,GAAA,IAAA;IACQ,IAAA,EAAA,GAIF,IAAI,CAAC,KAAK;MAHa,SAAS,GAAA,EAAA,CAAA,uBAAA;MACpB,GAAG,GAAA,EAAA,CAAA,YAAA;MACF,IAAI,GAAA,EAAA,CAAA,aACP;IAEd,IAAI,CAAC,oBAAoB,GAAG,CAAA,CAAE;IAE9B,OACEV,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC,uBAAuB;MAC5B,YAAY,EAAEK;IAAkB,CAAA,EAEhCL,aAAAA,CAAC,mBAAmB,EAAA;MAAC,KAAK,EAAE,IAAI,CAAC,aAAa;IAAE,CAAA,CAAI,EAEpDA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,iBAAiB;MAAC,QAAQ,EAAE;IAAuB,CAAA,CAAI,EACpEA,aAAAA,CAAC,QAAQ,EAAA;MAAC,IAAI,EAAC;IAAO,CAAA,EACnB,UAAA,MAAM,EAAA;MAAI,OACTA,aAAAA,CAAC,iBAAiB,EAAA,IAAA,EACf,UAAC,EAAmB,EAAA;YAAjB,eAAe,GAAA,EAAA,CAAA,eAAA;QAAO,OACxBA,aAAAA,CAAC,SAAS,EAAA,QAAA,CAAA,CAAA,CAAA,EACJ,MAAM,EAAA;UACV,MAAM,EAAE,KAAI,CAAC,MAAM;UACnB,OAAO,EAAE,KAAI,CAAC,OAAO;UACrB,MAAM,EAAE,KAAI,CAAC,MAAM;UACnB,eAAe,EAAE;QAAe,CAAA,CAAA,EAEhCA,aAAAA,CAAC,kBAAkB,EAAA,IAAA,CAAG,CACZ;OACb,CACiB;IAAA,CACrB,CACQ,EACXA,aAAAA,CAAC,QAAQ,EAAA;MACP,IAAI,EAAC,UAAU;MACf,SAAS,EAAE,UAAC,EAAqB,EAAA;YAAnB,QAAQ,GAAA,EAAA,CAAA,QAAA;QAAgB,OAAA,QAAQ,CAAC,IAAI,KAAK,qBAAqB;MAAA;IAAA,CAAA,EAE5E,UAAA,MAAM,EAAA;MAAI,OACTA,aAAAA,CAAC,GAAG,EAAA,QAAA,CAAA,CAAA,CAAA,EAAK,MAAM,CAAA,CAAI;IAAA,CACpB,CACQ,EACXA,aAAAA,CAAC,QAAQ,EAAA;MACP,IAAI,EAAC,WAAW;MAChB,SAAS,EAAE,UAAC,EAAqB,EAAA;YAAnB,QAAQ,GAAA,EAAA,CAAA,QAAA;QAAgB,OAAA,QAAQ,CAAC,IAAI,KAAK,qBAAqB;MAAA;IAAA,CAAA,EAE5E,UAAC,MAAyB,EAAA;MAAK,OAC9BA,aAAAA,CAAC,iBAAiB,EAAA,IAAA,EACf,UAAC,EAAyB,EAAA;YAAvB,YAAY,GAAA,EAAA,CAAA,YAAA;QAAgB,OAC9BA,aAAAA,CAAC,IAAI,EAAA,QAAA,CAAA,CAAA,CAAA,EACC,MAAM,EAAA;UACV,iBAAiB,EAAE,UAAA,MAAM,EAAA;YAAI,OAAA,KAAI,CAAC,yBAAyB,CACzD,MAAM,CAAC,WAAW,EAAE,MAAM,EAAE,YAAY,CACzC;UAAA;QAAA,CAAA,CAAA,CACD;OACH,CACiB;IAAA,CACrB,CACQ,CACJ;GAEZ;EA9MM,wBAAA,CAAA,YAAY,GAAG;IACpB,YAAY,EAAE;GACf;EACM,wBAAA,CAAA,UAAU,GAAG;IAClB,uBAAuB,EAAE,gBAAgB;IACzC,YAAY,EAAE,KAAK;IACnB,aAAa,EAAE;GAChB;EAwMH,OAAA,wBAAC;CAhND,CAAuCE,aAAmB,CAAA;AAkN1D,IAAM,cAAc,GAAG,UAAC,EAEvB,EAAA;MADC,MAAM,GAAA,EAAA,CAAA,MAAA;IAAE,OAAO,GAAA,EAAA,CAAA,OAAA;IAAE,MAAM,GAAA,EAAA,CAAA,MAAA;IAAE,QAAQ,GAAA,EAAA,CAAA,QAAA;IAAE,eAAe,GAAA,EAAA,CAAA,eAAA;EAC9C,OACJ,eAAe,GACbF,aAAAA,CAAC,UAAU,EAAA;IACT,MAAM,EAAE,MAAM;IACd,OAAO,EAAE,OAAO;IAChB,MAAM,EAAE;EAAM,CAAA,EAEb,QAAQ,CACE,GACX,QAAQ;AATR,CAUL;AAED;IACa,qBAAqB,GAC9B,cAAc,CAAC;EAAE,cAAc,EAAA;AAAA,CAAE,CAAC,CAAC,wBAAwB,CAAC;AC/OhE,IAAM,cAAc,GAAGW,UAAgB,CAAC,UAAC,KAAK,EAAE,GAAG,EAAA;EAAK,OACtDX,aAAAA,CAAC,mBAAmB,EAAA;IAAC,IAAI,EAAC,UAAU;IAAC,MAAM,EAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAO,KAAK,CAAA,EAAA;MAAE,GAAG,EAAA;IAAA,CAAA;EAAA,CAAA,CAAM;AAAA,CACnE,CAAC;AACF,IAAM,eAAe,GAAG,UAAA,KAAK,EAAA;EAAI,OAAA,aAAA,CAAC,mBAAmB,EAAA;IAAC,IAAI,EAAC,WAAW;IAAC,MAAM,EAAE;EAAK,CAAA,CAAI;AAAA,CAAA;AAExF,IAAM,eAAe,GAAG,EAAE;AAC1B,IAAM,qBAAqB,GAAG,UAAC,EAA0C,EAAA;MAAxC,IAAI,GAAA,EAAA,CAAA,IAAA;IAAE,QAAQ,GAAA,EAAA,CAAA,QAAA;IAAE,aAAa,GAAA,EAAA,CAAA,aAAA;EAAgB,OAC5E,qBAAqB,CAAC,IAAI,EAAE,QAAQ,EAAE,aAAa,CAAC;AADwB,CAE7E;AACD,IAAM,eAAe,GAAG,EAAE;AAE1B,IAAM,eAAe,GAAG;EACtB,MAAM,EAAE;CACT;AAED,IAAA,SAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAwBE,SAAAA,CAAAA,SAAAA,EAAAA,MAAAA,CAAAA;EAAxB,SAAA,SAAA,GAAA;;EAyLC;EAlKC,SAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACQ,IAAA,EAAA,GAgBF,IAAI,CAAC,KAAK;MAfK,MAAM,GAAA,EAAA,CAAA,eAAA;MACR,IAAI,GAAA,EAAA,CAAA,aAAA;MACL,GAAG,GAAA,EAAA,CAAA,YAAA;MACG,SAAS,GAAA,EAAA,CAAA,kBAAA;MACR,UAAU,GAAA,EAAA,CAAA,mBAAA;MACb,OAAO,GAAA,EAAA,CAAA,gBAAA;MACN,QAAQ,GAAA,EAAA,CAAA,iBAAA;MACF,cAAc,GAAA,EAAA,CAAA,uBAAA;MACvC,gBAAgB,GAAA,EAAA,CAAA,gBAAA;MAChB,QAAQ,GAAA,EAAA,CAAA,QAAA;MACR,kBAAkB,GAAA,EAAA,CAAA,kBAAA;MAClB,cAAc,GAAA,EAAA,CAAA,cAAA;MACd,aAAa,GAAA,EAAA,CAAA,aAAA;MACb,aAAa,GAAA,EAAA,CAAA,aAAA;MACb,eAAe,GAAA,EAAA,CAAA,eACH;IAEd,IAAM,UAAU,GAAG,oBAAoB,CAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAM,eAAe,CAAA,EAAK,QAAQ,CAAA,CAAG;IAE5E,OACEF,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC;IAAO,CAAA,EAEZA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,iBAAiB;MAAC,KAAK,EAAE;IAAe,CAAA,CAAI,EACzDA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,eAAe;MAAC,QAAQ,EAAE;IAAqB,CAAA,CAAI,EAChEA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,iBAAiB;MAAC,KAAK,EAAE;IAAe,CAAA,CAAI,EACzDA,aAAAA,CAAC,8BAA8B,EAAA;MAAC,gBAAgB,EAAE;IAAgB,CAAA,CAAI,EACtEA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,qBAAqB;MAAC,KAAK,EAAE;IAAsB,CAAA,CAAI,EAEpEA,aAAAA,CAAC,QAAQ,EAAA;MAAC,IAAI,EAAC;IAAM,CAAA,EACnBA,aAAAA,CAAC,mBAAmB,EAAA;MAAC,IAAI,EAAC;IAAO,CAAA,CAAG,CAC3B,EACXA,aAAAA,CAAC,QAAQ,EAAA;MAAC,IAAI,EAAC;IAAO,CAAA,EACnB,UAAA,MAAM,EAAA;MAAI,OACTA,aAAAA,CAAC,iBAAiB,EAAA,IAAA,EACf,UAAC,EAMD,EAAA;YALkB,UAAU,GAAA,EAAA,CAAA,eAAA;UACZ,QAAQ,GAAA,EAAA,CAAA,aAAA;UACN,UAAU,GAAA,EAAA,CAAA,eAAA;UACb,OAAO,GAAA,EAAA,CAAA,YAAA;UACrB,mBAAmB,GAAA,EAAA,CAAA,mBAAA;QACf,OACJA,aAAAA,CAAC,mBAAmB,EAAA;UAClB,IAAI,EAAC,aAAa;UAClB,MAAM,EAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACD,MAAM,CAAA,EAAA;YACT,cAAc,EAAA,cAAA;YACd,aAAa,EAAA,aAAA;YACb,aAAa,EAAA,aAAA;YACb,eAAe,EAAA,eAAA;YACf,kBAAkB,EAAA,kBAAA;YAClB,UAAU,EAAA,UAAA;YACV,QAAQ,EAAA,QAAA;YACR,UAAU,EAAA,UAAA;YACV,OAAO,EAAA,OAAA;YACP,YAAY,EAAE,cAAc;YAC5B,aAAa,EAAE,eAAe;YAC9B,cAAc,EAAE;UAAmB,CAAA;QAAA,CAAA,CAErC;OACH,CACiB;IAAA,CACrB,CACQ,EACXA,aAAAA,CAAC,QAAQ,EAAA;MAAC,IAAI,EAAC;IAAa,CAAA,EACzB,UAAC,MAAwB,EAAA;MAAK,OAC7BA,aAAAA,CAAC,MAAM,EAAA,QAAA,CAAA,CAAA,CAAA,EAAK,MAAM,CAAA,CAAI;IAAA,CACvB,CACQ,EACXA,aAAAA,CAAC,QAAQ,EAAA;MAAC,IAAI,EAAC;IAAW,CAAA,EACvB,UAAC,MAAyB,EAAA;MAAK,OAC9BA,aAAAA,CAAC,iBAAiB,EAAA,IAAA,EACf,UACC,EAA+B,EAAA;YAAZ,UAAU,GAAA,EAAA,CAAA,eAAA;QAC1B,OAAC,qBAAqB,CAAC,MAAM,CAAC,QAAQ,EAAE,UAAU,CAAC,GACpDA,aAAAA,CAAC,cAAc,EAAA,QAAA,CAAA,CAAA,CAAA,EAAK,MAAM,CAAA,CAAI,GAC9BA,aAAAA,CAAC,QAAQ,EAAA,QAAA,CAAA,CAAA,CAAA,EAAK,MAAM,CAAA,CAAI;OAC3B,CACiB;IAAA,CACrB,CACQ,EACXA,aAAAA,CAAC,QAAQ,EAAA;MACP,IAAI,EAAC,WAAW;MAChB,SAAS,EAAE,UAAC,EAA8B,EAAA;YAA5B,QAAQ,GAAA,EAAA,CAAA,QAAA;UAAE,WAAW,GAAA,EAAA,CAAA,WAAA;QAAY,OAAA,eAAe,CAAC,QAAQ,EAAE,WAAW,CAAC;MAAA;IAAA,CAAA,EAEpF,UAAC,MAAyB,EAAA;MAAK,OAC9BA,aAAAA,CAAC,iBAAiB,EAAA,IAAA,EACf,UAAC,EAAgB,EAAA;YAAd,YAAY,GAAA,EAAA,CAAA,YAAA;QACd,IAAM,UAAU,GAAG,MAAM,CAAC,WAAW,CAAC,MAAO,CAAC,IAAI;QAClD,IAAM,KAAK,GAAG,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,EAAE,UAAU,CAAC;QAC3D,OACEA,aAAAA,CAAC,mBAAmB,EAAA;UAClB,IAAI,EAAC,gBAAgB;UACrB,MAAM,EAAE;YACN,KAAK,EAAA,KAAA;YACL,GAAG,EAAE,MAAM,CAAC,QAAQ,CAAC,GAAG;YACxB,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC;UAC5B;QAAA,CAAA,EAEA,UAAA,OAAO,EAAA;UAAI,OACVA,aAAAA,CAAC,IAAI,EAAA,QAAA,CAAA,CAAA,CAAA,EACC,MAAM,EAAA;YACV,GAAG,EAAE,MAAM,CAAC,QAAQ,CAAC,GAAG;YACxB,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,MAAO;YAClC,KAAK,EAAE;UAAK,CAAA,CAAA,EAEX,OAAO,CACH;QAAA,CACR,CACmB;OAEzB,CACiB;IAAA,CACrB,CACQ,EACXA,aAAAA,CAAC,QAAQ,EAAA;MACP,IAAI,EAAC,WAAW;MAChB,SAAS,EAAE,UAAC,EAAiB,EAAA;YAAf,QAAQ,GAAA,EAAA,CAAA,QAAA;QAAY,OAAA,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC;MAAA;IAAA,CAAA,EAE7D,UAAC,MAAyB,EAAA;MAAK,OAC9BA,aAAAA,CAAC,iBAAiB,EAAA,IAAA,EACf,UAAC,EAAgB,EAAA;YAAd,YAAY,GAAA,EAAA,CAAA,YAAA;QACd,IAAI,iBAAiB,CAAC,MAAM,CAAC,WAAW,EAAE,YAAY,CAAC,EAAE;UACvD,OACEA,aAAAA,CAAC,UAAU,EAAA,QAAA,CAAA,CAAA,CAAA,EACL,MAAM,EAAA;YACV,UAAU,EAAE;UAAU,CAAA,CAAA,CACtB;QAEL;QACD,OAAO,IAAI;OACZ,CACiB;IAAA,CACrB,CACQ,EACXA,aAAAA,CAAC,QAAQ,EAAA;MAAC,IAAI,EAAC;IAAU,CAAA,EACtB,UAAC,MAAwB,EAAA;MAAK,OAC7BA,aAAAA,CAAC,OAAO,EAAA,QAAA,CAAA,CAAA,CAAA,EAAK,MAAM,CAAA,CAAI;IAAA,CACxB,CACQ,EACXA,aAAAA,CAAC,QAAQ,EAAA;MACP,IAAI,EAAC,UAAU;MACf,SAAS,EAAE,UAAC,EAAiB,EAAA;YAAf,QAAQ,GAAA,EAAA,CAAA,QAAA;QAAY,OAAA,CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC;MAAA;IAAA,CAAA,EAE3D,UAAC,MAAwB,EAAA;MAAK,OAC7BA,aAAAA,CAAC,GAAG,EAAA,QAAA,CAAA,CAAA,CAAA,EACE,MAAM,EAAA;QACV,GAAG,EAAE,MAAM,CAAC,QAAQ,CAAC;MAAG,CAAA,CAAA,CACxB;IAAA,CACH,CACQ,EACXA,aAAAA,CAAC,QAAQ,EAAA;MACP,IAAI,EAAC,UAAU;MACf,SAAS,EAAE,UAAC,EAAiB,EAAA;YAAf,QAAQ,GAAA,EAAA,CAAA,QAAA;QAAY,OAAA,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC;MAAA;IAAA,CAAA,EAE7D,UAAC,MAAwB,EAAA;MAAK,OAAA,aAAA,CAAC,SAAS,EAAA,QAAA,CAAA,CAAA,CAAA,EAAK,MAAM,CAAA,CAAI;IAAA,CAAA,CAC/C,CACJ;GAEZ;EAvLM,SAAA,CAAA,WAAW,GAAG,eAAe;EAC7B,SAAA,CAAA,QAAQ,GAAG,eAAe;EAC1B,SAAA,CAAA,eAAe,GAAG,iBAAiB;EACnC,SAAA,CAAA,YAAY,GAAG;IACpB,QAAQ,EAAE,CAAA;GACX;EACM,SAAA,CAAA,UAAU,GAAG;IAClB,cAAc,EAAE,OAAO;IACvB,aAAa,EAAE,WAAW;IAC1B,aAAa,EAAE,WAAW;IAC1B,eAAe,EAAE,aAAa;IAC9B,kBAAkB,EAAE,WAAW;IAC/B,eAAe,EAAE,QAAQ;IACzB,YAAY,EAAE,KAAK;IACnB,aAAa,EAAE,MAAM;IACrB,kBAAkB,EAAE,WAAW;IAC/B,mBAAmB,EAAE,YAAY;IACjC,gBAAgB,EAAE,SAAS;IAC3B,iBAAiB,EAAE,UAAU;IAC7B,uBAAuB,EAAE;GAC1B;EAoKH,OAAA,SAAC;CAzLD,CAAwBE,aAAmB,CAAA;AA2L3C;;;;;AAKA,IAAa,KAAK,GAOd,SAAS;AC9Nb,IAAA,kBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAiCA,SAAAA,CAAAA,kBAAAA,EAAAA,MAAAA,CAAAA;EAAjC,SAAA,kBAAA,GAAA;;EA2GC;EA7FC,kBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACQ,IAAA,EAAA,GASF,IAAI,CAAC,KAAK;MARZ,YAAY,GAAA,EAAA,CAAA,YAAA;MACZ,gBAAgB,GAAA,EAAA,CAAA,gBAAA;MAChB,mBAAmB,GAAA,EAAA,CAAA,mBAAA;MACnB,aAAa,GAAA,EAAA,CAAA,aAAA;MACQ,UAAU,GAAA,EAAA,CAAA,mBAAA;MAChB,IAAI,GAAA,EAAA,CAAA,aAAA;MACL,GAAG,GAAA,EAAA,CAAA,YAAA;MACjB,oBAAoB,GAAA,EAAA,CAAA,oBACR;IAEd,IAAM,oBAAoB,GAAG,UAC3B,EAAyB,EAAA;UAAvB,YAAY,GAAA,EAAA,CAAA,YAAA;MACX,OAAA,yBAAyB,CAAC,YAAY,EAAE,oBAAoB,EAAE,mBAAmB,CAAC;KAAA;IAEvF,OACEF,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC,gBAAgB;MACrB,YAAY,EAAE,CACZ;QAAE,IAAI,EAAE;MAAO,CAAE,EACjB;QAAE,IAAI,EAAE;MAAgB,CAAE,EAC1B;QAAE,IAAI,EAAE,qBAAqB;QAAE,QAAQ,EAAE,CAAC;MAAa,CAAE;IAC1D,CAAA,EAEDA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,cAAc;MAAC,QAAQ,EAAE;IAAoB,CAAA,CAAI,EAC7D,YAAY,IACXA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,sBAAsB;MAAC,KAAK,EAAA;IAAA,CAAA,CAC1C,EAEC,mBAAmB,IAAI,aAAa,IACpCA,aAAAA,CAAC,QAAQ,EAAA;MACP,IAAI,EAAC,WAAW;MAChB,SAAS,EAAE,UAAC,EAEN,EAAA;YADJ,QAAQ,GAAA,EAAA,CAAA,QAAA;UAAE,WAAW,GAAA,EAAA,CAAA,WAAA;QACZ,OAAA,oBAAoB,CAAC,QAAQ,EAAE,WAAW,CAAC;MAAA;IAAA,CAAA,EAErD,UAAC,MAAsB,EAAA;MAAK,OAC3BA,aAAAA,CAAC,iBAAiB,EAAA,IAAA,EACf,UAAC,EAAiD,EAAE,EAAmB,EAAA;YAApE,kBAAkB,GAAA,EAAA,CAAA,kBAAA;UAAE,WAAW,GAAA,EAAA,CAAA,WAAA;UAAE,YAAY,GAAA,EAAA,CAAA,YAAA;YAAM,eAAe,GAAA,EAAA,CAAA,eAAA;QAAO,OAC3EA,aAAAA,CAAC,UAAU,EAAA,QAAA,CAAA,CAAA,CAAA,EACL,MAAM,EAAA;UACV,QAAQ,EAAE,CAAC,kBAAkB;UAC7B,WAAW,EAAE,WAAW;UACxB,YAAY,EAAE,YAAY;UAC1B,QAAQ,EAAE,UAAA,MAAM,EAAA;YAAI,OAAA,eAAe,CAAC,MAAM,CAAC;UAAA;QAAA,CAAA,CAAA,CAC3C;OACH,CACiB;IAAA,CACrB,CAEJ,EACA,mBAAmB,IAClBA,aAAAA,CAAC,QAAQ,EAAA;MACP,IAAI,EAAC,WAAW;MAChB,SAAS,EAAE,UAAC,EAA8B,EAAA;YAA5B,QAAQ,GAAA,EAAA,CAAA,QAAA;UAAE,WAAW,GAAA,EAAA,CAAA,WAAA;QAAY,OAAA,iBAAiB,CAAC,QAAQ,EAAE,WAAW,CAAC;MAAA;IAAA,CAAA,EAEtF,UAAC,MAAsB,EAAA;MAAK,OAC3BA,aAAAA,CAAC,iBAAiB,EAAA,IAAA,EACf,UAAC,EAAa,EAAE,EAAmB,EAAA;YAAhC,SAAS,GAAA,EAAA,CAAA,SAAA;YAAM,eAAe,GAAA,EAAA,CAAA,eAAA;QAAO,OACvCA,aAAAA,CAAC,IAAI,EAAA,QAAA,CAAA,CAAA,CAAA,EACC,MAAM,EAAA;UACV,GAAG,EAAE,MAAM,CAAC,QAAQ,CAAC,GAAG;UACxB,QAAQ,EAAE,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;UACzD,QAAQ,EAAE,YAAA;YAAM,OAAA,eAAe,CAAC;cAAE,MAAM,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK;YAAC,CAAE,CAAC;UAAA;QAAA,CAAA,CAAA,CACpE;OACH,CACiB;IAAA,CACrB,CAEJ,EACA,CAAC,YAAY,IAAI,gBAAgB,KAChCA,aAAAA,CAAC,QAAQ,EAAA;MACP,IAAI,EAAC,UAAU;MACf,SAAS,EAAE,UAAC,EAAiB,EAAA;YAAf,QAAQ,GAAA,EAAA,CAAA,QAAA;QAAY,OAAA,CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC;MAAA;IAAA,CAAA,EAE3D,UAAC,MAAqB,EAAA;MAAK,OAC1BA,aAAAA,CAAC,iBAAiB,EAAA,IAAA,EACf,UAAC,EAAa,EAAE,EAAmB,EAAA;YAAhC,SAAS,GAAA,EAAA,CAAA,SAAA;YAAM,eAAe,GAAA,EAAA,CAAA,eAAA;QAAO,OACvCA,aAAAA,CAAC,GAAG,EAAA,QAAA,CAAA,CAAA,CAAA,EACE,MAAM,EAAA;UACV,gBAAgB,EAAE,gBAAgB;UAClC,WAAW,EAAE,gBAAgB,CAAC,YAAa,EAAE,SAAS,EAAE,MAAM,CAAC,QAAQ,CAAC;UACxE,QAAQ,EAAE,YAAA;YAAM,OAAA,eAAe,CAAC;cAAE,MAAM,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK;YAAC,CAAE,CAAC;UAAA;QAAA,CAAA,CAAA,CACpE;OACH,CACiB;IAAA,CACrB,CAEJ,CACM;GAEZ;EAzGM,kBAAA,CAAA,YAAY,GAAG;IACpB,YAAY,EAAE,KAAK;IACnB,gBAAgB,EAAE,KAAK;IACvB,aAAa,EAAE,KAAK;IACpB,mBAAmB,EAAE;GACtB;EACM,kBAAA,CAAA,UAAU,GAAG;IAClB,YAAY,EAAE,KAAK;IACnB,aAAa,EAAE,MAAM;IACrB,mBAAmB,EAAE;GACtB;EACM,kBAAA,CAAA,WAAW,GAAG,iBAAiB;EA+FxC,OAAA,kBAAC;CA3GD,CAAiCE,aAAmB,CAAA;AA6GpD;;;;AAIA,IAAa,cAAc,GAGvB,kBAAkB;;AC7HtB;AACA,IAAA,kBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAiCA,SAAAA,CAAAA,kBAAAA,EAAAA,MAAAA,CAAAA;EAM/B,SAAA,kBAAA,CAAY,KAAK,EAAA;IAAjB,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAK,CAAC,IAAA,IAAA;IAEZ,KAAI,CAAC,KAAK,GAAG;MACX,cAAc,EAAE,KAAK,CAAC,cAAc,IAAI,KAAK,CAAC;KAC/C;IAED,IAAM,WAAW,GAAG,iBAAiB,CACnC,KAAI,EACJ;MACE,cAAc,EAAE,YAAA;QACN,IAAA,sBAAsB,GAAK,KAAI,CAAC,KAAK,CAAA,sBAAf;QAC9B,OAAO,sBAAsB;MAC9B;KACF,CACF;IAED,KAAI,CAAC,uBAAuB,GAAG,WAAW,CAAC,iBAAiB,CACzD,IAAI,CAAC,WAAW,EAAE,gBAAgB,EAAE,uBAAuB,CAAC;;EAChE;EAEM,kBAAA,CAAA,wBAAwB,GAA/B,UAAgC,SAAS,EAAE,SAAS,EAAA;IAEhD,IAAA,EAAA,GACE,SAAS,CAAA,cAD8B;MAAzC,cAAc,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,SAAS,CAAC,cAAc,GAAA,EAAA;IAG3C,OAAO;MACL,cAAc,EAAA;KACf;GACF;EAED,kBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACU,IAAA,cAAc,GAAK,IAAI,CAAC,KAAK,CAAA,cAAf;IAEtB,OACEF,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC;IAAgB,CAAA,EAErBA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,sBAAsB;MAAC,KAAK,EAAE;IAAc,CAAA,CAAI,EAC7DA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,yBAAyB;MAAC,MAAM,EAAE,IAAI,CAAC;IAAuB,CAAA,CAAI,CACxE;GAEZ;EA/CM,kBAAA,CAAA,YAAY,GAAG;IACpB,qBAAqB,EAAE;GACxB;EA8CH,OAAA,kBAAC;CAjDD,CAAiCE,aAAmB,CAAA;AAmDpD;AACA,IAAa,cAAc,GAA6C,kBAAkB;AC5C1F,IAAM,sBAAsB,GAAG,UAC7B,EAAgC,EAAA;MAA9B,mBAAmB,GAAA,EAAA,CAAA,mBAAA;EAClB,OAAA,4BAA4B,CAAC,mBAAmB,CAAC;AAAjD,CAAiD;AAEtD,IAAMG,oBAAkB,GAAG,CACzB;EAAE,IAAI,EAAE;AAAgB,CAAE,EAC1B;EAAE,IAAI,EAAE;AAAO,CAAE,CAClB;AAED,IAAA,kBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAiCH,SAAAA,CAAAA,kBAAAA,EAAAA,MAAAA,CAAAA;EAAjC,SAAA,kBAAA,GAAA;;EA6FC;EAjFC,kBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACQ,IAAA,EAAA,GAOF,IAAI,CAAC,KAAK;MANZ,SAAS,GAAA,EAAA,CAAA,SAAA;MACS,OAAO,GAAA,EAAA,CAAA,gBAAA;MACJ,UAAU,GAAA,EAAA,CAAA,mBAAA;MAChB,IAAI,GAAA,EAAA,CAAA,aAAA;MACL,GAAG,GAAA,EAAA,CAAA,YAAA;MACjB,iBAAiB,GAAA,EAAA,CAAA,iBACL;IAEd,IAAM,oBAAoB,GAAG,UAC3B,EAAyB,EAAA;UAAvB,YAAY,GAAA,EAAA,CAAA,YAAA;MACX,OAAA,sBAAsB,CAAC,YAAY,EAAE,iBAAiB,CAAC;KAAA;IAC5D,IAAM,qBAAqB,GAAG,UAC5B,EAAgD,EAAA;UAA9C,aAAa,GAAA,EAAA,CAAA,aAAA;QAAE,oBAAoB,GAAA,EAAA,CAAA,oBAAA;MAClC,OAAA,2BAA2B,CAAC,aAAa,EAAE,oBAAoB,EAAE,SAAU,CAAC;KAAA;IAEjF,OACEF,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC,gBAAgB;MACrB,YAAY,EAAEK;IAAkB,CAAA,EAEhCL,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,cAAc;MAAC,QAAQ,EAAE;IAAoB,CAAA,CAAI,EAC9DA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,eAAe;MAAC,QAAQ,EAAE;IAAqB,CAAA,CAAI,EAChEA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,qBAAqB;MAAC,QAAQ,EAAE;IAAsB,CAAA,CAAI,EAEvEA,aAAAA,CAAC,QAAQ,EAAA;MACP,IAAI,EAAC,WAAW;MAChB,SAAS,EAAE,UACT,EAA8B,EAAA;YAA5B,QAAQ,GAAA,EAAA,CAAA,QAAA;UAAE,WAAW,GAAA,EAAA,CAAA,WAAA;QACpB,OAAA,uBAAuB,CAAC,QAAQ,EAAE,WAAW,CAAC;MAAA;IAAA,CAAA,EAElD,UAAC,MAAsB,EAAA;MAAK,OAC3BA,aAAAA,CAAC,iBAAiB,EAAA,IAAA,EACf,UAAC,EAAwB,EAAE,EAA2B,EAAA;YAAnD,oBAAoB,GAAA,EAAA,CAAA,oBAAA;YAAM,uBAAuB,GAAA,EAAA,CAAA,uBAAA;QAAO,OAC1DA,aAAAA,CAAC,UAAU,EAAA,QAAA,CAAA,CAAA,CAAA,EACL,MAAM,EAAA;UACV,GAAG,EAAE,MAAM,CAAC,QAAQ,CAAC,GAAG;UACxB,QAAQ,EAAE,mBAAmB,CAAC,oBAAoB,EAAE,MAAM,CAAC,QAAQ,CAAC,KAAM,CAAC;UAC3E,QAAQ,EAAE,YAAA;YAAM,OAAA,uBAAuB,CAAC;cAAE,KAAK,EAAE,MAAM,CAAC,QAAQ,CAAC;YAAK,CAAE,CAAC;UAAA;QAAA,CAAA,CAAA,CACzE;OACH,CACiB;IAAA,CACrB,CACQ,EACXA,aAAAA,CAAC,QAAQ,EAAA;MACP,IAAI,EAAC,WAAW;MAChB,SAAS,EAAE,UAAC,EAAiB,EAAA;YAAf,QAAQ,GAAA,EAAA,CAAA,QAAA;QAAY,OAAA,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC;MAAA;IAAA,CAAA,EAE7D,UAAC,MAAsB,EAAA;MAAK,OAC3BA,aAAAA,CAAC,iBAAiB,EAAA,IAAA,EACf,UAAC,EAAgB,EAAA;YAAd,YAAY,GAAA,EAAA,CAAA,YAAA;QACd,IAAI,iBAAiB,CAAC,MAAM,CAAC,WAAW,EAAE,YAAY,CAAC,EAAE;UACvD,OACEA,aAAAA,CAAC,IAAI,EAAA,QAAA,CAAA,CAAA,CAAA,EACC,MAAM,EAAA;YACV,GAAG,EAAE,MAAM,CAAC,QAAQ,CAAC;UAAG,CAAA,CAAA,EAEvB,OAAO,IAAIA,aAAAA,CAAC,OAAO,EAAA;YAAC,GAAG,EAAE,MAAM,CAAC,QAAQ,CAAC;UAAG,CAAA,CAAI,CAC5C;QAEV;QACD,OAAO,IAAI;OACZ,CACiB;IAAA,CACrB,CACQ,EACXA,aAAAA,CAAC,QAAQ,EAAA;MACP,IAAI,EAAC,UAAU;MACf,SAAS,EAAE,UAAC,EAAiB,EAAA;YAAf,QAAQ,GAAA,EAAA,CAAA,QAAA;QAAY,OAAA,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC;MAAA;IAAA,CAAA,EAE7D,UAAC,MAAqB,EAAA;MAAK,OAC1BA,aAAAA,CAAC,GAAG,EAAA,QAAA,CAAA,CAAA,CAAA,EACE,MAAM,EAAA;QACV,GAAG,EAAE,MAAM,CAAC,QAAQ,CAAC;MAAG,CAAA,CAAA,CACxB;IAAA,CACH,CACQ,CACJ;GAEZ;EA3FM,kBAAA,CAAA,QAAQ,GAAG,iBAAiB;EAC5B,kBAAA,CAAA,WAAW,GAAG,iBAAiB;EAC/B,kBAAA,CAAA,YAAY,GAAG;IACpB,gBAAgB,EAAE,YAAA;MAAM,OAAA,IAAI;IAAA;GAC7B;EACM,kBAAA,CAAA,UAAU,GAAG;IAClB,YAAY,EAAE,KAAK;IACnB,aAAa,EAAE,MAAM;IACrB,mBAAmB,EAAE;GACtB;EAmFH,OAAA,kBAAC;CA7FD,CAAiCE,aAAmB,CAAA;AA+FpD;AACA,IAAa,cAAc,GAKvB,kBAAkB;AC9Hf,IAAM,sBAAsB,GAAG;EACpC,GAAG,EAAE,KAAK;EACV,GAAG,EAAE,KAAK;EACV,GAAG,EAAE,KAAK;EACV,GAAG,EAAE,KAAK;EACV,KAAK,EAAE;CACR;ACGM,IAAM,mBAAmB,GAAwC,UAAC,EAIxE,EAAA;MAHC,MAAM,GAAA,EAAA,CAAA,MAAA;IAAE,eAAe,GAAA,EAAA,CAAA,eAAA;IAAE,sBAAsB,GAAA,EAAA,CAAA,sBAAA;IAChC,IAAI,GAAA,EAAA,CAAA,aAAA;IACnB,QAAQ,GAAA,EAAA,CAAA,QAAA;EAER,IAAM,UAAU,GAAG,oBAAoB,CAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAM,sBAAsB,CAAA,EAAK,QAAQ,CAAA,CAAG;EACnF,IAAM,WAAW,GAAgC,UAAC,EAAqB,EAAA;QAAnB,OAAO,GAAA,EAAA,CAAA,OAAA;MAAE,QAAQ,GAAA,EAAA,CAAA,QAAA;IAAO,OAC1EF,aAAAA,CAAC,IAAI,EAAA;MACH,UAAU,EAAE,UAAU;MACtB,IAAI,EAAE,OAAO,CAAC,IAAI;MAClB,KAAK,EAAE,OAAO,CAAC;IAAK,CAAA,EAEnB,QAAQ,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAC7B;GACR;EACD,IAAM,mBAAmB,GAAG,UAAC,OAAsB,EAAA;IAAK,OACtD,OAAO,CAAC,KAAK,KAAK,IAAI,IACnB,sBAAsB,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,IAC7C,0BAA0B,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC;EAAA,CACrD;EAED,OACEA,aAAAA,CAACI,QAAc,EAAA,IAAA,EACZ,eAAe,CAAC,GAAG,CAAC,UAAC,OAAO,EAAA;IAC3B,IAAI,mBAAmB,CAAC,OAAO,CAAC,EAAE;MAChC,OAAOJ,aAAAA,CAAC,WAAW,EAAA;QAAC,GAAG,EAAE,OAAO,CAAC,IAAI;QAAE,OAAO,EAAE;MAAO,CAAA,CAAI;IAC5D;IACD,OACEA,aAAAA,CAAC,mBAAmB,EAAA;MAClB,GAAG,EAAE,OAAO,CAAC,IAAI;MACjB,IAAI,EAAC,gBAAgB;MACrB,MAAM,EAAE;QACN,MAAM,EAAA,MAAA;QACN,KAAK,EAAE,OAAO,CAAC;MAChB;IAAA,CAAA,EAEA,UAAA,OAAO,EAAA;MAAI,OACVA,aAAAA,CAAC,WAAW,EAAA;QAAC,OAAO,EAAE;MAAO,CAAA,EAC1B,OAAO,CACI;IAAA,CACf,CACmB;GAEzB,CAAC,CACa;AAErB,CAAC;AClDD,IAAM,yBAAyB,GAA8B,UAC3D,MAAM,EAAE,OAAO,EAAE,mBAAmB,EAAA;EACjC,OAAA,YAAA;IAAM,OACR,OAAO,CAAC,KAAK,KAAK,IAAI,IAAI,mBAAmB,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,GACjEA,aAAAA,CAAAA,QAAAA,EAAAA,IAAAA,EAAG,OAAO,CAAC,KAAK,CAAI,GAEpBA,aAAAA,CAAC,mBAAmB,EAAA;MAClB,GAAG,EAAE,OAAO,CAAC,IAAI;MACjB,IAAI,EAAC,gBAAgB;MACrB,MAAM,EAAE;QACN,MAAM,EAAA,MAAA;QACN,KAAK,EAAE,OAAO,CAAC;MAChB;IAAA,CAAA,EAEA,UAAA,OAAO,EAAA;MAAI,OAAA,OAAO,IAAI,OAAO,CAAC,KAAK;IAAA,CAAA,CAEvC;EAAA,CACJ;AAAA,CAAA;AAEM,IAAM,2BAA2B,GAAkC,UACxE,OAAO,EAAE,QAAQ,EAAE,iBAAiB,EAAE,kBAAkB,EACxD,mBAAmB,EAAA;EAChB,OACH,uBAAuB,CACrB,iBAAiB,EAAE,OAAO,EAC1B,kBAAkB,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,CAC7C,CACE,GAAG,CAAC,UAAA,YAAY,EAAA;IAAI,OAAA,QAAA,CAChB,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC,UAAA,OAAO,EAAA;MAAI,OAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACpC,OAAO,CAAA,EAAA;QACV,WAAW,EAAE,YAAY,CAAC,MAAM,CAAC,KAAK;QACtC,UAAU,EAAK,OAAO,CAAC,IAAI,GAAA,IAAI;QAC/B,SAAS,EAAE,yBAAyB,CAClC,YAAY,CAAC,MAAM,EAAE,OAAO,EAAE,mBAAmB;MAClD,CAAA,CAAA;IAAA,CACD,CAAC,CAAA;EAAA,CACH,CAAC,CACF,MAAM,CAAC,UAAC,GAAG,EAAE,SAAS,EAAA;IAAK,OAAA,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC;EAAA,CAAA,EAAE,EAAE,CAAC;AAAA,CACzD;ACdD,IAAMK,oBAAkB,GAAG,CACzB;EAAE,IAAI,EAAE;AAAe,CAAE,EACzB;EAAE,IAAI,EAAE;AAAO,CAAE,EACjB;EAAE,IAAI,EAAE,kBAAkB;EAAE,QAAQ,EAAE;AAAI,CAAE,EAC5C;EAAE,IAAI,EAAE,cAAc;EAAE,QAAQ,EAAE;AAAI,CAAE,EACxC;EAAE,IAAI,EAAE,eAAe;EAAE,QAAQ,EAAE;AAAI,CAAE,EACzC;EAAE,IAAI,EAAE,mBAAmB;EAAE,QAAQ,EAAE;AAAI,CAAE,EAC7C;EAAE,IAAI,EAAE;AAAO,CAAE,EACjB;EAAE,IAAI,EAAE,kBAAkB;EAAE,QAAQ,EAAE;AAAI,CAAE,EAC5C;EAAE,IAAI,EAAE,gBAAgB;EAAE,QAAQ,EAAE;AAAI,CAAE,CAC3C;AACD,IAAM,IAAI,GAAG,MAAM;AAEnB;AACA,IAAaO,iBAAe,GAAG;EAC7B,OAAO,EAAE,SAAS;EAClB,KAAK,EAAE,0BAA0B;EACjC,KAAK,EAAE,0BAA0B;EACjC,KAAK,EAAE,0BAA0B;EACjC,KAAK,EAAE;CACR;AAED,IAAMC,uBAAqB,GAAG,UAC5B,EAAsC,EAAA;MAApC,aAAa,GAAA,EAAA,CAAA,aAAA;IAAE,UAAU,GAAA,EAAA,CAAA,UAAA;EACxB,OAAA,qBAAqB,CAAC,aAAa,EAAE,UAAU,CAAC;AAAhD,CAAgD;AACrD,IAAMC,wBAAsB,GAAG,UAC7B,EAA6D,EAAA;MAA3D,mBAAmB,GAAA,EAAA,CAAA,mBAAA;IAAE,iBAAiB,GAAA,EAAA,CAAA,iBAAA;IAAE,QAAQ,GAAA,EAAA,CAAA,QAAA;EAElD,IAAM,uBAAuB,GAAG,QAAQ,KAAA,IAAA,IAAR,QAAQ,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAR,QAAQ,CAAE,OAAO,CAAC,CAAC,CAAA,CAAE,CAAC,CAAC;EACvD,OAAO,2BAA2B,CAChC,mBAAmB,EACnB,iBAAiB,EACjB,uBAAuB,CACxB;AACH,CAAC;AAED,IAAA,iBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAgCZ,SAAAA,CAAAA,iBAAAA,EAAAA,MAAAA,CAAAA;EAAhC,SAAA,iBAAA,GAAA;;EAuNC;EAlMC,iBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACQ,IAAA,EAAA,GAkBF,IAAI,CAAC,KAAK;MAjBG,SAAS,GAAA,EAAA,CAAA,aAAA;MACN,OAAO,GAAA,EAAA,CAAA,gBAAA;MACV,IAAI,GAAA,EAAA,CAAA,aAAA;MACL,QAAQ,GAAA,EAAA,CAAA,YAAA;MACF,SAAS,GAAA,EAAA,CAAA,kBAAA;MACR,eAAe,GAAA,EAAA,CAAA,mBAAA;MACZ,aAAa,GAAA,EAAA,CAAA,sBAAA;MACT,iBAAiB,GAAA,EAAA,CAAA,0BAAA;MACvB,WAAW,GAAA,EAAA,CAAA,oBAAA;MACX,WAAW,GAAA,EAAA,CAAA,oBAAA;MACd,QAAQ,GAAA,EAAA,CAAA,iBAAA;MAC3B,iBAAiB,GAAA,EAAA,CAAA,iBAAA;MACjB,kBAAkB,GAAA,EAAA,CAAA,kBAAA;MAClB,sBAAsB,GAAA,EAAA,CAAA,sBAAA;MACtB,gBAAgB,GAAA,EAAA,CAAA,gBAAA;MAChB,QAAQ,GAAA,EAAA,CAAA,QAAA;MACR,sBAAsB,GAAA,EAAA,CAAA,sBACV;IAEd,IAAM,UAAU,GAAG,oBAAoB,CAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAMU,iBAAe,CAAA,EAAK,QAAQ,CAAA,CAAG;IAE5E,OACEZ,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC,eAAe;MACpB,YAAY,EAAEK;IAAkB,CAAA,EAEhCL,aAAAA,CAAC,wBAAwB,EAAA;MACvB,gBAAgB,EAAE,gBAAgB;MAClC,sBAAsB,EAAE,sBAAsB;MAC9C,iBAAiB,EAAE;IAAiB,CAAA,CACpC,EACFA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,eAAe;MAAC,QAAQ,EAAEa;IAAqB,CAAA,CAAI,EAChEb,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,qBAAqB;MAAC,QAAQ,EAAEc;IAAsB,CAAA,CAAI,EAEvEd,aAAAA,CAAC,QAAQ,EAAA;MACP,IAAI,EAAC,WAAW;MAChB,SAAS,EAAE,UAAC,EAAiB,EAAA;YAAf,QAAQ,GAAA,EAAA,CAAA,QAAA;QAAY,OAAA,eAAe,CAAC,QAAQ,CAAC;MAAA;IAAA,CAAA,EAE1D,UAAC,MAAsB,EAAA;MAAK,OAC3BA,aAAAA,CAAC,iBAAiB,EAAA,IAAA,EACf,UACC,EAEC,EACD,EAAuB,EAAA;YAFrB,QAAQ,GAAA,EAAA,CAAA,QAAA;UAAE,cAAc,GAAA,EAAA,CAAA,cAAA;UAAE,iBAAiB,GAAA,EAAA,CAAA,iBAAA;UAAE,kBAAkB,GAAA,EAAA,CAAA,kBAAA;UAAE,OAAO,GAAA,EAAA,CAAA,OAAA;YAExE,mBAAmB,GAAA,EAAA,CAAA,mBAAA;QAErB,IAAI,gBAAgB,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,WAAW,CAAC,EAAE;UACzD,IAAM,mBAAmB,GAAG,0BAA0B,CACnD,MAAM,CAAC,sBAAuB,CAAC;UAElC,IAAM,iBAAe,GAAG,iBAAiB,GACrC,2BAA2B,CAC3B,OAAO,EAAE,MAAM,CAAC,QAAQ,EAAE,iBAAiB,EAC3C,kBAAkB,EAAE,mBAAmB,CACxC,GAAG,EAAE;UACR,IAAM,UAAU,GAAG,wBAAwB,CACzC,MAAM,CAAC,WAAW,EAAE,QAAQ,EAAE,iBAAiB,CAChD;UACD,IAAM,eAAa,GAAG,OAAA,GAAQ,UAAU,GAAA,OAAA,GAAQ,kBAAkB,GAAA,GAAG;UAErE,OACEA,aAAAA,CAAC,mBAAmB,EAAA;YAClB,IAAI,EAAC,gBAAgB;YACrB,MAAM,EAAE;cACN,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,MAAM;cACjC,KAAK,EAAE,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC;YAC5B;UAAA,CAAA,EAEA,UAAA,OAAO,EAAA;YAAI,OACVA,aAAAA,CAAC,SAAS,EAAA,QAAA,CAAA,CAAA,CAAA,EACJ,MAAM,EAAA;cACV,gBAAgB,EAAE,OAAO;cACzB,aAAa,EAAE,IAAI;cACnB,kBAAkB,EAAE,SAAS;cAC7B,GAAG,EAAE,MAAM,CAAC,QAAQ,CAAC,GAAG;cACxB,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,MAAO;cAClC,QAAQ,EAAE,cAAc,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;cACxE,QAAQ,EACN,YAAA;gBAAM,OAAA,mBAAmB,CAAC;kBAAE,QAAQ,EAAE,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC;gBAAW,CAAE,CAAC;cAAA,CAAA;cAE1E,eAAe,EAAE,iBAAe;cAChC,sBAAsB,EAAE,aAAa;cACrC,0BAA0B,EAAE,iBAAiB;cAC7C,UAAU,EAAE,UAAU;cACtB,QAAQ,EAAE,eAAa;cACvB,IAAI,EAAE;YAAI,CAAA,CAAA,EAET,OAAO,CACE;UAAA,CACb,CACmB;QAEzB;QACD,IAAI,sBAAsB,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,WAAW,EAAE,QAAQ,CAAC,EAAE;UACzE,IAAM,UAAU,GAAG;YACjB,IAAI,EAAA,IAAA;YACJ,QAAQ,EAAE,wBAAwB,CAChC,MAAM,CAAC,WAAW,EAAE,QAAQ,EAAE,iBAAiB;WAElD;UACD,IAAI,eAAe,EAAE;YACnB,OACEA,aAAAA,CAAC,eAAe,EAAA,QAAA,CAAA,CAAA,CAAA,EACV,MAAM,EACN,UAAU,EAAA;cACd,GAAG,EAAE,MAAM,CAAC,QAAQ,CAAC,GAAG;cACxB,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC;YAAO,CAAA,CAAA,CAClC;UAEL;UACD,OAAOA,aAAAA,CAAC,mBAAmB,EAAA;YAAC,MAAM,EAAE;UAAU,CAAA,CAAI;QACnD;QACD,IAAI,0BAA0B,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,WAAW,EAAE,QAAQ,CAAC,EAAE;UAC7E,OAAOA,aAAAA,CAAC,mBAAmB,EAAA;YAAC,MAAM,EAAE;UAAM,CAAA,CAAI;QAC/C;QACD,OAAO,IAAI;OACZ,CACiB;IAAA,CACrB,CACQ,EACXA,aAAAA,CAAC,QAAQ,EAAA;MACP,IAAI,EAAC,WAAW;MAChB,SAAS,EAAE,UAAC,EAEN,EAAA;YADJ,QAAQ,GAAA,EAAA,CAAA,QAAA;UAAE,WAAW,GAAA,EAAA,CAAA,WAAA;QACZ,OAAC,sBAAsB,CAAC,QAAQ,EAAE,WAAW,CAAC;MAAC;IAAA,CAAA,EAEzD,UAAC,MAAsB,EAAA;MAAK,OAC3BA,aAAAA,CAAC,iBAAiB,EAAA,IAAA,EACf,UACC,EAEC,EACD,EAAuB,EAAA;YAFrB,iBAAiB,GAAA,EAAA,CAAA,iBAAA;UAAE,kBAAkB,GAAA,EAAA,CAAA,kBAAA;UAAE,QAAQ,GAAA,EAAA,CAAA,QAAA;UAAE,YAAY,GAAA,EAAA,CAAA,YAAA;YAE7D,mBAAmB,GAAA,EAAA,CAAA,mBAAA;QAEb,IAAA,WAAW,GAAe,MAAM,CAAA,WAArB;UAAE,QAAQ,GAAK,MAAM,CAAA,QAAX;QAC7B,IAAM,QAAQ,GAAG,YAAA;UAAM,OAAA,mBAAmB,CAAC;YAAE,QAAQ,EAAE,QAAQ,CAAC,GAAG,CAAC;UAAW,CAAE,CAAC;QAAA,CAAA;QAElF,IAAI,gBAAgB,CAAC,QAAQ,EAAE,WAAW,EAAE,QAAQ,EAAE,iBAAiB,CAAC,EAAE;UACxE,IAAM,eAAe,GAAG,kBAAkB,CACxC,iBAAiB,EACjB,WAAW,CAAC,MAAO,CAAC,IAAI,EACxB,kBAAkB,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,EAC5C,UAAA,WAAW,EAAA;YAAI,OACb,CAAE,WAAgC,CAAC,iBAAkB,IACpD,WAAgC,CAAC,aAAc;UAAA,CACjD,CACF;UAED,OACEA,aAAAA,CAAC,WAAW,EAAA,QAAA,CAAA,CAAA,CAAA,EACN,MAAM,EAAA;YACV,GAAG,EAAE,MAAM,CAAC,QAAQ,CAAC,GAAG;YACxB,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,MAAO;YAClC,QAAQ,EAAE;UAAQ,CAAA,CAAA,EAElBA,aAAAA,CAAC,mBAAmB,EAAA;YAClB,MAAM,EAAE,WAAW,CAAC,MAAO;YAC3B,eAAe,EAAE,eAAe;YAChC,sBAAsB,EAAE,sBAAuB;YAC/C,aAAa,EAAE,WAAW;YAC1B,QAAQ,EAAE;UAAS,CAAA,CACnB,CACU;QAEjB;;QAGD,IAAI,4BAA4B,CAC9B,QAAQ,EAAE,WAAW,EAAE,YAAY,EAAE,QAAQ,EAAE,iBAAiB,CACjE,IAAI,eAAe,KAAK,WAAW,CAAC,IAAI,EAAE;UACzC,OAAOA,aAAAA,CAAC,QAAQ,EAAA,QAAA,CAAA,CAAA,CAAA,EAAK,MAAM,EAAA;YAAE,QAAQ,EAAE;UAAQ,CAAA,CAAA,CAAI;QACpD;QAED,OAAOA,aAAAA,CAAC,mBAAmB,EAAA,IAAA,CAAG;OAC/B,CACiB;IAAA,CACrB,CACQ,EACXA,aAAAA,CAAC,QAAQ,EAAA;MACP,IAAI,EAAC,UAAU;MACf,SAAS,EAAE,UAAC,EAAiB,EAAA;YAAf,QAAQ,GAAA,EAAA,CAAA,QAAA;QAAY,OAAA,eAAe,CAAC,QAAQ,CAAC;MAAA;IAAA,CAAA,EAE1D,UAAC,MAAqB,EAAA;MAAK,OAC1BA,aAAAA,CAAC,QAAQ,EAAA,QAAA,CAAA,CAAA,CAAA,EACH,MAAM,EAAA;QACV,GAAG,EAAE,MAAM,CAAC,QAAQ,CAAC;MAAG,CAAA,CAAA,CACxB;IAAA,CACH,CACQ,CACJ;GAEZ;EArNM,iBAAA,CAAA,QAAQ,GAAG,gBAAgB;EAC3B,iBAAA,CAAA,WAAW,GAAG,gBAAgB;EAC9B,iBAAA,CAAA,YAAY,GAAG;IACpB,sBAAsB,EAAE,KAAK;IAC7B,sBAAsB,EAAE;GACzB;EACM,iBAAA,CAAA,UAAU,GAAG;IAClB,YAAY,EAAE,KAAK;IACnB,aAAa,EAAE,MAAM;IACrB,gBAAgB,EAAE,SAAS;IAC3B,aAAa,EAAE,MAAM;IACrB,kBAAkB,EAAE,WAAW;IAC/B,mBAAmB,EAAE,YAAY;IACjC,sBAAsB,EAAE,eAAe;IACvC,0BAA0B,EAAE,mBAAmB;IAC/C,oBAAoB,EAAE,aAAa;IACnC,oBAAoB,EAAE,aAAa;IACnC,iBAAiB,EAAE;GACpB;EAoMH,OAAA,iBAAC;CAvND,CAAgCE,aAAmB,CAAA;AAyNnD;AACA,IAAa,aAAa,GAKtB,iBAAiB;AChRrB,IAAMa,yBAAuB,GAAG,UAC9B,EAA4B,EAAA;MAA1B,eAAe,GAAA,EAAA,CAAA,eAAA;EACd,OAAA,oBAAoB,CAAC,eAAe,IAAI,EAAE,CAAC;AAA3C,CAA2C;AAEhD,IAAA,kBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAiCb,SAAAA,CAAAA,kBAAAA,EAAAA,MAAAA,CAAAA;EAAjC,SAAA,kBAAA,GAAA;;EA2IC;EA3HC,kBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACQ,IAAA,EAAA,GAUF,IAAI,CAAC,KAAK;MATZ,mBAAmB,GAAA,EAAA,CAAA,mBAAA;MACnB,oBAAoB,GAAA,EAAA,CAAA,oBAAA;MACL,UAAU,GAAA,EAAA,CAAA,aAAA;MACX,SAAS,GAAA,EAAA,CAAA,YAAA;MACL,OAAO,GAAA,EAAA,CAAA,gBAAA;MACL,SAAS,GAAA,EAAA,CAAA,kBAAA;MACP,WAAW,GAAA,EAAA,CAAA,oBAAA;MACjB,KAAK,GAAA,EAAA,CAAA,cAAA;MACrB,QAAQ,GAAA,EAAA,CAAA,QACI;IACd,IAAM,UAAU,GAAG,oBAAoB,CAAC,QAAS,CAAC;IAElD,OACEF,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC,gBAAgB;MACrB,YAAY,EAAE,CACZ;QAAE,IAAI,EAAE;MAAO,CAAE,EACjB;QAAE,IAAI,EAAE,cAAc;QAAE,QAAQ,EAAE,CAAC;MAAmB,CAAE,EACxD;QAAE,IAAI,EAAE,eAAe;QAAE,QAAQ,EAAE,CAAC;MAAoB,CAAE,EAC1D;QAAE,IAAI,EAAE,kBAAkB;QAAE,QAAQ,EAAE;MAAI,CAAE,EAC5C;QAAE,IAAI,EAAE,qBAAqB;QAAE,QAAQ,EAAE;MAAI,CAAE;IAChD,CAAA,EAEDA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,iBAAiB;MAAC,QAAQ,EAAEe;IAAuB,CAAA,CAAI,EAEpEf,aAAAA,CAAC,QAAQ,EAAA;MACP,IAAI,EAAC,WAAW;MAChB,SAAS,EAAE,UAAC,EAA8B,EAAA;YAA5B,QAAQ,GAAA,EAAA,CAAA,QAAA;UAAE,WAAW,GAAA,EAAA,CAAA,WAAA;QAAY,OAAA,kBAAkB,CAAC,QAAQ,EAAE,WAAW,CAAC;MAAA;IAAA,CAAA,EAEvF,UAAC,MAAsB,EAAA;MAAK,OAC3BA,aAAAA,CAAC,iBAAiB,EAAA,IAAA,EACf,UAAC,EAGD,EAAE,EAIF,EAAA;YANC,OAAO,GAAA,EAAA,CAAA,OAAA;UAAE,YAAY,GAAA,EAAA,CAAA,YAAA;UAAE,eAAe,GAAA,EAAA,CAAA,eAAA;UAAE,0BAA0B,GAAA,EAAA,CAAA,0BAAA;UAClE,sBAAsB,GAAA,EAAA,CAAA,sBAAA;UAAE,uBAAuB,GAAA,EAAA,CAAA,uBAAA;UAAE,kBAAkB,GAAA,EAAA,CAAA,kBAAA;YAEnE,mBAAmB,GAAA,EAAA,CAAA,mBAAA;UAAE,oBAAoB,GAAA,EAAA,CAAA,oBAAA;UACzC,sBAAsB,GAAA,EAAA,CAAA,sBAAA;UAAE,qBAAqB,GAAA,EAAA,CAAA,qBAAA;UAAE,2BAA2B,GAAA,EAAA,CAAA,2BAAA;UAC1E,EAAA,GAAA,EAAA,CAAA,iBAA4B;UAA5B,iBAAiB,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,YAAA,CAAA,CAAQ,GAAA,EAAA;QAEtB,IAAA,EAAA,GAA2C,MAAM,CAAC,WAAW,CAAC,MAAO;UAA7D,UAAU,GAAA,EAAA,CAAA,IAAA;UAAS,WAAW,GAAA,EAAA,CAAA,KAA+B;QAC3E,IAAM,oBAAoB,GAAG,YAAY,CACtC,MAAM,CAAC,UAAC,EAAQ,EAAA;cAAN,IAAI,GAAA,EAAA,CAAA,IAAA;UAAO,OAAA,IAAI,KAAK,eAAe;SAAA,CAAC,CAAC,MAAM,GAAG,CAAC;QAC5D,IAAM,cAAc,GAAG,sBAAsB,IACxC,sBAAsB,CAAC,UAAU,CAAC;QACvC,IAAM,eAAe,GAAG,uBAAuB,IAC1C,uBAAuB,CAAC,UAAU,CAAC,IACnC,oBAAoB;QACzB,IAAM,cAAc,GAAG,iBAAiB,CAAC,YAAY,EAAE,UAAU,CAAC;QAElE,OACEA,aAAAA,CAAC,UAAU,EAAA,QAAA,CAAA,CAAA,CAAA,EACL,MAAM,EAAA;UACV,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,MAAO;UAClC,eAAe,EAAE,eAAe,IAAI,oBAAoB;UACxD,eAAe,EACb,0BAA0B,KACtB,CAAC,CAAC,cAAc,IAAI,kBAAkB,KAAK,QAAQ,CAAC;UAE1D,aAAa,EAAE,UAAC,EAAS,EAAA;gBAAP,KAAK,GAAA,EAAA,CAAA,KAAA;YAAO,OAAA,sBAAsB,CAAC;cACnD,UAAU,EAAA,UAAA;cAAE,cAAc,EAAA,cAAA;cAAE,KAAK,EAAA;aAClC,CAAC;WAAA;UACF,YAAY,EAAE,UAAC,EAAS,EAAA;gBAAP,KAAK,GAAA,EAAA,CAAA,KAAA;YAAO,OAAA,qBAAqB,CAAC;cACjD,UAAU,EAAA,UAAA;cAAE,cAAc,EAAA,cAAA;cAAE,KAAK,EAAA;aAClC,CAAC;WAAA;UACF,kBAAkB,EAAE,YAAA;YAAM,OAAA,2BAA2B,EAAE;UAAA,CAAA;UACvD,YAAY,EAAE,UAAA,MAAM,EAAA;YAAI,OAAA,iBAAiB,CAAC;cACxC,WAAW,EAAE,MAAM,CAAC,WAAW;cAAG,MAAM,EAAA,MAAA;cAAE,YAAY,EAAA;aACvD,CAAC;UAAA;QAAA,CAAA,CAAA,EAEFA,aAAAA,CAAC,mBAAmB,EAAA;UAClB,IAAI,EAAC,uBAAuB;UAC5B,MAAM,EAAE;YACN,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC;UAC5B;QAAA,CAAA,CACD,EACFA,aAAAA,CAAC,OAAO,EAAA;UACN,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,MAAO;UAClC,KAAK,EAAE,MAAM,CAAC,WAAW,CAAC;QAAM,CAAA,EAE/B,mBAAmB,GAClBA,aAAAA,CAAC,SAAS,EAAA;UACR,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,MAAO;UAClC,KAAK,EAAE,MAAM,CAAC,WAAW,CAAC,KAAM;UAChC,SAAS,EAAE,yBAAyB,CAAC,OAAO,EAAE,UAAU,CAAC,IAAI,IAAI;UACjE,QAAQ,EAAE,CAAC,cAAc;UACzB,MAAM,EAAE,UAAC,EAAwB,EAAA;gBAAtB,SAAS,GAAA,EAAA,CAAA,SAAA;cAAE,SAAS,GAAA,EAAA,CAAA,SAAA;YAC7B,mBAAmB,CAAC;cAAE,UAAU,EAAA,UAAA;cAAE,SAAS,EAAA,SAAA;cAAE,SAAS,EAAA;YAAA,CAAE,CAAC;WAC1D;UACD,UAAU,EAAE;QAAU,CAAA,EAEtBA,aAAAA,CAAC,KAAK,EAAA,IAAA,EACH,WAAW,IAAI,UAAU,CACpB,CACE,GAEZA,aAAAA,CAAC,KAAK,EAAA,IAAA,EACH,WAAW,IAAI,UAAU,CAE7B,CACO,EACT,oBAAoB,GACnBA,aAAAA,CAAC,WAAW,EAAA;UACV,QAAQ,EAAE,CAAC,eAAe;UAC1B,OAAO,EAAE,YAAA;YAAM,OAAA,oBAAoB,CAAC;cAAE,UAAU,EAAA;YAAA,CAAE,CAAC;UAAA;QAAA,CAAA,CACnD,GACA,IAAI,CACG;OAEhB,CACiB;IAAA,CACrB,CACQ,EACXA,aAAAA,CAAC,QAAQ,EAAA;MACP,IAAI,EAAC,UAAU;MACf,SAAS,EAAE,UAAC,EAAiB,EAAA;YAAf,QAAQ,GAAA,EAAA,CAAA,QAAA;QAAY,OAAA,CAAC,CAAC,iBAAiB,CAAC,QAAQ,CAAC;MAAA;IAAA,CAAA,EAE9D,UAAC,MAAqB,EAAA;MAAK,OAAA,aAAA,CAAC,SAAS,EAAA,QAAA,CAAA,CAAA,CAAA,EAAK,MAAM,CAAA,CAAI;IAAA,CAAA,CAC5C,CACJ;GAEZ;EAzIM,kBAAA,CAAA,QAAQ,GAAG,kBAAkB;EAC7B,kBAAA,CAAA,YAAY,GAAG;IACpB,mBAAmB,EAAE,KAAK;IAC1B,oBAAoB,EAAE,KAAK;IAC3B,QAAQ,EAAE,CAAA;GACX;EACM,kBAAA,CAAA,UAAU,GAAG;IAClB,aAAa,EAAE,MAAM;IACrB,YAAY,EAAE,KAAK;IACnB,gBAAgB,EAAE,SAAS;IAC3B,kBAAkB,EAAE,WAAW;IAC/B,cAAc,EAAE,OAAO;IACvB,oBAAoB,EAAE;GACvB;EA6HH,OAAA,kBAAC;CA3ID,CAAiCE,aAAmB,CAAA;AA6IpD,kBAAkB,CAAC,UAAU,GAAG;EAC9B,aAAa,EAAE,MAAM;EACrB,YAAY,EAAE,KAAK;EACnB,gBAAgB,EAAE,SAAS;EAC3B,kBAAkB,EAAE,WAAW;EAC/B,cAAc,EAAE,OAAO;EACvB,oBAAoB,EAAE;CACvB;AAED;;;;;AAKA,IAAa,cAAc,GAGvB,kBAAkB;AC/JtB,IAAMc,iBAAe,GAAG,UAAC,KAA6B,EAAA;EAAK,OAAA,aAAA,CAAC,mBAAmB,EAAA;IAAC,MAAM,EAAE;EAAK,CAAA,CAAI;AAAA,CAAA;AAEjG,IAAM,4BAA4B,GAAG,UACnC,EAAyF,EAAA;MAA/D,eAAe,GAAA,EAAA,CAAA,sBAAA;IAAE,uBAAuB,GAAA,EAAA,CAAA,uBAAA;IAAE,UAAU,GAAA,EAAA,CAAA,UAAA;EAC3E,OAAA,oBAAoB,CACvB,eAAe,EAAE,uBAAuB,EAAE,UAAU,CACrD;AAFI,CAEJ;AAED,IAAM,8BAA8B,GAAG,UACrC,EAAmC,EAAA;MAAjC,QAAQ,GAAA,EAAA,CAAA,QAAA;IAAE,YAAY,GAAA,EAAA,CAAA,YAAA;EACrB,OAAA,sBAAsB,CAAC,QAAQ,EAAE,YAAY,CAAC;AAA9C,CAA8C;AAEnD,IAAA,mBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAkCd,SAAAA,CAAAA,mBAAAA,EAAAA,MAAAA,CAAAA;EAAlC,SAAA,mBAAA,GAAA;;EA6HC;EApHC,mBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACQ,IAAA,EAAA,GAMF,IAAI,CAAC,KAAK;MALG,IAAI,GAAA,EAAA,CAAA,aAAA;MACL,GAAG,GAAA,EAAA,CAAA,YAAA;MACU,UAAU,GAAA,EAAA,CAAA,yBAAA;MACb,aAAa,GAAA,EAAA,CAAA,sBAAA;MACrC,WAAW,GAAA,EAAA,CAAA,WACC;IAEd,IAAM,uBAAuB,GAAG,UAC9B,EAA0C,EAAA;UAAxC,eAAe,GAAA,EAAA,CAAA,eAAA;QAAE,YAAY,GAAA,EAAA,CAAA,YAAA;MAC5B,OAAA,kBAAkB,CACrB,eAAe,EAAE,WAAW,EAAE,YAAY,CAC3C;KAAA;IACD,IAAM,+BAA+B,GAAG,UACtC,EAA0C,EAAA;UAAxC,eAAe,GAAA,EAAA,CAAA,eAAA;QAAE,YAAY,GAAA,EAAA,CAAA,YAAA;MAC5B,OAAA,gCAAgC,CACnC,eAAe,EAAE,YAAY,EAAE,WAAW,CAC3C;KAAA;IACD,IAAM,UAAU,GAAG,gBAAgB,CAAC,WAAW,CAAC;IAEhD,OACEF,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC,iBAAiB;MACtB,YAAY,EAAE,CACZ;QAAE,IAAI,EAAE;MAAO,CAAE,EACjB;QAAE,IAAI,EAAE;MAAgB,CAAE,EAC1B;QAAE,IAAI,EAAE,gBAAgB;QAAE,QAAQ,EAAE;MAAI,CAAE,EAC1C;QAAE,IAAI,EAAE,iBAAiB;QAAE,QAAQ,EAAE;MAAI,CAAE,EAC3C;QAAE,IAAI,EAAE,uBAAuB;QAAE,QAAQ,EAAE;MAAI,CAAE,EACjD;QAAE,IAAI,EAAE,eAAe;QAAE,QAAQ,EAAE;MAAI,CAAE;IAC1C,CAAA,EAEDA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,iBAAiB;MAAC,QAAQ,EAAE;IAAuB,CAAA,CAAI,EAEpEA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,wBAAwB;MAAC,QAAQ,EAAE;IAA8B,CAAA,CAAI,EAClFA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,yBAAyB;MAAC,QAAQ,EAAE;IAA+B,CAAA,CAAI,EACpFA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,YAAY;MAAC,KAAK,EAAE;IAAU,CAAA,CAAI,EAC/CA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,sBAAsB;MAAC,QAAQ,EAAE;IAA4B,CAAA,CAAI,EAE9EA,aAAAA,CAAC,QAAQ,EAAA;MACP,IAAI,EAAC,WAAW;MAChB,SAAS,EAAE,UAAC,EAAiB,EAAA;YAAf,QAAQ,GAAA,EAAA,CAAA,QAAA;QAAY,OAAA,mBAAmB,CAAC,QAAQ,CAAC;MAAA;IAAA,CAAA,EAE9D,UAAC,MAA8B,EAAA;MAAK,OACnCA,aAAAA,CAAC,iBAAiB,EAAA,IAAA,EACf,UAAC,EAKD,EAAA;YAJC,YAAY,GAAA,EAAA,CAAA,YAAA;UACZ,eAAe,GAAA,EAAA,CAAA,eAAA;UACf,uBAAuB,GAAA,EAAA,CAAA,uBAAA;UACC,eAAe,GAAA,EAAA,CAAA,sBAAA;UAAwB,gBAAgB,GAAA,EAAA,CAAA,oBAAA;QAE/E,IAAM,aAAa,GAAG,gBAAgB,CACpC,MAAM,EACN,eAAe,EAAE,YAAY,EAC7B,WAAW,EAAE,uBAAuB,EAAE,eAAe,EACrD,gBAAgB,CACjB;QACD,QAAQ,aAAa,CAAC,IAAI;UACxB,KAAK,qBAAqB;YACxB,OAAOA,aAAAA,CAAC,mBAAmB,EAAA;cAAC,MAAM,EAAA,QAAA,CAAA,CAAA,CAAA,EAAO,MAAM;YAAA,CAAA,CAAM;UAEvD,KAAK,eAAe;YAClB,OAAOA,aAAAA,CAAC,aAAa,EAAA,IAAA,CAAG;UAE1B,KAAK,eAAe;YAAE;cACpB,IAAM,EAAA,GAAwB,aAAa,CAAC,OAAQ;gBAA5C,KAAK,GAAA,EAAA,CAAA,KAAA;gBAAK,OAAO,GAAA,MAAA,CAAA,EAAA,EAAnB,CAAA,OAAA,CAAqB,CAAyB;cACpD,OACEA,aAAAA,CAAC,IAAI,EAAA,QAAA,CAAA,CAAA,CAAA,EAAK,MAAM,EAAM,OAAO,CAAA,EAC1B,KAAK,CACD;YAEV;UAED,KAAK,gBAAgB;YACnB,OACEA,aAAAA,CAAC,mBAAmB,EAAA;cAClB,IAAI,EAAC,WAAW;cAChB,MAAM,EAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAO,MAAM,CAAA,EAAK,aAAa,CAAC,OAAO;YAAA,CAAA,CAC7C;UAGN,KAAK,oBAAoB;YACvB,OACEA,aAAAA,CAAC,IAAI,EAAA,QAAA,CAAA,CAAA,CAAA,EACC,MAAM,EACN,aAAa,CAAC,OAAO,EAAA;cACzB,KAAK,EAAE;gBAAE,UAAU,EAAE;cAAK;YAAE,CAAA,CAAA,EAE3B,GAAG,CACC;UAEX;YACE,OAAO,IAAI;QAAC;OAEjB,CACiB;IAAA,CACrB,CACQ,EACXA,aAAAA,CAAC,QAAQ,EAAA;MACP,IAAI,EAAC,WAAW;MAChB,SAAS,EAAE,UAAC,EAA8B,EAAA;YAA5B,QAAQ,GAAA,EAAA,CAAA,QAAA;UAAE,WAAW,GAAA,EAAA,CAAA,WAAA;QAAY,OAAA,kBAAkB,CAAC,QAAQ,EAAE,WAAW,CAAC;MAAA;IAAA,CAAA,EAEvF,UAAC,MAA8B,EAAA;MAAK,OACnCA,aAAAA,CAAC,UAAU,EAAA,QAAA,CAAA;QAAC,SAAS,EAAEgB;MAAe,CAAA,EAAM,MAAM,CAAA,CAAI;IAAA,CACvD,CACQ,EACXhB,aAAAA,CAAC,QAAQ,EAAA;MACP,IAAI,EAAC,UAAU;MACf,SAAS,EAAE,UAAC,EAAiB,EAAA;YAAf,QAAQ,GAAA,EAAA,CAAA,QAAA;QAAY,OAAA,gBAAgB,CAAC,QAAQ,CAAC;MAAA;IAAA,CAAA,EAE3D,UAAC,MAAqB,EAAA;MAAK,OAAA,aAAA,CAAC,GAAG,EAAA,QAAA,CAAA,CAAA,CAAA,EAAK,MAAM,CAAA,CAAI;IAAA,CAAA,CACtC,CACJ;GAEZ;EA3HM,mBAAA,CAAA,QAAQ,GAAG,eAAe;EAC1B,mBAAA,CAAA,UAAU,GAAG;IAClB,aAAa,EAAE,MAAM;IACrB,YAAY,EAAE,KAAK;IACnB,yBAAyB,EAAE,kBAAkB;IAC7C,sBAAsB,EAAE;GACzB;EAsHH,OAAA,mBAAC;CA7HD,CAAkCE,aAAmB,CAAA;AA+HrD,mBAAmB,CAAC,UAAU,GAAG;EAC/B,aAAa,EAAE,MAAM;EACrB,YAAY,EAAE,KAAK;EACnB,yBAAyB,EAAE,kBAAkB;EAC7C,sBAAsB,EAAE;CACzB;AAED;AACA,IAAa,eAAe,GAGxB,mBAAmB;ACtJvB,IAAMG,oBAAkB,GAAG,CACzB;EAAE,IAAI,EAAE;AAAgB,CAAE,EAC1B;EAAE,IAAI,EAAE;AAAO,CAAE,EACjB;EAAE,IAAI,EAAE,kBAAkB;EAAE,QAAQ,EAAE;AAAI,CAAE,CAC7C;AAED,IAAMO,iBAAe,GAAG;EACtB,iBAAiB,EAAE,WAAW;EAC9B,QAAQ,EAAE,UAAU;EACpB,WAAW,EAAE,kBAAkB;EAC/B,UAAU,EAAE,aAAa;EACzB,QAAQ,EAAE,WAAW;EACrB,KAAK,EAAE,QAAQ;EACf,QAAQ,EAAE,gBAAgB;EAC1B,WAAW,EAAE,cAAc;EAC3B,kBAAkB,EAAE,0BAA0B;EAC9C,QAAQ,EAAE,WAAW;EACrB,eAAe,EAAE;CAClB;AAED,IAAA,kBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAiCV,SAAAA,CAAAA,kBAAAA,EAAAA,MAAAA,CAAAA;EAe/B,SAAA,kBAAA,CAAY,KAAK,EAAA;IAAjB,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAK,CAAC,IAAA,IAAA;IAEZ,KAAI,CAAC,KAAK,GAAG;MACX,gBAAgB,EAAE,CAAA;KACnB;;EACF;EAED,kBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IAAA,IAAA,KAAA,GAAA,IAAA;IACQ,IAAA,EAAA,GAUF,IAAI,CAAC,KAAK;MATZ,SAAS,GAAA,EAAA,CAAA,SAAA;MACT,kBAAkB,GAAA,EAAA,CAAA,kBAAA;MACH,UAAU,GAAA,EAAA,CAAA,aAAA;MACX,SAAS,GAAA,EAAA,CAAA,YAAA;MACE,cAAc,GAAA,EAAA,CAAA,uBAAA;MACvC,aAAa,GAAA,EAAA,CAAA,aAAA;MACb,qBAAqB,GAAA,EAAA,CAAA,qBAAA;MACJ,eAAe,GAAA,EAAA,CAAA,eAAA;MAChC,QAAQ,GAAA,EAAA,CAAA,QACI;IAEd,IAAM,UAAU,GAAG,oBAAoB,CAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAMU,iBAAe,CAAA,EAAK,QAAQ,CAAA,CAAG;IAE5E,IAAM,uBAAuB,GAAG,UAC9B,EAA4B,EAAA;UAA1B,eAAe,GAAA,EAAA,CAAA,eAAA;MACd,OAAA,yBAAyB,CAAC,eAAe,EAAE,SAAU,CAAC;KAAA;IAE3D,OACEZ,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC,gBAAgB;MACrB,YAAY,EAAEK;IAAkB,CAAA,EAEhCL,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,iBAAiB;MAAC,QAAQ,EAAE;IAAuB,CAAA,CAAI,EACpEA,aAAAA,CAAC,QAAQ,EAAA;MACP,IAAI,EAAC,WAAW;MAChB,SAAS,EAAE,UAAC,EAA8B,EAAA;YAA5B,QAAQ,GAAA,EAAA,CAAA,QAAA;UAAE,WAAW,GAAA,EAAA,CAAA,WAAA;QAAY,OAAA,iBAAiB,CAAC,QAAQ,EAAE,WAAW,CAAC;MAAA;IAAA,CAAA,EAEtF,UAAC,MAAsB,EAAA;MAAK,OAC3BA,aAAAA,CAAC,iBAAiB,EAAA,IAAA,EACf,UACC,EAAiF,EACjF,EAA4C,EAAA;YAD1C,OAAO,GAAA,EAAA,CAAA,OAAA;UAAE,wBAAwB,GAAA,EAAA,CAAA,wBAAA;UAAE,4BAA4B,GAAA,EAAA,CAAA,4BAAA;UAAE,YAAY,GAAA,EAAA,CAAA,YAAA;YAC7E,kBAAkB,GAAA,EAAA,CAAA,kBAAA;UAAE,WAAW,GAAA,EAAA,CAAA,WAAA;QAEzB,IAAA,gBAAgB,GAAK,KAAI,CAAC,KAAK,CAAA,gBAAf;QAChB,IAAM,UAAU,GAAK,MAAM,CAAC,WAAW,CAAC,MAAO,CAAA,IAA/B;QACxB,IAAM,MAAM,GAAG,qBAAqB,CAAC,OAAO,EAAE,UAAU,CAAE;QAC1D,IAAM,QAAQ,GAAG,UACf,MAA2B,EAAA;UAE3B,IAAI,YAAY,EAAE;YAChB,WAAW,CAAC,YAAY,CAAC;UAC1B;UACD,kBAAkB,CAAC;YAAE,UAAU,EAAA,UAAA;YAAE,MAAM,EAAA;UAAA,CAAE,CAAC;SAC3C;QACD,IAAM,sBAAsB,GAAG,yBAAyB,CACtD,4BAA4B,EAAE,UAAU,CACzC;QACD,IAAM,uBAAuB,GAAG,0BAA0B,CACxD,gBAAgB,EAAE,UAAU,EAAE,MAAM,EAAE,sBAAsB,CAC7D;QACD,IAAM,2BAA2B,GAAG,UAAC,KAAa,EAAA;;UAChD,KAAI,CAAC,QAAQ,CAAC;YACZ,gBAAgB,EAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACX,gBAAgB,CAAA,GAAA,EAAA,GAAA,CAAA,CAAA,EAAA,EAAA,CAClB,UAAU,CAAA,GAAG,KAAK,EAAA,EAAA;WAEtB,CAAC;UACF,IAAI,MAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;YAC/C,QAAQ,CAAC;cAAE,KAAK,EAAE,MAAM,CAAC,KAAK;cAAE,SAAS,EAAE;YAAK,CAAE,CAAC;UACpD;SACF;QACD,IAAM,uBAAuB,GAAG,UAAC,KAAU,EAAA;UAAK,OAAA,QAAQ,CAAC,CAAC,kBAAkB,CAAC,KAAK,CAAC,GAC/E;YAAE,KAAK,EAAA,KAAA;YAAE,SAAS,EAAE;UAAuB,CAAE,GAC7C,IAAI,CAAC;QAAA,CAAA;QACT,IAAM,gBAAgB,GAAG,wBAAwB,CAAC,UAAU,CAAC;QAC7D,OACEA,aAAAA,CAAC,mBAAmB,EAAA;UAClB,IAAI,EAAC,aAAa;UAClB,MAAM,EAAE;YACN,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,MAAM;YACjC,KAAK,EAAE,MAAM,GAAG,MAAM,CAAC,KAAK,GAAG,SAAS;YACxC,aAAa,EAAE,uBAAuB;YACtC,QAAQ,EAAE,CAAC;UACZ;QAAA,CAAA,EAEA,UAAA,OAAO,EAAA;UAAI,OACVA,aAAAA,CAAC,UAAU,EAAA,QAAA,CAAA,CAAA,CAAA,EACL,MAAM,EAAA;YACV,UAAU,EAAE,UAAU;YACtB,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,MAAO;YAClC,MAAM,EAAE,MAAM;YACd,gBAAgB,EAAE,gBAAgB;YAClC,QAAQ,EAAE;UAAQ,CAAA,CAAA,EAEjB,kBAAkB,GAEfA,aAAAA,CAAC,cAAc,EAAA;YACb,qBAAqB,EAAE,qBAAqB;YAC5C,aAAa,EAAE,aAAa;YAC5B,KAAK,EAAE,uBAAuB;YAC9B,eAAe,EAAE,sBAAkC;YACnD,QAAQ,EAAE,2BAA2B;YACrC,QAAQ,EAAE,CAAC,gBAAgB;YAC3B,UAAU,EAAE;UAAU,CAAA,CACtB,GACA,IAAI,EAET,OAAO,IACNA,aAAAA,CAAC,eAAe,EAAA;YACd,KAAK,EAAE,MAAM,GAAG,MAAM,CAAC,KAAK,GAAG,SAAS;YACxC,QAAQ,EAAE,CAAC,gBAAgB;YAC3B,UAAU,EAAE,UAAU;YACtB,QAAQ,EAAE;UAAuB,CAAA,CAEpC,CACU;QAAA,CACd,CACmB;OAEzB,CACiB;IAAA,CACrB,CACQ,EACXA,aAAAA,CAAC,QAAQ,EAAA;MACP,IAAI,EAAC,UAAU;MACf,SAAS,EAAE,UAAC,EAAiB,EAAA;YAAf,QAAQ,GAAA,EAAA,CAAA,QAAA;QAAY,OAAA,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC;MAAA;IAAA,CAAA,EAE7D,UAAC,MAAqB,EAAA;MAAK,OAAA,aAAA,CAAC,SAAS,EAAA,QAAA,CAAA,CAAA,CAAA,EAAK,MAAM,CAAA,CAAI;IAAA,CAAA,CAC5C,CACJ;GAEZ;EAjJM,kBAAA,CAAA,QAAQ,GAAG,iBAAiB;EAC5B,kBAAA,CAAA,YAAY,GAAG;IACpB,kBAAkB,EAAE,KAAK;IACzB,QAAQ,EAAE,CAAA;GACX;EACM,kBAAA,CAAA,UAAU,GAAG;IAClB,YAAY,EAAE,KAAK;IACnB,aAAa,EAAE,MAAM;IACrB,uBAAuB,EAAE,gBAAgB;IACzC,aAAa,EAAE,MAAM;IACrB,eAAe,EAAE,QAAQ;IACzB,qBAAqB,EAAE;GACxB;EAsIH,OAAA,kBAAC;CAnJD,CAAiCE,aAAmB,CAAA;AAqJpD;AACA,IAAa,cAAc,GAGvB,kBAAkB;ACjLtB,IAAMG,oBAAkB,GAAG,CACzB;EAAE,IAAI,EAAE;AAAc,CAAE,EACxB;EAAE,IAAI,EAAE;AAAO,CAAE,EACjB;EAAE,IAAI,EAAE,kBAAkB;EAAE,QAAQ,EAAE;AAAI,CAAE,CAC7C;AAED,IAAA,gBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA+BH,SAAAA,CAAAA,gBAAAA,EAAAA,MAAAA,CAAAA;EAA/B,SAAA,gBAAA,GAAA;;EA2GC;EAnGC,gBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACQ,IAAA,EAAA,GAIF,IAAI,CAAC,KAAK;MAHG,QAAQ,GAAA,EAAA,CAAA,aAAA;MACT,OAAO,GAAA,EAAA,CAAA,YAAA;MACrB,SAAS,GAAA,EAAA,CAAA,SACG;IAEd,IAAM,qBAAqB,GAAG,UAC5B,EAAoD,EAAA;UAAlD,aAAa,GAAA,EAAA,CAAA,aAAA;QAAE,aAAa,GAAA,EAAA,CAAA,aAAA;QAAE,SAAS,GAAA,EAAA,CAAA,SAAA;MACtC,OAAA,oBAAoB,CAAC,aAAa,EAAE,aAAa,EAAE,SAAS,EAAE,SAAS,CAAC;KAAA;IAE7E,OACEF,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC,cAAc;MACnB,YAAY,EAAEK;IAAkB,CAAA,EAEhCL,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,eAAe;MAAC,QAAQ,EAAE;IAAqB,CAAA,CAAI,EAChEA,aAAAA,CAAC,QAAQ,EAAA;MACP,IAAI,EAAC,WAAW;MAChB,SAAS,EAAE,UAAC,EAA8B,EAAA;YAA5B,QAAQ,GAAA,EAAA,CAAA,QAAA;UAAE,WAAW,GAAA,EAAA,CAAA,WAAA;QAAY,OAAA,eAAe,CAAC,QAAQ,EAAE,WAAW,CAAC;MAAA;IAAA,CAAA,EAEpF,UAAC,MAAsB,EAAA;MAAK,OAC3BA,aAAAA,CAAC,iBAAiB,EAAA,IAAA,EACf,UAAC,EAKD,EAAE,EAGF,EAAA;YAPC,YAAY,GAAA,EAAA,CAAA,YAAA;UACZ,eAAe,GAAA,EAAA,CAAA,eAAA;UACf,UAAU,GAAA,EAAA,CAAA,UAAA;UACV,sBAAsB,GAAA,EAAA,CAAA,sBAAA;YAEtB,cAAc,GAAA,EAAA,CAAA,cAAA;UACd,SAAS,GAAA,EAAA,CAAA,SAAA;QAEH,IAAA,EAAA,GAAiB,MAAM,CAAC,QAAQ;UAA9B,KAAK,GAAA,EAAA,CAAA,KAAA;UAAE,GAAG,GAAA,EAAA,CAAA,GAAoB;QAC9B,IAAA,MAAM,GAAK,MAAM,CAAC,WAAW,CAAA,MAAvB;QACN,IAAM,UAAU,GAAK,MAAO,CAAA,IAAZ;QAExB,IAAM,KAAK,GAAG,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC;QAC9C,IAAM,UAAU,GAAG,KAAK,GACpB,GAAG,G,sBACE,GAAG,CAAA,EAAK,YAAY,CAAC,UAAU,EAAE,KAAM,CAAC,CAAE;QAEnD,IAAM,KAAK,GAAG,YAAY,CAAC,UAAU,EAAE,UAAU,CAAC;QAClD,IAAM,aAAa,GAAG,UAAC,QAAa,EAAA;UAClC,IAAM,UAAU,GAAG;YACjB,KAAK,EAAA,KAAA;YACL,MAAM,EAAE,eAAe,CAAC,UAAU,EAAE,QAAQ,EAAE,UAAU;WACzD;UACD,IAAI,KAAK,EAAE;YACT,cAAc,CAAC,UAAU,CAAC;WAC3B,MAAM;YACL,SAAS,CAAC,UAAU,CAAC;UACtB;SACF;QACD,IAAM,cAAc,GAAG,sBAAsB,CAAC,UAAU,CAAC;QACzD,OACEA,aAAAA,CAAC,mBAAmB,EAAA;UAClB,IAAI,EAAC,aAAa;UAClB,MAAM,EAAE;YACN,MAAM,EAAA,MAAA;YACN,GAAG,EAAA,GAAA;YACH,KAAK,EAAA,KAAA;YACL,aAAa,EAAA,aAAA;YACb,QAAQ,EAAE,CAAC;UACZ;QAAA,CAAA,EAEA,UAAA,OAAO,EAAA;UAAI,OACVA,aAAAA,CAAC,QAAQ,EAAA,QAAA,CAAA,CAAA,CAAA,EACH,MAAM,EAAA;YACV,GAAG,EAAE,GAAG;YACR,MAAM,EAAE,MAAO;YACf,KAAK,EAAE,KAAK;YACZ,cAAc,EAAE,cAAc;YAC9B,aAAa,EAAE;UAAa,CAAA,CAAA,EAE3B,OAAO,CACC;QAAA,CACZ,CACmB;OAEzB,CACiB;IAAA,CACrB,CACQ,EACXA,aAAAA,CAAC,QAAQ,EAAA;MACP,IAAI,EAAC,UAAU;MACf,SAAS,EAAE,UACT,EAAiB,EAAA;YAAf,QAAQ,GAAA,EAAA,CAAA,QAAA;QACP,OAAA,CAAC,EAAE,cAAc,CAAC,QAAQ,CAAC,IAAI,eAAe,CAAC,QAAQ,CAAC,CAAC;MAAA;IAAA,CAAA,EAE7D,UAAC,MAAqB,EAAA;MAAK,OAC1BA,aAAAA,CAAC,OAAO,EAAA,QAAA,CAAA,CAAA,CAAA,EACF,MAAM,EAAA;QACV,GAAG,EAAE,MAAM,CAAC,QAAQ,CAAC;MAAG,CAAA,CAAA,CACxB;IAAA,CACH,CACQ,CACJ;GAEZ;EAzGM,gBAAA,CAAA,cAAc,GAAG,gBAAgB;EACjC,gBAAA,CAAA,aAAa,GAAG,eAAe;EAC/B,gBAAA,CAAA,UAAU,GAAG;IAClB,YAAY,EAAE,KAAK;IACnB,aAAa,EAAE;GAChB;EAqGH,OAAA,gBAAC;CA3GD,CAA+BE,aAAmB,CAAA;AA6GlD;AACA,IAAa,YAAY,GAKrB,gBAAgB;ACzHpB,IAAMG,oBAAkB,GAAG,CACzB;EAAE,IAAI,EAAE;AAAc,CAAE,EACxB;EAAE,IAAI,EAAE;AAAO,CAAE,CAClB;AAED,IAAMO,iBAAe,GAAG;EACtB,UAAU,EAAE,KAAK;EACjB,WAAW,EAAE,MAAM;EACnB,aAAa,EAAE,QAAQ;EACvB,aAAa,EAAE,MAAM;EACrB,aAAa,EAAE;CAChB;AAED,IAAA,mBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAkCV,SAAAA,CAAAA,mBAAAA,EAAAA,MAAAA,CAAAA;EAAlC,SAAA,mBAAA,GAAA;;EAoIC;EArHC,mBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACQ,IAAA,EAAA,GASF,IAAI,CAAC,KAAK;MARG,IAAI,GAAA,EAAA,CAAA,aAAA;MACE,UAAU,GAAA,EAAA,CAAA,mBAAA;MACb,OAAO,GAAA,EAAA,CAAA,gBAAA;MACzB,cAAc,GAAA,EAAA,CAAA,cAAA;MACd,eAAe,GAAA,EAAA,CAAA,eAAA;MACf,iBAAiB,GAAA,EAAA,CAAA,iBAAA;MACjB,KAAK,GAAA,EAAA,CAAA,KAAA;MACL,QAAQ,GAAA,EAAA,CAAA,QACI;IACd,IAAM,UAAU,GAAG,oBAAoB,CAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAMU,iBAAe,CAAA,EAAK,QAAQ,CAAA,CAAG;IAC5E,IAAM,oBAAoB,GAAG,UAC3B,EAAyB,EAAA;UAAvB,YAAY,GAAA,EAAA,CAAA,YAAA;MACX,OAAA,uBAAuB,CAAC,YAAY,EAAE,KAAM,CAAC;KAAA;IAElD,OACEZ,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC,iBAAiB;MACtB,YAAY,EAAEK;IAAkB,CAAA,EAEhCL,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,cAAc;MAAC,QAAQ,EAAE;IAAoB,CAAA,CAAI,EAE9DA,aAAAA,CAAC,QAAQ,EAAA;MACP,IAAI,EAAC,WAAW;MAChB,SAAS,EAAE,UACT,EAA8B,EAAA;YAA5B,QAAQ,GAAA,EAAA,CAAA,QAAA;UAAE,WAAW,GAAA,EAAA,CAAA,WAAA;QACpB,OAAA,8BAA8B,CAAC,QAAQ,EAAE,WAAW,CAAC;MAAA;IAAA,CAAA,EAEzD,UAAC,MAAsB,EAAA;MAAK,OAC3BA,aAAAA,CAAC,iBAAiB,EAAA,IAAA,EACf,UAAC,OAAO,EAAE,OAAO,EAAA;QAAK,OACrBA,aAAAA,CAAC,UAAU,EAAA,QAAA,CAAA,CAAA,CAAA,EAAK,MAAM,CAAA,EACnB,cAAc,IACbA,aAAAA,CAAC,OAAO,EAAA;UACN,EAAE,EAAC,KAAK;UACR,IAAI,EAAE,UAAU,CAAC,YAAY,CAAC;UAC9B,SAAS,EAAE,YAAA;YAAM,OAAA,OAAO,CAAC,MAAM,EAAE;UAAA;QAAA,CAAA,CAEpC,CACU;MAAA,CACd,CACiB;IAAA,CACrB,CACQ,EACXA,aAAAA,CAAC,QAAQ,EAAA;MACP,IAAI,EAAC,WAAW;MAChB,SAAS,EAAE,UACT,EAA8B,EAAA;YAA5B,QAAQ,GAAA,EAAA,CAAA,QAAA;UAAE,WAAW,GAAA,EAAA,CAAA,WAAA;QACpB,OAAA,uBAAuB,CAAC,QAAQ,EAAE,WAAW,CAAC;MAAA;IAAA,CAAA,EAElD,UAAC,MAAsB,EAAA;MAAK,OAC3BA,aAAAA,CAAC,iBAAiB,EAAA,IAAA,EACf,UAAC,OAAO,EAAE,OAAO,EAAA;QAChB,IAAM,MAAM,GAAG,cAAc,CAAC,MAAM,CAAC,QAAQ,CAAC;QAC9C,IAAM,KAAK,GAAG,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC;QAC9C,IAAM,SAAS,GAAG,MAAM,IAAI,KAAK;QACjC,IAAM,MAAM,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC;QACtC,OACEA,aAAAA,CAAC,IAAI,EAAA,QAAA,CAAA,CAAA,CAAA,EACC,MAAM,EAAA;UACV,GAAG,EAAE,MAAM,CAAC,QAAQ,CAAC;QAAG,CAAA,CAAA,EAEvB,eAAe,IAAI,CAAC,SAAS,IAC5BA,aAAAA,CAAC,OAAO,EAAA;UACN,EAAE,EAAC,MAAM;UACT,IAAI,EAAE,UAAU,CAAC,aAAa,CAAC;UAC/B,SAAS,EAAE,YAAA;YAAM,OAAA,OAAO,CAAC,aAAa,CAAC;cAAE,MAAM,EAAA;YAAA,CAAE,CAAC;UAAA;QAAA,CAAA,CAErD,EACA,iBAAiB,IAAI,CAAC,SAAS,IAC9BA,aAAAA,CAAC,OAAO,EAAA;UACN,EAAE,EAAC,QAAQ;UACX,IAAI,EAAE,UAAU,CAAC,eAAe,CAAC;UACjC,SAAS,EAAE,YAAA;YACT,OAAO,CAAC,UAAU,CAAC;cAAE,MAAM,EAAA;YAAA,CAAE,CAAC;YAC9B,OAAO,CAAC,iBAAiB,CAAC;cAAE,MAAM,EAAA;YAAA,CAAE,CAAC;UACtC;QAAA,CAAA,CAEJ,EACA,SAAS,IACRA,aAAAA,CAAC,OAAO,EAAA;UACN,EAAE,EAAC,QAAQ;UACX,IAAI,EAAE,UAAU,CAAC,eAAe,CAAC;UACjC,SAAS,EAAE,YAAA;YACT,IAAI,KAAK,EAAE;cACT,OAAO,CAAC,eAAe,CAAC;gBAAE,MAAM,EAAA;cAAA,CAAE,CAAC;aACpC,MAAM;cACL,OAAO,CAAC,YAAY,CAAC;gBAAE,MAAM,EAAA;cAAA,CAAE,CAAC;cAChC,OAAO,CAAC,iBAAiB,CAAC;gBAAE,MAAM,EAAA;cAAA,CAAE,CAAC;YACtC;UACF;QAAA,CAAA,CAEJ,EACA,SAAS,IACRA,aAAAA,CAAC,OAAO,EAAA;UACN,EAAE,EAAC,QAAQ;UACX,IAAI,EAAE,UAAU,CAAC,eAAe,CAAC;UACjC,SAAS,EAAE,YAAA;YACT,IAAI,KAAK,EAAE;cACT,OAAO,CAAC,eAAe,CAAC;gBAAE,MAAM,EAAA;cAAA,CAAE,CAAC;aACpC,MAAM;cACL,OAAO,CAAC,YAAY,CAAC;gBAAE,MAAM,EAAA;cAAA,CAAE,CAAC;cAChC,OAAO,CAAC,iBAAiB,CAAC;gBAAE,MAAM,EAAA;cAAA,CAAE,CAAC;YACtC;UACF;QAAA,CAAA,CAEJ,CACI;OAEV,CACiB;IAAA,CACrB,CACQ,CACJ;GAEZ;EAlIM,mBAAA,CAAA,WAAW,GAAG,uBAAuB;EACrC,mBAAA,CAAA,YAAY,GAAG;IACpB,cAAc,EAAE,KAAK;IACrB,eAAe,EAAE,KAAK;IACtB,iBAAiB,EAAE,KAAK;IACxB,KAAK,EAAE,GAAG;IACV,QAAQ,EAAE,CAAA;GACX;EACM,mBAAA,CAAA,UAAU,GAAG;IAClB,aAAa,EAAE,MAAM;IACrB,mBAAmB,EAAE,YAAY;IACjC,gBAAgB,EAAE;GACnB;EAuHH,OAAA,mBAAC;CApID,CAAkCE,aAAmB,CAAA;AAsIrD;;;;AAIA,IAAa,eAAe,GAGxB,mBAAmB;ACxJvB,IAAMG,oBAAkB,GAAG,CACzB;EAAE,IAAI,EAAE;AAAO,CAAE,CAClB;AAED;AACA,IAAA,uBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAsCH,SAAAA,CAAAA,uBAAAA,EAAAA,MAAAA,CAAAA;EAkBpC,SAAA,uBAAA,CAAY,KAAK,EAAA;IAAjB,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAK,CAAC,IAAA,IAAA;IAJd,KAAA,CAAA,YAAY,GAA2C,CAAA,CAAE;IACzD,KAAA,CAAA,YAAY,GAAkC,CAAA,CAAE;IAK9C,KAAI,CAAC,KAAK,GAAG;MACX,YAAY,EAAE,KAAK,CAAC,YAAY,IAAI,KAAK,CAAC,mBAAmB;MAC7D,iBAAiB,EAAE;KACpB;IAED,IAAM,WAAW,GAAgB,iBAAiB,CAChD,KAAI,EACJ;MACE,YAAY,EAAE,YAAA;QACJ,IAAA,oBAAoB,GAAK,KAAI,CAAC,KAAK,CAAA,oBAAf;QAC5B,OAAO,oBAAoB;MAC5B;KACF,CACF;IAED,KAAI,CAAC,oBAAoB,GAAG,OAAO,CACjC,UAAA,YAAY,EAAA;MAAI,OAAA,UACd,EAAyB,EAAA;YAAvB,YAAY,GAAA,EAAA,CAAA,YAAA;QACX,OAAA,sBAAsB,CAAC,YAAY,EAAE,YAAY,EAAE,KAAI,CAAC,KAAK,CAAC,YAAa,CAAC;OAAA;IAAA,CAAA,CAClF;IACD,KAAI,CAAC,yBAAyB,GAAG,OAAO,CACtC,UAAA,iBAAiB,EAAA;MAAI,OAAA,UACnB,EAAyB,EAAA;YAAvB,YAAY,GAAA,EAAA,CAAA,YAAA;QACX,OAAA,2BAA2B,CAC9B,YAAY,EAAE,iBAAiB,EAAE,KAAI,CAAC,KAAK,CAAC,YAAa,CAC1D;OAAA;IAAA,CAAA,CACF;IAED,KAAI,CAAC,sBAAsB,GAAG,WAAW,CAAC,YAAY,CAAC,IAAI,CACzD,WAAW,EAAE,UAAC,SAAS,EAAE,OAAO,EAAA;MAC9B,IAAM,YAAY,GAAA,QAAA,CAAA,CAAA,CAAA,EAAQ,KAAI,CAAC,YAAY,CAAE;MACvC,IAAA,EAAA,GAAqE,KAAI,CAAC,KAAK;QAA7E,cAAc,GAAA,EAAA,CAAA,cAAA;QAAE,cAAc,GAAA,EAAA,CAAA,cAAA;QAAE,gBAAgB,GAAA,EAAA,CAAA,gBAAA;QAAE,YAAY,GAAA,EAAA,CAAA,YAAe;MACrF,OAAO,sBAAsB,CAC3B,SAAS,EAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACJ,OAAO,CAAA,EAAA;QAAE,YAAY,EAAA,YAAA;QAAE,YAAY,EAAA,YAAA;QACtC,cAAc,EAAA,cAAA;QAAE,cAAc,EAAA,cAAA;QAAE,gBAAgB,EAAA;MAAA,CAAA,CAAA,CACnD;KACF,CACF;IACD,KAAI,CAAC,qBAAqB,GAAG,WAAW,CAAC,YAAY,CAAC,IAAI,CACxD,WAAW,EAAE,UAAC,SAAS,EAAE,OAAO,EAAA;MAC9B,KAAI,CAAC,UAAU,CAAC,OAAO,CAAC;MACxB,IAAM,YAAY,GAAG,KAAI,CAAC,YAAY;MAChC,IAAA,EAAA,GAAqE,KAAI,CAAC,KAAK;QAA7E,cAAc,GAAA,EAAA,CAAA,cAAA;QAAE,cAAc,GAAA,EAAA,CAAA,cAAA;QAAE,gBAAgB,GAAA,EAAA,CAAA,gBAAA;QAAE,YAAY,GAAA,EAAA,CAAA,YAAe;MACrF,OAAO,qBAAqB,CAC1B,SAAS,EAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACJ,OAAO,CAAA,EAAA;QAAE,YAAY,EAAA,YAAA;QAAE,YAAY,EAAA,YAAA;QACtC,cAAc,EAAA,cAAA;QAAE,cAAc,EAAA,cAAA;QAAE,gBAAgB,EAAA;MAAA,CAAA,CAAA,CACnD;KACF,CACF;IACD,KAAI,CAAC,2BAA2B,GAAG,WAAW,CAAC,YAAY,CAAC,IAAI,CAC9D,WAAW,EAAE,2BAA2B,CACzC;IAED,KAAI,CAAC,UAAU,GAAG,UAAC,EAA8B,EAAA;UAA5B,UAAU,GAAA,EAAA,CAAA,UAAA;QAAE,cAAc,GAAA,EAAA,CAAA,cAAA;MAC7C,IAAI,MAAM,CAAC,IAAI,CAAC,KAAI,CAAC,YAAY,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;QAC/C,KAAI,CAAC,YAAY,CAAC,UAAU,CAAC,GAAG,KAAI,CAAC,YAAY,CAAC,UAAU,CAAC,EAAE;QAC/D,IAAI,cAAc,EAAE;UAClB,KAAI,CAAC,YAAY,CAAC,cAAc,CAAC,GAAG,KAAI,CAAC,YAAY,CAAC,cAAc,CAAC,EAAE;QACxE;MACF;KACF;IACD,KAAI,CAAC,UAAU,GAAG,YAAA;MAChB,MAAM,CAAC,IAAI,CAAC,KAAI,CAAC,YAAY,CAAC,CAC7B,OAAO,CAAC,UAAA,UAAU,EAAA;QAAI,OAAA,OAAO,KAAI,CAAC,YAAY,CAAC,UAAU,CAAC;MAAA,CAAA,CAAC;KAC7D;IAED,KAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC,UAAC,EAAqC,EAAA;UAAnC,WAAW,GAAA,EAAA,CAAA,WAAA;QAAE,MAAM,GAAA,EAAA,CAAA,MAAA;QAAE,YAAY,GAAA,EAAA,CAAA,YAAA;MACnE,IAAI,WAAW,CAAC,IAAI,KAAK,eAAe,EAAE;QACxC,KAAI,CAAC,YAAY,CAAC,WAAW,CAAC,MAAO,CAAC,IAAI,CAAC,GAAG,MAAM;MACrD;MACD,MAAM,CAAC,IAAI,CAAC,KAAI,CAAC,YAAY,CAAC,CAC7B,OAAO,CAAC,UAAC,UAAU,EAAA;QAClB,IAAM,WAAW,GAAG,YAAY,CAC7B,SAAS,CAAC,UAAC,EAAgB,EAAA;cAAd,IAAI,GAAA,EAAA,CAAA,IAAA;YAAE,MAAM,GAAA,EAAA,CAAA,MAAA;UAAO,OAAA,IAAI,KAAK,eAAe,IAAI,MAAO,CAAC,IAAI,KAAK,UAAU;SAAA,CAAC;QAC3F,IAAI,WAAW,KAAK,CAAC,CAAC,EAAE;UACtB,OAAO,KAAI,CAAC,YAAY,CAAC,UAAU,CAAC;QACrC;OACF,CAAC;KACH,CAAC;;EACH;EAEM,uBAAA,CAAA,wBAAwB,GAA/B,UAAgC,SAAS,EAAE,SAAS,EAAA;IAEhD,IAAA,EAAA,GACE,SAAS,CAAA,YAD0B;MAArC,YAAY,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,SAAS,CAAC,YAAY,GAAA,EAAA;IAGvC,OAAO;MACL,YAAY,EAAA;KACb;GACF;EAED,uBAAA,CAAA,SAAA,CAAA,kBAAkB,GAAlB,UAAoB,CAAC,EAAE,SAAS,EAAA;IACtB,IAAc,aAAa,GAAK,IAAI,CAAC,KAAK,CAAA,YAAf;IAC3B,IAAc,UAAU,GAAK,SAAS,CAAA,YAAd;IAChC,IAAI,aAAa,KAAK,UAAU,EAAE;MAChC,IAAI,CAAC,UAAU,EAAE;IAClB;GACF;EAED,uBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACQ,IAAA,EAAA,GAAsC,IAAI,CAAC,KAAK;MAA9C,YAAY,GAAA,EAAA,CAAA,YAAA;MAAE,iBAAiB,GAAA,EAAA,CAAA,iBAAe;IAC9C,IAAA,YAAY,GAAK,IAAI,CAAC,KAAK,CAAA,YAAf;IACpB,IAAM,oBAAoB,GAAG,IAAI,CAAC,oBAAoB,CAAC,YAAY,CAAC;IACpE,IAAM,yBAAyB,GAAG,IAAI,CAAC,yBAAyB,CAAC,iBAAiB,CAAC;IAEnF,OACEF,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC,qBAAqB;MAC1B,YAAY,EAAEK;IAAkB,CAAA,EAEhCL,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,4BAA4B;MAAC,KAAK,EAAA;IAAA,CAAA,CAAG,EAClDA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,cAAc;MAAC,QAAQ,EAAE;IAAoB,CAAA,CAAI,EAC9DA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,cAAc;MAAC,QAAQ,EAAE;IAAyB,CAAA,CAAI,EACnEA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,oBAAoB;MAAC,KAAK,EAAE;IAAY,CAAA,CAAI,EACzDA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,wBAAwB;MAAC,MAAM,EAAE,IAAI,CAAC;IAAsB,CAAA,CAAI,EAC7EA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,uBAAuB;MAAC,MAAM,EAAE,IAAI,CAAC;IAAqB,CAAA,CAAI,EAC3EA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,6BAA6B;MAAC,MAAM,EAAE,IAAI,CAAC;IAA2B,CAAA,CAAI,EACvFA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,mBAAmB;MAAC,MAAM,EAAE,IAAI,CAAC;IAAiB,CAAA,CAAI,CAC5D;GAEZ;EA9IM,uBAAA,CAAA,YAAY,GAAG;IACpB,mBAAmB,EAAE,EAAE;IACvB,YAAY,EAAE;GACf;EA4IH,OAAA,uBAAC;CAhJD,CAAsCE,aAAmB,CAAA;AAkJzD;AACA;IACa,mBAAmB,GAAkD,uBAAuB;AACzG;;AClKA,IAAMG,oBAAkB,GAAG,CACzB;EAAE,IAAI,EAAE;AAAa,CAAE,CACxB;AAED,IAAMO,iBAAe,GAAG;EACtB,OAAO,EAAE,KAAK;EACd,IAAI,EAAE,UAAC,EAAmB,EAAA;QAAjB,IAAI,GAAA,EAAA,CAAA,IAAA;MAAE,EAAE,GAAA,EAAA,CAAA,EAAA;MAAE,KAAK,GAAA,EAAA,CAAA,KAAA;IAAO,OAAA,EAAA,GAAG,IAAI,IAAG,IAAI,GAAG,EAAE,GAAG,GAAA,GAAI,EAAI,GAAG,EAAE,CAAA,GAAA,MAAA,GAAO,KAAO;EAAA;CACjF;AAED,IAAA,eAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA8BV,SAAAA,CAAAA,eAAAA,EAAAA,MAAAA,CAAAA;EAA9B,SAAA,eAAA,GAAA;;EAgDC;EAvCC,eAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACQ,IAAA,EAAA,GAIF,IAAI,CAAC,KAAK;MAHQ,KAAK,GAAA,EAAA,CAAA,kBAAA;MACzB,SAAS,GAAA,EAAA,CAAA,SAAA;MACT,QAAQ,GAAA,EAAA,CAAA,QACI;IACd,IAAM,UAAU,GAAG,oBAAoB,CAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAMU,iBAAe,CAAA,EAAK,QAAQ,CAAA,CAAG;IAE5E,OACEZ,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC,aAAa;MAClB,YAAY,EAAEK;IAAkB,CAAA,EAEhCL,aAAAA,CAAC,QAAQ,EAAA;MAAC,IAAI,EAAC;IAAQ,CAAA,EACpB,UAAC,MAA0C,EAAA;MAAK,OAC/CA,aAAAA,CAACI,QAAc,EAAA,IAAA,EACbJ,aAAAA,CAAC,mBAAmB,EAAA,IAAA,CAAG,EACvBA,aAAAA,CAAC,iBAAiB,EAAA,IAAA,EACjB,UAAC,EAAqC,EACrC,EAA+B,EAAA;YAD7B,WAAW,GAAA,EAAA,CAAA,WAAA;UAAE,QAAQ,GAAA,EAAA,CAAA,QAAA;UAAE,UAAU,GAAA,EAAA,CAAA,UAAA;YACjC,cAAc,GAAA,EAAA,CAAA,cAAA;UAAE,WAAW,GAAA,EAAA,CAAA,WAAA;QAAO,OACpCA,aAAAA,CAAC,KAAK,EAAA,QAAA,CAAA,CAAA,CAAA,EACA,MAAM,EAAA;UACV,WAAW,EAAE,WAAW;UACxB,QAAQ,EAAE,QAAQ;UAClB,UAAU,EAAE,UAAU;UACtB,UAAU,EAAE,SAAS,CAAC,UAAU,EAAE,QAAQ,CAAC;UAC3C,SAAS,EAAE,SAAU;UACrB,UAAU,EAAE,UAAU;UACtB,mBAAmB,EAAE,cAAc;UACnC,gBAAgB,EAAE;QAAW,CAAA,CAAA,CAC7B;OACH,CACmB,CACL;IAAA,CAClB,CACQ,CACJ;GAEZ;EA9CM,eAAA,CAAA,YAAY,GAAG;IACpB,SAAS,EAAE,EAAE;IACb,QAAQ,EAAE,CAAA;GACX;EACM,eAAA,CAAA,UAAU,GAAG;IAClB,kBAAkB,EAAE;GACrB;EAyCH,OAAA,eAAC;CAhDD,CAA8BE,aAAmB,CAAA;AAkDjD;AACA,IAAa,WAAW,GAA0C,eAAe;ACjEjF,IAAM,YAAY,GAAG;EACnB,eAAe,EAAE,KAAK;EACtB,WAAW,EAAE,YAAA,CAAA,CAAQ;EACrB,SAAS,EAAE,YAAA,CAAA;CACZ;AAGD;AACA,IAAA,UAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAgCA,SAAAA,CAAAA,UAAAA,EAAAA,MAAAA,CAAAA;EAG9B,SAAA,UAAA,CAAY,KAAK,EAAA;IAAjB,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAK,CAAC,IAAA,IAAA;IAEZ,KAAI,CAAC,KAAK,GAAG;MACX,QAAQ,EAAE;KACX;;EACF;EAED,UAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IAAA,IAAA,KAAA,GAAA,IAAA;IACQ,IAAA,EAAA,GAOF,IAAI,CAAC,KAAK;MANZ,IAAI,GAAA,EAAA,CAAA,IAAA;MACW,IAAI,GAAA,EAAA,CAAA,aAAA;MACnB,OAAO,GAAA,EAAA,CAAA,OAAA;MACP,eAAe,GAAA,EAAA,CAAA,eAAA;MACf,WAAW,GAAA,EAAA,CAAA,WAAA;MACX,SAAS,GAAA,EAAA,CAAA,SACG;IACN,IAAA,QAAQ,GAAK,IAAI,CAAC,KAAK,CAAA,QAAf;IAEhB,IAAM,WAAW,GAAGF,aAAAA,CAAC,IAAI,EAAA;MAAC,IAAI,EAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAO,IAAI,CAAA,EAAA;QAAE,KAAK,EAAE,QAAQ,IAAI,IAAI,CAAC;MAAK,CAAA;IAAA,CAAA,CAAM;IAE9E,OAAQ,eAAe,GACrBA,aAAAA,CAAC,UAAU,EAAA;MACT,OAAO,EAAE,CAAC;QAAE,IAAI,EAAE,QAAQ;QAAE,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC;MAAI,CAAE,CAAC;MAC3D,OAAO,EAAE,YAAA;QACP,KAAI,CAAC,QAAQ,CAAC;UAAE,QAAQ,EAAE;QAAI,CAAE,CAAC;QACjC,WAAW,EAAE;OACd;MACD,KAAK,EAAE,YAAA;QACL,KAAI,CAAC,QAAQ,CAAC;UAAE,QAAQ,EAAE;QAAK,CAAE,CAAC;QAClC,SAAS,EAAE;OACZ;MACD,GAAG,EAAE;IAAO,CAAA,EAEX,WAAW,CACD,GAEb,WACD;GACF;EAzCM,UAAA,CAAA,YAAY,GAAG,YAAY;EA0CpC,OAAA,UAAC;CA3CD,CAAgCE,aAAmB,CAAA;ACLnD,IAAMe,cAAY,GAAG;EACnB,OAAO,EAAE,YAAA,CAAA,CAAQ;EACjB,eAAe,EAAE,KAAK;EACtB,uBAAuB,EAAE,YAAA;IAAM,OAAA,KAAK;EAAA,CAAA;EACpC,YAAY,EAAE,YAAA,CAAA,CAAQ;EACtB,kBAAkB,EAAE,YAAA,CAAA;CACrB;AAGD;AACA,IAAA,oBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAmCf,SAAAA,CAAAA,oBAAAA,EAAAA,MAAAA,CAAAA;EAYjC,SAAA,oBAAA,CAAY,KAAK,EAAA;IAAjB,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAK,CAAC,IAAA,IAAA;IARd,KAAA,CAAA,QAAQ,GAAc,EAAE;IACxB,KAAA,CAAA,kBAAkB,GAAkB,IAAI;IAStC,KAAI,CAAC,KAAK,GAAG;MACX,gBAAgB,EAAE,IAAI;MACtB,eAAe,EAAE,CAAC;KACnB;IACD,KAAI,CAAC,eAAe,GAAG,UAAC,YAAY,EAAE,EAAwB,EAAA;MAAtB,IAAA,OAAO,GAAA,EAAA,CAAA,OAAA;QAAK,QAAQ,GAAA,MAAA,CAAA,EAAA,EAAtB,CAAA,SAAA,CAAwB,CAAF;MAClD,IAAA,uBAAuB,GAAK,KAAI,CAAC,KAAK,CAAA,uBAAf;MACvB,IAAA,UAAU,GAAK,OAAO,CAAC,CAAC,CAAC,CAAA,UAAf;MAElB,IAAI,uBAAuB,CAAC,UAAU,CAAC,EAAE;QACvC,YAAY,CAAA,QAAA,CAAA;UAAG,OAAO,EAAA;QAAA,CAAA,EAAK,QAAQ,CAAA,CAAG;MACvC;KACF;IACD,KAAI,CAAC,OAAO,GAAG,UAAC,EAAW,EAAA;UAAT,OAAO,GAAA,EAAA,CAAA,OAAA;MACvB,SAAS,CAAC,YAAA;QAAM,OAAA,KAAI,CAAC,QAAQ,CAAC;UAC5B,gBAAgB,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;SAC9B,CAAC;MAAA,CAAA,CAAC;KACJ;IACD,KAAI,CAAC,MAAM,GAAG,UAAC,EAAgB,EAAA;UAAd,YAAY,GAAA,EAAA,CAAA,YAAA;MACrB,IAAA,EAAA,GAA0B,KAAI,CAAC,KAAK;QAAlC,YAAY,GAAA,EAAA,CAAA,YAAA;QAAE,KAAK,GAAA,EAAA,CAAA,KAAe;MACpC,IAAA,EAAA,GAA6D,KAAI,CAAC,KAAK;QAArE,gBAAgB,GAAA,EAAA,CAAA,gBAAA;QAAmB,mBAAmB,GAAA,EAAA,CAAA,eAAe;;MAE7E,IAAM,cAAc,GAAG,KAAI,CAAC,QAAQ,CACjC,GAAG,CAAC,UAAA,GAAG,EAAA;QAAI,OAAA,GAAG,CAAC,qBAAqB,EAAE;MAAA,CAAA,CAAC;MAC1C,IAAM,eAAe,GAAG,KAAK,CAAC,SAAS,CAAC,UAAC,EAAU,EAAA;YAAR,MAAM,GAAA,EAAA,CAAA,MAAA;QAAO,OAAA,MAAM,CAAC,IAAI,KAAK,gBAAgB;OAAA,CAAC;MACzF,IAAM,eAAe,GAAG,uBAAuB,CAC7C,cAAc,EACd,eAAe,EACf,YAAY,CACb;MAED,IAAI,mBAAmB,KAAK,eAAe,EAAE;MAE7C,YAAY,CAAC;QACX,UAAU,EAAE,gBAAgB;QAC5B,UAAU,EAAE;OACb,CAAC;MACF,KAAI,CAAC,QAAQ,CAAC;QAAE,eAAe,EAAA;MAAA,CAAE,CAAC;KACnC;IACD,KAAI,CAAC,OAAO,GAAG,YAAA;MACL,IAAA,YAAY,GAAK,KAAI,CAAC,KAAK,CAAA,YAAf;MACZ,IAAA,gBAAgB,GAAK,KAAI,CAAC,KAAK,CAAA,gBAAf;MACxB,IAAI,CAAC,KAAI,CAAC,kBAAkB,EAAE;QAC5B,KAAI,CAAC,UAAU,EAAE;QACjB;MACD;MACD,YAAY,CAAC;QACX,UAAU,EAAE,gBAAgB;QAC5B,UAAU,EAAE,CAAC;OACd,CAAC;MACF,KAAI,CAAC,QAAQ,CAAC;QACZ,eAAe,EAAE,CAAC;OACnB,CAAC;KACH;IACD,KAAI,CAAC,MAAM,GAAG,YAAA;MACJ,IAAA,OAAO,GAAK,KAAI,CAAC,KAAK,CAAA,OAAf;MACT,IAAA,EAAA,GAAwC,KAAI,CAAC,KAAK;QAAhD,gBAAgB,GAAA,EAAA,CAAA,gBAAA;QAAE,eAAe,GAAA,EAAA,CAAA,eAAe;MACxD,KAAI,CAAC,UAAU,EAAE;MACjB,OAAO,CAAC;QACN,UAAU,EAAE,gBAAgB;QAC5B,UAAU,EAAE;OACb,CAAC;KACH;IACD,KAAI,CAAC,WAAW,GAAG,UAAC,UAAU,EAAA;MAC5B,KAAI,CAAC,kBAAkB,GAAG,UAAU;KACrC;IACD,KAAI,CAAC,SAAS,GAAG,YAAA;MACf,KAAI,CAAC,kBAAkB,GAAG,IAAI;MACxB,IAAA,EAAA,GAAwC,KAAI,CAAC,KAAK;QAAhD,gBAAgB,GAAA,EAAA,CAAA,gBAAA;QAAE,eAAe,GAAA,EAAA,CAAA,eAAe;MAChD,IAAA,OAAO,GAAK,KAAI,CAAC,KAAK,CAAA,OAAf;MACf,IAAI,gBAAgB,IAAI,eAAe,KAAK,CAAC,CAAC,EAAE;QAC9C,OAAO,CAAC;UACN,UAAU,EAAE;SACb,CAAC;MACH;MACD,KAAI,CAAC,UAAU,EAAE;KAClB;;EACF;EAED,oBAAA,CAAA,SAAA,CAAA,UAAU,GAAV,YAAA;IACU,IAAA,kBAAkB,GAAK,IAAI,CAAC,KAAK,CAAA,kBAAf;IAC1B,kBAAkB,EAAE;IACpB,IAAI,CAAC,QAAQ,CAAC;MACZ,gBAAgB,EAAE,IAAI;MACtB,eAAe,EAAE,CAAC;KACnB,CAAC;GACH;EAED,oBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IAAA,IAAA,KAAA,GAAA,IAAA;IACQ,IAAA,EAAA,GAOF,IAAI,CAAC,KAAK;MANZ,KAAK,GAAA,EAAA,CAAA,KAAA;MACkB,YAAY,GAAA,EAAA,CAAA,qBAAA;MACf,SAAS,GAAA,EAAA,CAAA,kBAAA;MACd,IAAI,GAAA,EAAA,CAAA,aAAA;MACnB,eAAe,GAAA,EAAA,CAAA,eAAA;MACf,uBAAuB,GAAA,EAAA,CAAA,uBACX;IAEd,IAAI,CAAC,QAAQ,GAAG,EAAE;IAElB,IAAM,UAAU,GAAI,KAAK,CAAC,MAAM,GAC9BF,aAAAA,CAAC,SAAS,EAAA,IAAA,EACP,KAAK,CAAC,GAAG,CAAC,UAAC,IAAI,EAAA;MACN,IAAM,UAAU,GAAK,IAAI,CAAC,MAAM,CAAA,IAAhB;MACxB,OACEA,aAAAA,CAAC,UAAU,EAAA;QACT,GAAG,EAAE,UAAU;QACf,IAAI,EAAE,IAAI;QACV,aAAa,EAAE,IAAI;QACnB,OAAO,EAAE,UAAA,OAAO,EAAA;UAAI,OAAA,OAAO,IAAI,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC;QAAA,CAAA;QAC1D,eAAe,EAAE,eAAe,IAAI,uBAAuB,CAAC,UAAU,CAAC;QACvE,WAAW,EAAE,YAAA;UAAM,OAAA,KAAI,CAAC,WAAW,CAAC,UAAU,CAAC;QAAA,CAAA;QAC/C,SAAS,EAAE,KAAI,CAAC;MAAS,CAAA,CACzB;KAEL,CAAC,CACQ,GAEZA,aAAAA,CAAC,YAAY,EAAA,IAAA,CACb;IAEF,OAAO,eAAe,GAElBA,aAAAA,CAAC,UAAU,EAAA;MACT,OAAO,EAAE,UAAA,IAAI,EAAA;QAAI,OAAA,KAAI,CAAC,eAAe,CAAC,KAAI,CAAC,OAAO,EAAE,IAAI,CAAC;MAAA,CAAA;MACzD,MAAM,EAAE,UAAA,IAAI,EAAA;QAAI,OAAA,KAAI,CAAC,eAAe,CAAC,KAAI,CAAC,MAAM,EAAE,IAAI,CAAC;MAAA,CAAA;MACvD,OAAO,EAAE,UAAA,IAAI,EAAA;QAAI,OAAA,KAAI,CAAC,eAAe,CAAC,KAAI,CAAC,OAAO,EAAE,IAAI,CAAC;MAAA,CAAA;MACzD,MAAM,EAAE,UAAA,IAAI,EAAA;QAAI,OAAA,KAAI,CAAC,eAAe,CAAC,KAAI,CAAC,MAAM,EAAE,IAAI,CAAC;MAAA;IAAA,CAAA,EAEtD,UAAU,CACA,GAEb,UAAU;GACf;EAlJM,oBAAA,CAAA,YAAY,GAAGiB,cAAY;EAmJpC,OAAA,oBAAC;CApJD,CAAmCf,aAAmB,CAAA;AAsJtD;AACA,IAAa,gBAAgB,GAAwC,oBAAoB;ACzJzF,IAAMU,iBAAe,GAAG;EACtB,aAAa,EAAE;CAChB;AAED,IAAMK,cAAY,GAAG;EACnB,mBAAmB,EAAE,KAAK;EAC1B,oBAAoB,EAAE,KAAK;EAC3B,QAAQ,EAAE,CAAA;CACX;AAED,IAAA,gBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA+Bf,SAAAA,CAAAA,gBAAAA,EAAAA,MAAAA,CAAAA;EAA/B,SAAA,gBAAA,GAAA;;EA0GC;EAjGC,gBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACQ,IAAA,EAAA,GAQF,IAAI,CAAC,KAAK;MAPK,eAAe,GAAA,EAAA,CAAA,eAAA;MACZ,SAAS,GAAA,EAAA,CAAA,kBAAA;MACd,IAAI,GAAA,EAAA,CAAA,aAAA;MACI,YAAY,GAAA,EAAA,CAAA,qBAAA;MACnC,mBAAmB,GAAA,EAAA,CAAA,mBAAA;MACnB,oBAAoB,GAAA,EAAA,CAAA,oBAAA;MACpB,QAAQ,GAAA,EAAA,CAAA,QACI;IAEd,IAAM,UAAU,GAAG,oBAAoB,CAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAMU,iBAAe,CAAA,EAAK,QAAQ,CAAA,CAAG;IAE5E,IAAM,uBAAuB,GAAG,UAAC,EAAuD,EAAA;UAArD,YAAY,GAAA,EAAA,CAAA,YAAA;MAA8C,OAC3FZ,aAAAA,CAAC,YAAY,EAAA;QACX,UAAU,EAAE,UAAU;QACtB,YAAY,EAAE;MAAY,CAAA,CAC1B;KACH;IAED,IAAM,eAAe,GAAG,UAAC,EAEwC,EAAA;UAD/D,IAAI,GAAA,EAAA,CAAA,IAAA;QAAE,YAAY,GAAA,EAAA,CAAA,YAAA;MAEV,IAAM,UAAU,GAAK,IAAI,CAAC,MAAM,CAAA,IAAhB;MAExB,OACEA,aAAAA,CAAC,iBAAiB,EAAA,IAAA,EACf,UACC,EAA4D,EAC5D,EAA6C,EAAA;YAD3C,OAAO,GAAA,EAAA,CAAA,OAAA;UAAE,sBAAsB,GAAA,EAAA,CAAA,sBAAA;UAAE,uBAAuB,GAAA,EAAA,CAAA,uBAAA;YACxD,oBAAoB,GAAA,EAAA,CAAA,oBAAA;UAAE,mBAAmB,GAAA,EAAA,CAAA,mBAAA;QAE3C,IAAM,cAAc,GAAG,sBAAsB,IAAI,sBAAsB,CAAC,UAAU,CAAC;QACnF,IAAM,eAAe,GAAG,uBAAuB,IAAI,uBAAuB,CAAC,UAAU,CAAC;QAEtF,OACEA,aAAAA,CAAC,IAAI,EAAA;UACH,YAAY,EAAE,YAAY;UAC1B,IAAI,EAAE,IAAI;UACV,cAAc,EAAE,cAAc;UAC9B,eAAe,EAAE,eAAe;UAChC,mBAAmB,EAAE,mBAAmB;UACxC,gBAAgB,EAAE,mBAAmB,GACjC,yBAAyB,CAAC,OAAO,EAAE,UAAU,CAAE,GAAG,SAAS;UAC/D,oBAAoB,EAAE,oBAAoB;UAC1C,OAAO,EAAE,YAAA;YAAM,OAAA,oBAAoB,CAAC;cAAE,UAAU,EAAA;YAAA,CAAE,CAAC;UAAA,CAAA;UACnD,MAAM,EAAE,UACN,EAAwB,EAAA;gBAAtB,SAAS,GAAA,EAAA,CAAA,SAAA;cAAE,SAAS,GAAA,EAAA,CAAA,SAAA;YACnB,OAAA,mBAAmB,CAAC;cAAE,UAAU,EAAA,UAAA;cAAE,SAAS,EAAA,SAAA;cAAE,SAAS,EAAA;YAAA,CAAE,CAAC;UAAA;QAAA,CAAA,CAC9D;OAEL,CACiB;KAEvB;IAED,OACEA,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC,eAAe;MACpB,YAAY,EAAE,CACZ;QAAE,IAAI,EAAE;MAAe,CAAE,EACzB;QAAE,IAAI,EAAE;MAAS,CAAE,EACnB;QAAE,IAAI,EAAE,cAAc;QAAE,QAAQ,EAAE,CAAC;MAAmB,CAAE;IACzD,CAAA,EAEDA,aAAAA,CAAC,QAAQ,EAAA;MAAC,IAAI,EAAC;IAAgB,CAAA,EAC7BA,aAAAA,CAAC,iBAAiB,EAAA,IAAA,EACf,UAAC,EAGQ,EAAE,EAEF,EAAA;UAJR,OAAO,GAAA,EAAA,CAAA,OAAA;QAAE,QAAQ,GAAA,EAAA,CAAA,QAAA;QAAE,aAAa,GAAA,EAAA,CAAA,aAAA;QAChC,eAAe,GAAA,EAAA,CAAA,eAAA;QAAE,uBAAuB,GAAA,EAAA,CAAA,uBAAA;QAAE,YAAY,GAAA,EAAA,CAAA,YAAA;UAEtD,oBAAoB,GAAA,EAAA,CAAA,oBAAA;QAAE,mBAAmB,GAAA,EAAA,CAAA,mBAAA;QAAE,yBAAyB,GAAA,EAAA,CAAA,yBAAA;QAAE,WAAW,GAAA,EAAA,CAAA,WAAA;MAEjF,IAAM,OAAO,GAAG,UAAC,MAAM,EAAA;QACrB,IAAI,YAAY,EAAE;UAChB,WAAW,CAAC,YAAY,CAAC;QAC1B;QACD,oBAAoB,CAAC,MAAM,CAAC;OAC7B;MAED,OAAOA,aAAAA,CAAC,eAAe,EAAA;QACrB,KAAK,EAAE,kBAAkB,CAAC,OAAO,EAAE,QAAQ,EAAE,aAAa,CAAC;QAC3D,uBAAuB,EAAE,uBAAuB;QAChD,eAAe,EAAE,eAAe;QAChC,OAAO,EAAE,OAAO;QAChB,YAAY,EAAE,mBAAmB;QACjC,kBAAkB,EAAE,yBAAyB;QAC7C,aAAa,EAAE,eAAe;QAC9B,qBAAqB,EAAE,uBAAuB;QAC9C,kBAAkB,EAAE;MAAS,CAAA,CAC7B;KACH,CACiB,EACpBA,aAAAA,CAAC,mBAAmB,EAAA,IAAA,CAAG,CACd,CACJ;GAEZ;EAxGM,gBAAA,CAAA,YAAY,GAAGiB,cAAY;EAC3B,gBAAA,CAAA,UAAU,GAAG;IAClB,eAAe,EAAE,QAAQ;IACzB,kBAAkB,EAAE,WAAW;IAC/B,aAAa,EAAE,MAAM;IACrB,qBAAqB,EAAE;GACxB;EAmGH,OAAA,gBAAC;CA1GD,CAA+Bf,aAAmB,CAAA;AA4GlD;;;;;IAKa,aAAa,GAA4C,cAAc,CAClF;EAAE,MAAM,EAAA;AAAA,CAAE,CACX,CAAC,gBAAgB,CAAC;ACrInB,IAAA,oBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAmCA,SAAAA,CAAAA,oBAAAA,EAAAA,MAAAA,CAAAA;EAAnC,SAAA,oBAAA,GAAA;;EAgDC;EA/CC,oBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACQ,IAAA,EAAA,GAKF,IAAI,CAAC,KAAK;MAJP,WAAW,GAAA,EAAA,CAAA,GAAA;MACI,SAAS,GAAA,EAAA,CAAA,kBAAA;MACZ,MAAM,GAAA,EAAA,CAAA,eAAA;MACvB,yBAAyB,GAAA,EAAA,CAAA,yBACb;IAEd,IAAM,oCAAoC,GAAG,UAC3C,EAAyC,EAAA;UAAvC,4BAA4B,GAAA,EAAA,CAAA,4BAAA;MAC3B,OAAA,kCAAkC,CACrC,4BAA4B,EAC5B,yBAA0B,EAC1B,WAAW,CACZ;KAAA;IAED,OACEF,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,kBAAkB;MAAC,GAAG,EAAE,WAAW,CAAC,IAAI,CAAC,GAAG;IAAC,CAAA,EACxDA,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC,8BAA8B;MACnC,QAAQ,EAAE;IAAoC,CAAA,CAC9C,EACD,SAAS,GAENA,aAAAA,CAAC,QAAQ,EAAA;MACP,IAAI,EAAC,gBAAgB;MACrB,SAAS,EAAE,UAAC,EAAe,EAAA;YAAb,MAAM,GAAA,EAAA,CAAA,MAAA;QAAY,OAAA,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC;MAAA;IAAA,CAAA,EAEhE,UAAC,MAA8C,EAAA;MAAK,OAAA,aAAA,CAAC,SAAS,EAAA,QAAA,CAAA,CAAA,CAAA,EAAK,MAAM,CAAA,CAAI;IAAA,CAAA,CACrE,GAEX,IAAI,EAEP,MAAM,GAEHA,aAAAA,CAAC,QAAQ,EAAA;MACP,IAAI,EAAC,aAAa;MAClB,SAAS,EAAE,UAAC,EAAe,EAAA;YAAb,MAAM,GAAA,EAAA,CAAA,MAAA;QAAY,OAAA,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC;MAAA;IAAA,CAAA,EAEhE,UAAC,MAA2C,EAAA;MAAK,OAAA,aAAA,CAAC,MAAM,EAAA,QAAA,CAAA,CAAA,CAAA,EAAK,MAAM,CAAA,CAAI;IAAA,CAAA,CAC/D,GAEX,IAAI,CAED;GAEZ;EACH,OAAA,oBAAC;AAAD,CAAC,CAhDkCE,aAAmB,CAAA;AAkDtD;AACA;AACA,IAAa,gBAAgB,GAA+C,oBAAoB;ACvChG,IAAMG,oBAAkB,GAAG,CACzB;EAAE,IAAI,EAAE;AAAO,CAAE,CAClB;AAED,IAAMO,iBAAe,GAAG;EACtB,SAAS,EAAE;CACZ;AAED,IAAMN,4BAA0B,GAAG,UACjC,gBAAgB,EAAE,YAAY,EAAA;EAC3B,OAAA,6BAA6B,CAAC,gBAAgB,EAAE,iBAAiB,EAAE,YAAY,CAAC;AAAA,CAAA;AAErF;AACA,IAAA,yBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAwCJ,SAAAA,CAAAA,yBAAAA,EAAAA,MAAAA,CAAAA;EAWtC,SAAA,yBAAA,CAAY,KAAK,EAAA;IAAjB,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAK,CAAC,IAAA,IAAA;IAEZ,KAAI,CAAC,KAAK,GAAG;MACX,iBAAiB,EAAE,KAAK,CAAC,iBAAiB,IAAI,KAAK,CAAC;KACrD;IACD,IAAM,WAAW,GAAG,iBAAiB,CACnC,KAAI,EACJ;MACE,iBAAiB,EAAE,YAAA;QACT,IAAA,yBAAyB,GAAK,KAAI,CAAC,KAAK,CAAA,yBAAf;QACjC,OAAO,yBAAyB;MACjC;KACF,CACF;IAED,KAAI,CAAC,sBAAsB,GAAG,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAC9D,WAAW,EAAE,mBAAmB,EAAE,YAAY,CAC/C;;EACF;EAEM,yBAAA,CAAA,wBAAwB,GAA/B,UAAgC,SAAS,EAAE,SAAS,EAAA;IAEhD,IAAA,EAAA,GACE,SAAS,CAAA,iBADoC;MAA/C,iBAAiB,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,SAAS,CAAC,iBAAiB,GAAA,EAAA;IAGjD,OAAO;MACL,iBAAiB,EAAA;KAClB;GACF;EAED,yBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACQ,IAAA,EAAA,GAGF,IAAI,CAAC,KAAK;MAFW,YAAY,GAAA,EAAA,CAAA,qBAAA;MACnC,QAAQ,GAAA,EAAA,CAAA,QACI;IACd,IAAM,UAAU,GAAG,oBAAoB,CAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAMU,iBAAe,CAAA,EAAK,QAAQ,CAAA,CAAG;IACpE,IAAA,iBAAiB,GAAK,IAAI,CAAC,KAAK,CAAA,iBAAf;IACnB,IAAA,EAAA,GAA8C,IAAI,CAAC,KAAK;MAAtD,gBAAgB,GAAA,EAAA,CAAA,gBAAA;MAAE,qBAAqB,GAAA,EAAA,CAAA,qBAAe;IAE9D,OACEZ,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC,uBAAuB;MAC5B,YAAY,EAAEK;IAAkB,CAAA,EAEhCL,aAAAA,CAAC,mBAAmB,EAAA;MAAC,iBAAiB,EAAE;IAAiB,CAAA,CAAI,EAE7DA,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC,yBAAyB;MAC9B,KAAK,EAAEM,4BAA0B,CAAC,gBAAgB,EAAE,qBAAqB;IAAC,CAAA,CAC1E,EACFN,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC,wBAAwB;MAC7B,MAAM,EAAE,IAAI,CAAC;IAAsB,CAAA,CACnC,EAEFA,aAAAA,CAAC,QAAQ,EAAA;MAAC,IAAI,EAAC;IAAO,CAAA,EACnB,UAAA,MAAM,EAAA;MAAI,OACTA,aAAAA,CAAC,iBAAiB,EAAA,IAAA,EACf,UAAC,EAAgB,EAAA;YAAd,YAAY,GAAA,EAAA,CAAA,YAAA;QAAO,OAAC,qBAAqB,CAAC,YAAY,CAAC,GACvDA,aAAAA,CAAC,mBAAmB,EAAA,IAAA,CAAG,GAEvBA,aAAAA,CAAC,YAAY,EAAA,QAAA,CAAA;UACX,UAAU,EAAE;QAAU,CAAA,EAClB,MAAM,CAAA,CAEb;OACF,CACiB;IAAA,CACrB,CACQ,CACJ;GAEZ;EAnFM,yBAAA,CAAA,YAAY,GAAG;IACpB,wBAAwB,EAAE,EAAE;IAC5B,QAAQ,EAAE,CAAA,CAAE;IACZ,qBAAqB,EAAE;GACxB;EACM,yBAAA,CAAA,UAAU,GAAG;IAClB,qBAAqB,EAAE;GACxB;EA6EH,OAAA,yBAAC;CArFD,CAAwCE,aAAmB,CAAA;AAuF3D,yBAAyB,CAAC,UAAU,GAAG;EACrC,qBAAqB,EAAE;CACxB;AAED;AACA;IACa,qBAAqB,GAAoD,yBAAyB;AAC/G;;ACtHA,IAAA,WAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA0BA,SAAAA,CAAAA,WAAAA,EAAAA,MAAAA,CAAAA;EAA1B,SAAA,WAAA,GAAA;;EA+BC;EAzBC,WAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACQ,IAAA,EAAA,GAGF,IAAI,CAAC,KAAK;MAFG,IAAI,GAAA,EAAA,CAAA,aAAA;MACK,sBAAsB,GAAA,EAAA,CAAA,sBAClC;IACd,OACEF,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC;IAAS,CAAA,EAEdA,aAAAA,CAAC,QAAQ,EAAA;MAAC,IAAI,EAAC;IAAQ,CAAA,EACtB,UAAC,MAA0C,EAAA;MAAK,OAC/CA,aAAAA,CAACI,QAAc,EAAA,IAAA,EACbJ,aAAAA,CAAC,IAAI,EAAA,QAAA,CAAA,CAAA,CAAA,EAAK,MAAM,CAAA,EACdA,aAAAA,CAAC,mBAAmB,EAAA;QAAC,IAAI,EAAC;MAAgB,CAAA,CAAG,CACxC,EACPA,aAAAA,CAAC,mBAAmB,EAAA,IAAA,CAAG,CACR;IAAA,CAClB,CACU,EACXA,aAAAA,CAAC,QAAQ,EAAA;MAAC,IAAI,EAAC;IAAgB,CAAA,EAC7BA,aAAAA,CAAC,sBAAsB,EAAA,IAAA,CAAG,CACjB,CACJ;GAEZ;EA7BM,WAAA,CAAA,UAAU,GAAG;IAClB,aAAa,EAAE,MAAM;IACrB,sBAAsB,EAAE;GACzB;EA2BH,OAAA,WAAC;CA/BD,CAA0BE,aAAmB,CAAA;AAiC7C;AACA,IAAa,OAAO,GAAsC,WAAW;ACpCrE,IAAA,iBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAgCA,SAAAA,CAAAA,iBAAAA,EAAAA,MAAAA,CAAAA;EAM9B,SAAA,iBAAA,CAAY,KAAK,EAAA;IAAjB,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAK,CAAC,IAAA,IAAA;IAEZ,KAAI,CAAC,KAAK,GAAG;MACX,cAAc,EAAE,KAAK,CAAC,cAAc,IAAI,KAAK,CAAC;KAC/C;IAED,IAAM,WAAW,GAAG,iBAAiB,CACnC,KAAI,EACJ;MACE,cAAc,EAAE,YAAA;QACN,IAAA,sBAAsB,GAAK,KAAI,CAAC,KAAK,CAAA,sBAAf;QAC9B,OAAO,sBAAsB;MAC9B;KACF,CACF;IAED,KAAI,CAAC,iBAAiB,GAAG,WAAW,CAAC,iBAAiB,CACnD,IAAI,CAAC,WAAW,EAAE,gBAAgB,EAAE,iBAAiB,CAAC;;EAC1D;EAEM,iBAAA,CAAA,wBAAwB,GAA/B,UAAgC,SAAS,EAAE,SAAS,EAAA;IAEhD,IAAA,EAAA,GACE,SAAS,CAAA,cAD8B;MAAzC,cAAc,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,SAAS,CAAC,cAAc,GAAA,EAAA;IAG3C,OAAO;MACL,cAAc,EAAA;KACf;GACF;EAED,iBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACU,IAAA,cAAc,GAAK,IAAI,CAAC,KAAK,CAAA,cAAf;IAEtB,OACEF,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC;IAAe,CAAA,EAEpBA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,gBAAgB;MAAC,KAAK,EAAE;IAAc,CAAA,CAAI,EACtD,GAAG,EAEJA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,mBAAmB;MAAC,MAAM,EAAE,IAAI,CAAC;IAAiB,CAAA,CAAI,CAC5D;GAEZ;EAjDM,iBAAA,CAAA,YAAY,GAAG;IACpB,qBAAqB,EAAE;GACxB;EAgDH,OAAA,iBAAC;CAnDD,CAAgCE,aAAmB,CAAA;AAqDnD;AACA,IAAa,aAAa,GAA4C,iBAAiB;AC/CvF,IAAMG,oBAAkB,GAAG,CACzB;EAAE,IAAI,EAAE;AAAe,CAAE,CAC1B;AAED,IAAM,wBAAwB,GAAG,UAC/B,EAA2C,EAAA;MAAzC,IAAI,GAAA,EAAA,CAAA,IAAA;IAAE,QAAQ,GAAA,EAAA,CAAA,QAAA;IAAE,cAAc,GAAA,EAAA,CAAA,cAAA;EAC7B,OAAA,gBAAgB,CAAC,IAAI,EAAE,QAAQ,EAAE,cAAc,CAAC;AAAhD,CAAgD;AACrD,IAAMa,kBAAgB,GAAG,UACvB,EAA2B,EAAA;MAAzB,QAAQ,GAAA,EAAA,CAAA,QAAA;IAAE,IAAI,GAAA,EAAA,CAAA,IAAA;EACb,OAAA,qBAAqB,CAAC,QAAQ,EAAE,IAAI,CAAC;AAArC,CAAqC;AAC1C,IAAM,sBAAsB,GAAG,UAC7B,EAAiC,EAAA;MAA/B,cAAc,GAAA,EAAA,CAAA,cAAA;IAAE,IAAI,GAAA,EAAA,CAAA,IAAA;EACnB,OAAA,2BAA2B,CAAC,cAAc,EAAE,IAAI,CAAC;AAAjD,CAAiD;AACtD,IAAM,qBAAqB,GAAG,UAAC,EAAiB,EAAA;MAAf,IAAI,GAAA,EAAA,CAAA,IAAA;EAAgB,OAAA,mBAAmB,CAAC,IAAI,CAAC;AAAzB,CAAyB;AAC9E,IAAM,uBAAuB,GAAG,UAAC,EAAiB,EAAA;MAAf,IAAI,GAAA,EAAA,CAAA,IAAA;EAAgB,OAAA,qBAAqB,CAAC,IAAI,CAAC;AAA3B,CAA2B;AAClF,IAAM,+BAA+B,GAAG,UACtC,EAAmC,EAAA;MAAjC,IAAI,GAAA,EAAA,CAAA,IAAA;IAAE,gBAAgB,GAAA,EAAA,CAAA,gBAAA;EACrB,OAAA,uBAAuB,CAAC,gBAAgB,EAAE,IAAI,CAAC;AAA/C,CAA+C;AACpD,IAAM,yBAAyB,GAAG,UAAC,EAAiB,EAAA;MAAf,IAAI,GAAA,EAAA,CAAA,IAAA;EAAgB,OAAA,uBAAuB,CAAC,IAAI,CAAC;AAA7B,CAA6B;AAEtF,IAAA,kBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAiChB,SAAAA,CAAAA,kBAAAA,EAAAA,MAAAA,CAAAA;EAAjC,SAAA,kBAAA,GAAA;;EAuBC;EAtBC,kBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IAEI,IAAA,YAAY,GACV,IAAI,CAAC,KAAK,CAAA,YADA;IAEd,IAAM,gBAAgB,GAAG,UAAC,EAAiB,EAAA;UAAf,IAAI,GAAA,EAAA,CAAA,IAAA;MAAgB,OAAA,sBAAsB,CAAC,IAAI,EAAE,YAAY,CAAC;KAAA;IAE1F,OACEF,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC,gBAAgB;MACrB,YAAY,EAAEK;IAAkB,CAAA,EAEhCL,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,MAAM;MAAC,QAAQ,EAAE;IAAgB,CAAA,CAAI,EAClDA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,UAAU;MAAC,QAAQ,EAAEkB;IAAgB,CAAA,CAAI,EACtDlB,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,gBAAgB;MAAC,QAAQ,EAAE;IAAsB,CAAA,CAAI,EAClEA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,eAAe;MAAC,QAAQ,EAAE;IAAqB,CAAA,CAAI,EAChEA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,iBAAiB;MAAC,QAAQ,EAAE;IAAuB,CAAA,CAAI,EACpEA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,MAAM;MAAC,QAAQ,EAAE;IAAwB,CAAA,CAAI,EAC1DA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,kBAAkB;MAAC,QAAQ,EAAE;IAA+B,CAAA,CAAI,EAC7EA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,MAAM;MAAC,QAAQ,EAAE;IAAyB,CAAA,CAAI,CACpD;GAEZ;EACH,OAAA,kBAAC;AAAD,CAAC,CAvBgCE,aAAmB,CAAA;AAyBpD;;;;AAIA,IAAa,cAAc,GAA6C,kBAAkB;ACxD1F,IAAA,mBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAkCA,SAAAA,CAAAA,mBAAAA,EAAAA,MAAAA,CAAAA;EAAlC,SAAA,mBAAA,GAAA;;EA4HC;EA/GC,mBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACQ,IAAA,EAAA,GASF,IAAI,CAAC,KAAK;MARP,aAAa,GAAA,EAAA,CAAA,GAAA;MAClB,qBAAqB,GAAA,EAAA,CAAA,qBAAA;MACrB,aAAa,GAAA,EAAA,CAAA,aAAA;MACI,MAAM,GAAA,EAAA,CAAA,eAAA;MACA,YAAY,GAAA,EAAA,CAAA,qBAAA;MAChB,QAAQ,GAAA,EAAA,CAAA,iBAAA;MACT,OAAO,GAAA,EAAA,CAAA,gBAAA;MACV,IAAI,GAAA,EAAA,CAAA,aACP;IACd,OACEF,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC,iBAAiB;MACtB,YAAY,EAAE,CACZ;QAAE,IAAI,EAAE,kBAAkB;QAAE,QAAQ,EAAE;MAAI,CAAE,EAC5C;QAAE,IAAI,EAAE;MAAe,CAAE,EACzB;QAAE,IAAI,EAAE,gBAAgB;QAAE,QAAQ,EAAE,CAAC;MAAqB,CAAE,EAC5D;QAAE,IAAI,EAAE,qBAAqB;QAAE,QAAQ,EAAE,CAAC;MAAa,CAAE,EACzD;QAAE,IAAI,EAAE;MAAO,CAAE,EACjB;QAAE,IAAI,EAAE,gBAAgB;QAAE,QAAQ,EAAE;MAAI,CAAE,CAC3C;MACD,GAAG,EAAE;IAAa,CAAA,EAElBA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,qBAAqB;MAAC,KAAK,EAAE;IAAa,CAAA,CAAI,EAC3DA,aAAAA,CAAC,QAAQ,EAAA;MACP,IAAI,EAAC,uBAAuB;MAC5B,SAAS,EAAE,UAAC,EAAe,EAAA;YAAb,MAAM,GAAA,EAAA,CAAA,MAAA;QAAY,OAAA,MAAM,CAAC,IAAI,KAAK,aAAa;MAAA;IAAA,CAAA,EAE7DA,aAAAA,CAAC,YAAY,EAAA;MACX,OAAO,EAAE,KAAK;MACd,QAAQ,EAAE,KAAK;MACf,QAAQ,EAAE,YAAA,CAAA;IAAQ,CAAA,CAClB,EACD,qBAAqB,IAAI,aAAa,IACrCA,aAAAA,CAAC,iBAAiB,EAAA,IAAA,EACf,UAAC,EAAiD,EAAE,EAAmB,EAAA;UAApE,kBAAkB,GAAA,EAAA,CAAA,kBAAA;QAAE,WAAW,GAAA,EAAA,CAAA,WAAA;QAAE,YAAY,GAAA,EAAA,CAAA,YAAA;UAAM,eAAe,GAAA,EAAA,CAAA,eAAA;MAAO,OAC3EA,aAAAA,CAAC,QAAQ,EAAA;QACP,QAAQ,EAAE,CAAC,kBAAkB;QAC7B,OAAO,EAAE,WAAW;QACpB,aAAa,EAAE,YAAY;QAC3B,QAAQ,EAAE;MAAe,CAAA,CACzB;KACH,CAEJ,CACQ,EACXA,aAAAA,CAAC,QAAQ,EAAA;MACP,IAAI,EAAC,WAAW;MAChB,SAAS,EAAE,UACT,EAA8B,EAAA;YAA5B,QAAQ,GAAA,EAAA,CAAA,QAAA;UAAE,WAAW,GAAA,EAAA,CAAA,WAAA;QACpB,OAAA,eAAe,CAAC,QAAQ,EAAE,WAAW,EAAE,aAAa,CAAC;MAAA;IAAA,CAAA,EAEzD,UAAC,MAAsB,EAAA;MAAK,OAC3BA,aAAAA,CAAC,iBAAiB,EAAA,IAAA,EACf,UAAC,EAGD,EAAE,EAEF,EAAA;YAJC,gBAAgB,GAAA,EAAA,CAAA,gBAAA;UAAE,cAAc,GAAA,EAAA,CAAA,cAAA;UAAE,SAAS,GAAA,EAAA,CAAA,SAAA;UAAE,aAAa,GAAA,EAAA,CAAA,aAAA;UAAE,eAAe,GAAA,EAAA,CAAA,eAAA;UAC3E,YAAY,GAAA,EAAA,CAAA,YAAA;YAEZ,iBAAiB,GAAA,EAAA,CAAA,iBAAA;UAAE,eAAe,GAAA,EAAA,CAAA,eAAA;QAE5B,IAAA,EAAA,GAAiB,MAAM,CAAC,QAAQ;UAA9B,GAAG,GAAA,EAAA,CAAA,GAAA;UAAE,KAAK,GAAA,EAAA,CAAA,KAAoB;QACtC,IAAM,UAAU,GAAG,MAAM,CAAC,WAAW,CAAC,MAAO,CAAC,IAAI;QAClD,IAAM,KAAK,GAAG,YAAY,CAAC,GAAG,EAAE,UAAU,CAAC;QAC3C,IAAM,aAAa,GAAG,gBAAgB,CAAC,GAAG,CAAC;QAC3C,OACEA,aAAAA,CAAC,mBAAmB,EAAA;UAClB,IAAI,EAAC,gBAAgB;UACrB,MAAM,EAAE;YACN,KAAK,EAAA,KAAA;YACL,GAAG,EAAA,GAAA;YACH,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC;UAC5B;QAAA,CAAA,EAEA,UAAA,OAAO,EAAA;UAAI,OACVA,aAAAA,CAAC,IAAI,EAAA,QAAA,CAAA,CAAA,CAAA,EACC,MAAM,EAAA;YACV,GAAG,EAAE,GAAG;YACR,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,MAAO;YAClC,KAAK,EAAE;UAAK,CAAA,CAAA,EAEZA,aAAAA,CAAC,MAAM,EAAA;YACL,KAAK,EAAE,eAAe,CAAC,GAAG;UAAC,CAAA,CAC3B,EACFA,aAAAA,CAAC,YAAY,EAAA;YACX,OAAO,EAAE,aAAa,GAAG,CAAC,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,aAAa,CAAC,GAAG,CAAC;YACrE,QAAQ,EAAE,cAAc,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC5C,QAAQ,EAAE,YAAA;cAAM,OAAA,iBAAiB,CAAC;gBAAE,KAAK,EAAA;cAAA,CAAE,CAAC;YAAA;UAAA,CAAA,CAC5C,EACD,qBAAqB,IACpBA,aAAAA,CAAC,QAAQ,EAAA;YACP,QAAQ,EAAE,KAAK;YACf,OAAO,EAAE,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACtC,aAAa,EAAE,KAAK;YACpB,QAAQ,EAAE,YAAA;cAAM,OAAA,eAAe,CAAC;gBAAE,MAAM,EAAE,CAAC,KAAK;cAAC,CAAE,CAAC;YAAA;UAAA,CAAA,CAEvD,EACDA,aAAAA,CAAC,OAAO,EAAA,IAAA,EACL,OAAO,IAAI,KAAK,CACT,CACL;QAAA,CACR,CACmB;OAEzB,CACiB;IAAA,CACrB,CACQ,CACJ;GAEZ;EA1HM,mBAAA,CAAA,YAAY,GAAG;IACpB,qBAAqB,EAAE,KAAK;IAC5B,aAAa,EAAE;GAChB;EACM,mBAAA,CAAA,UAAU,GAAG;IAClB,aAAa,EAAE,MAAM;IACrB,gBAAgB,EAAE,SAAS;IAC3B,eAAe,EAAE,QAAQ;IACzB,qBAAqB,EAAE,cAAc;IACrC,iBAAiB,EAAE;GACpB;EAiHH,OAAA,mBAAC;CA5HD,CAAkCE,aAAmB,CAAA;AA8HrD;AACA,IAAa,eAAe,GAA8C,mBAAmB;AC/H7F,IAAA,eAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA8BA,SAAAA,CAAAA,eAAAA,EAAAA,MAAAA,CAAAA;EAM5B,SAAA,eAAA,CAAY,KAAK,EAAA;IAAjB,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAK,CAAC,IAAA,IAAA;IAEZ,KAAI,CAAC,KAAK,GAAG;MACX,KAAK,EAAE,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC;KAC7B;IACD,IAAM,WAAW,GAAG,iBAAiB,CAAC,KAAI,EAAE;MAC1C,KAAK,EAAE,YAAA;QACG,IAAA,aAAa,GAAK,KAAI,CAAC,KAAK,CAAA,aAAf;QACrB,OAAO,aAAa;MACrB;KACF,CAAC;IAEF,KAAI,CAAC,WAAW,GAAG,WAAW,CAAC,iBAAiB,CAC7C,IAAI,CAAC,WAAW,EAAE,OAAO,EAAE,iBAAiB,CAAC;;EACjD;EAEM,eAAA,CAAA,wBAAwB,GAA/B,UAAgC,SAAS,EAAE,SAAS,EAAA;IAEhD,IAAA,EAAA,GACE,SAAS,CAAA,KADY;MAAvB,KAAK,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,SAAS,CAAC,KAAK,GAAA,EAAA;IAGzB,OAAO;MACL,KAAK,EAAA;KACN;GACF;EAED,eAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACU,IAAA,KAAK,GAAK,IAAI,CAAC,KAAK,CAAA,KAAf;IACb,IAAM,wBAAwB,GAAG,UAC/B,EAAsC,EAAA;UAApC,gBAAgB,GAAA,EAAA,CAAA,gBAAA;QAAE,OAAO,GAAA,EAAA,CAAA,OAAA;MACxB,OAAA,sBAAsB,CAAC,KAAK,EAAE,OAAO,EAAE,gBAAgB,CAAC;KAAA;IAE7D,OACEF,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC;IAAa,CAAA,EAElBA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,kBAAkB;MAAC,QAAQ,EAAE;IAAwB,CAAA,CAAI,EACtEA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,aAAa;MAAC,KAAK,EAAE;IAAK,CAAA,CAAI,EAC3CA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,mBAAmB;MAAC,MAAM,EAAE,IAAI,CAAC;IAAW,CAAA,CAAI,CACtD;GAEZ;EA/CM,eAAA,CAAA,YAAY,GAAG;IACpB,YAAY,EAAE;GACf;EA8CH,OAAA,eAAC;CAjDD,CAA8BE,aAAmB,CAAA;AAmDjD;AACA,IAAa,WAAW,GAA0C,eAAe;AC9CjF,IAAMG,oBAAkB,GAAG,CACzB;EAAE,IAAI,EAAE;AAAS,CAAE,EACnB;EAAE,IAAI,EAAE;AAAa,CAAE,CACxB;AAED,IAAMO,iBAAe,GAAG;EACtB,iBAAiB,EAAE;CACpB;AAED,IAAA,eAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA8BV,SAAAA,CAAAA,eAAAA,EAAAA,MAAAA,CAAAA;EAA9B,SAAA,eAAA,GAAA;IAAA,IAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;IAOE,KAAA,CAAA,GAAG,GAAiCC,SAAe,EAAE;;EAsCtD;EApCC,eAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IAAA,IAAA,KAAA,GAAA,IAAA;IACQ,IAAA,EAAA,GAAsC,IAAI,CAAC,KAAK;MAA9B,KAAK,GAAA,EAAA,CAAA,cAAA;MAAE,QAAQ,GAAA,EAAA,CAAA,QAAe;IACtD,IAAM,UAAU,GAAG,oBAAoB,CAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAMS,iBAAe,CAAA,EAAK,QAAQ,CAAA,CAAG;IAE5E,OACEZ,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC,aAAa;MAClB,YAAY,EAAEK;IAAkB,CAAA,EAEhCL,aAAAA,CAAC,QAAQ,EAAA;MAAC,IAAI,EAAC;IAAgB,CAAA,EAC7BA,aAAAA,CAAC,mBAAmB,EAAA,IAAA,CAAG,EACvBA,aAAAA,CAAC,iBAAiB,EAAA,IAAA,EACf,UAAC,EAA6B,EAC/B,EAAqD,EAAA;UADjD,WAAW,GAAA,EAAA,CAAA,WAAA;QAAE,YAAY,GAAA,EAAA,CAAA,YAAA;UAC3B,iBAAiB,GAAA,EAAA,CAAA,iBAAA;QAAE,WAAW,GAAA,EAAA,CAAA,WAAA;QAAE,iBAAiB,GAAA,EAAA,CAAA,iBAAA;MACjD,IAAM,aAAa,GAAG,UAAC,KAAK,EAAA;QAC1B,IAAI,YAAY,EAAE;UAChB,WAAW,CAAC,YAAY,CAAC;QAC1B;QACD,iBAAiB,CAAC,KAAK,CAAC;OACzB;MACD,IAAI,iBAAiB,EAAE;QACrB,iBAAiB,CAAC,KAAI,CAAC,GAAG,CAAC;MAC5B;MAED,OAAOA,aAAAA,CAAC,KAAK,EAAA;QACX,KAAK,EAAE,WAAW;QAClB,QAAQ,EAAE,KAAI,CAAC,GAAG;QAClB,aAAa,EAAE,aAAa;QAC5B,UAAU,EAAE;MAAU,CAAA,CACtB;KACH,CACiB,CACX,CACJ;GAEZ;EA3CM,eAAA,CAAA,YAAY,GAAG;IACpB,QAAQ,EAAE,CAAA;GACX;EACM,eAAA,CAAA,UAAU,GAAG;IAClB,cAAc,EAAE;GACjB;EAuCH,OAAA,eAAC;CA7CD,CAA8BE,aAAmB,CAAA;AA+CjD;AACA,IAAa,WAAW,GAA0C,eAAe;ACjDjF,IAAMa,yBAAuB,GAAG,UAC9B,EAA4B,EAAA;MAA1B,eAAe,GAAA,EAAA,CAAA,eAAA;EACd,OAAA,wBAAwB,CAAC,eAAe,CAAC;AAAzC,CAAyC;AAC9C,IAAM,+BAA+B,GAAG,UACtC,EAAmE,EAAA;MAAjE,YAAY,GAAA,EAAA,CAAA,YAAA;IAAE,eAAe,GAAA,EAAA,CAAA,eAAA;IAAE,uBAAuB,GAAA,EAAA,CAAA,uBAAA;EACrD,OAAA,gCAAgC,CAAC,uBAAuB,EAAE,eAAe,EAAE,YAAY,CAAC;AAAxF,CAAwF;AAE7F,IAAMC,iBAAe,GAAG,UAAA,KAAK,EAAA;EAAI,OAAA,aAAA,CAAC,mBAAmB,EAAA;IAAC,MAAM,EAAE;EAAK,CAAA,CAAI;AAAA,CAAA;AAEvE,IAAMX,oBAAkB,GAAG,CACzB;EAAE,IAAI,EAAE;AAAO,CAAE,EACjB;EAAE,IAAI,EAAE,iBAAiB;EAAE,QAAQ,EAAE;AAAI,CAAE,EAC3C;EAAE,IAAI,EAAE,uBAAuB;EAAE,QAAQ,EAAE;AAAI,CAAE,EACjD;EAAE,IAAI,EAAE,iBAAiB;EAAE,QAAQ,EAAE;AAAI,CAAE,EAC3C;EAAE,IAAI,EAAE,cAAc;EAAE,QAAQ,EAAE;AAAI,CAAE,EACxC;EAAE,IAAI,EAAE,gBAAgB;EAAE,QAAQ,EAAE;AAAI,CAAE,EAC1C;EAAE,IAAI,EAAE,eAAe;EAAE,QAAQ,EAAE;AAAI,CAAE,EACzC;EAAE,IAAI,EAAE,gBAAgB;EAAE,QAAQ,EAAE;AAAI,CAAE,EAC1C;EAAE,IAAI,EAAE,gBAAgB;EAAE,QAAQ,EAAE;AAAI,CAAE,EAC1C;EAAE,IAAI,EAAE,gBAAgB;EAAE,QAAQ,EAAE;AAAI,CAAE,EAC1C;EAAE,IAAI,EAAE,iBAAiB;EAAE,QAAQ,EAAE;AAAI,CAAE,EAC3C;EAAE,IAAI,EAAE,iBAAiB;EAAE,QAAQ,EAAE;AAAI,CAAE,CAC5C;AAED;AACA,IAAA,qBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAoCH,SAAAA,CAAAA,qBAAAA,EAAAA,MAAAA,CAAAA;EAWlC,SAAA,qBAAA,CAAY,KAAK,EAAA;IAAjB,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAK,CAAC,IAAA,IAAA;IAEZ,KAAI,CAAC,KAAK,GAAG;MACX,qBAAqB,EAAE,CAAA;KACxB;;EACF;EAED,qBAAA,CAAA,SAAA,CAAA,wBAAwB,GAAxB,UAAyB,GAAG,EAAE,KAAK,EAAA;IACzB,IAAA,qBAAqB,GAAK,IAAI,CAAC,KAAK,CAAA,qBAAf;IAC7B,IAAI,qBAAqB,CAAC,GAAG,CAAC,KAAK,KAAK,EAAE;MACxC,IAAI,CAAC,QAAQ,CAAC,UAAA,KAAK,EAAA;;QAAI,OAAC;UACtB,qBAAqB,EAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAChB,KAAK,CAAC,qBAAqB,CAAA,GAAA,EAAA,GAAA,CAAA,CAAA,EAAA,EAAA,CAC7B,GAAG,CAAA,GAAG,KAAK,EAAA,EAAA;SAEf;OAAC,CAAC;IACJ;GACF;EAED,qBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IAAA,IAAA,KAAA,GAAA,IAAA;IACQ,IAAA,EAAA,GAIF,IAAI,CAAC,KAAK;MAHG,IAAI,GAAA,EAAA,CAAA,aAAA;MACG,WAAW,GAAA,EAAA,CAAA,oBAAA;MACV,YAAY,GAAA,EAAA,CAAA,qBACvB;IACd,IAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,WAAY;IAC3C,IAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,YAAa;IAE7C,IAAM,oBAAoB,GAAG,UAAC,EAAyB,EAAA;UAAvB,YAAY,GAAA,EAAA,CAAA,YAAA;MAAgB,OAAA,qBAAqB,CAC/E,YAAY,EACZ,WAAW,EACX,YAAY,CACb;KAAA;IAED,OACEF,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC,mBAAmB;MACxB,YAAY,EAAEK;IAAkB,CAAA,EAEhCL,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,iBAAiB;MAAC,QAAQ,EAAEe;IAAuB,CAAA,CAAI,EACpEf,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,cAAc;MAAC,QAAQ,EAAE;IAAoB,CAAA,CAAI,EAC9DA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,yBAAyB;MAAC,QAAQ,EAAE;IAA+B,CAAA,CAAI,EACpFA,aAAAA,CAAC,QAAQ,EAAA;MACP,IAAI,EAAC,WAAW;MAChB,SAAS,EAAE,UAAC,EAAoB,EAAA;YAAlB,WAAW,GAAA,EAAA,CAAA,WAAA;QAAY,OAAA,CAAC,CAAC,WAAW,CAAC,KAAK;MAAA;IAAA,CAAA,EAEvD,UAAC,MAAsB,EAAA;MAAK,OAC3BA,aAAAA,CAAC,iBAAiB,EAAA,IAAA,EACf,UAAC,EAED,EAAA;YADC,YAAY,GAAA,EAAA,CAAA,YAAA;UAAE,uBAAuB,GAAA,EAAA,CAAA,uBAAA;UAAE,SAAS,GAAA,EAAA,CAAA,SAAA;UAAE,OAAO,GAAA,EAAA,CAAA,OAAA;UAAE,oBAAoB,GAAA,EAAA,CAAA,oBAAA;QAE/E,IAAM,QAAQ,GAAG,gBAAgB,CAAC,oBAAoB,EAAE,SAAS,EAC/D,MAAM,CAAC,QAAQ,EAAE,OAAO,CAAC;QACnB,IAAA,qBAAqB,GAAK,KAAI,CAAC,KAAK,CAAA,qBAAf;QAC7B,IAAM,gBAAgB,GAAG,yBAAyB,CAChD,MAAM,EACN;UAAE,WAAW,EAAA,WAAA;UAAE,YAAY,EAAA;QAAA,CAAE,EAC7B,YAAY,EACZ,qBAAqB,EACrB,uBAAuB,CACxB;QAED,OACEA,aAAAA,CAAC,IAAI,EAAA,QAAA,CAAA,CAAA,CAAA,EACC,MAAM,EACN,gBAAgB,EAAA;UACpB,SAAS,EAAEgB,iBAAe;UAC1B,QAAQ,EAAE;QAAQ,CAAA,CAAA,CAClB;OAEL,CACiB;IAAA,CACrB,CACQ,EACXhB,aAAAA,CAAC,QAAQ,EAAA;MACP,IAAI,EAAC,UAAU;MACf,SAAS,EAAE,UAAC,EAAiB,EAAA;YAAf,QAAQ,GAAA,EAAA,CAAA,QAAA;QAAY,OAAA,CAAC,CAAC,eAAe,CAAC,QAAQ,CAAC;MAAA;IAAA,CAAA,EAE5D,UAAC,MAAqB,EAAA;MAAK,OAC1BA,aAAAA,CAAC,WAAW,EAAA,QAAA,CAAA,CAAA,CAAA,EAAK,MAAM,CAAA,CAAI;IAAA,CAC5B,CACQ,EACXA,aAAAA,CAAC,QAAQ,EAAA;MACP,IAAI,EAAC,WAAW;MAChB,SAAS,EAAE,UAAC,EAAiB,EAAA;YAAf,QAAQ,GAAA,EAAA,CAAA,QAAA;QAAY,OAAA,CAAC,CAAC,eAAe,CAAC,QAAQ,CAAC;MAAA;IAAA,CAAA,EAE5D,UAAC,MAAsB,EAAA;MAAK,OAC3BA,aAAAA,CAAC,YAAY,EAAA,QAAA,CAAA,CAAA,CAAA,EACP,MAAM,EAAA;QACV,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK;QAClC,YAAY,EAAE,UAAC,EAEd,EAAA;cADC,KAAK,GAAA,EAAA,CAAA,KAAA;UACD,OAAA,KAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,EAAE,KAAK,CAAC;QAAA;MAAA,CAAA,CAAA,CAClE;IAAA,CACH,CACQ,CACJ;GAEZ;EA7GM,qBAAA,CAAA,UAAU,GAAG;IAClB,aAAa,EAAE,MAAM;IACrB,oBAAoB,EAAE,aAAa;IACnC,qBAAqB,EAAE;GACxB;EACM,qBAAA,CAAA,YAAY,GAAG;IACpB,WAAW,EAAE,EAAE;IACf,YAAY,EAAE;GACf;EAsGH,OAAA,qBAAC;CA/GD,CAAoCE,aAAmB,CAAA;AAiHvD;AACA,IAAa,iBAAiB,GAAgD,qBAAqB;AC3JnG,IAAM,yBAAyB,GAAG,UAChC,EAA8B,EAAA;MAA5B,iBAAiB,GAAA,EAAA,CAAA,iBAAA;EAChB,OAAA,wBAAwB,CAAC,iBAAiB,CAAC;AAA3C,CAA2C;AAEhD,IAAA,gBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA+BA,SAAAA,CAAAA,gBAAAA,EAAAA,MAAAA,CAAAA;EAA/B,SAAA,gBAAA,GAAA;;EAqBC;EAdC,gBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACQ,IAAA,EAAA,GAAwC,IAAI,CAAC,KAAK;MAAhD,UAAU,GAAA,EAAA,CAAA,UAAA;MAAE,UAAU,GAAA,EAAA,CAAA,UAAA;MAAE,SAAS,GAAA,EAAA,CAAA,SAAe;IAExD,OACEF,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC;IAAc,CAAA,EAEnBA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,mBAAmB;MAAC,KAAK,EAAE;IAAU,CAAA,CAAI,EACtDA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,mBAAmB;MAAC,KAAK,EAAE;IAAU,CAAA,CAAI,EACtDA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,mBAAmB;MAAC,QAAQ,EAAE;IAAyB,CAAA,CAAI,EACxEA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,kBAAkB;MAAC,KAAK,EAAE;IAAS,CAAA,CAAI,CAC7C;GAEZ;EAnBM,gBAAA,CAAA,YAAY,GAAG;IACpB,UAAU,EAAE,EAAE;IACd,UAAU,EAAE,EAAE;IACd,SAAS,EAAE;GACZ;EAgBH,OAAA,gBAAC;CArBD,CAA+BE,aAAmB,CAAA;AAuBlD;AACA,IAAa,YAAY,GAA2C,gBAAgB;ACtBpF,IAAMG,oBAAkB,GAAG,CACzB;EAAE,IAAI,EAAE;AAAc,CAAE,EACxB;EAAE,IAAI,EAAE,oBAAoB;EAAE,QAAQ,EAAE;AAAI,CAAE,CAC/C;AAED,IAAA,qBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAoCH,SAAAA,CAAAA,qBAAAA,EAAAA,MAAAA,CAAAA;EAApC,SAAA,qBAAA,GAAA;;EAoEC;EAjEC,qBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACU,IAAA,UAAU,GAAK,IAAI,CAAC,KAAK,CAAA,UAAf;IAElB,IAAM,0BAA0B,GAAG,UAAC,EAO1B,EAAA;UANR,IAAI,GAAA,EAAA,CAAA,IAAA;QACJ,iBAAiB,GAAA,EAAA,CAAA,iBAAA;QACjB,YAAY,GAAA,EAAA,CAAA,YAAA;QACZ,cAAc,GAAA,EAAA,CAAA,cAAA;QACd,UAAU,GAAA,EAAA,CAAA,UAAA;QACV,gBAAgB,GAAA,EAAA,CAAA,gBAAA;MACH,OAAA,kBAAkB,CAC/B,IAAI,EACJ,iBAAiB,EACjB,YAAY,EACZ,cAAc,EACd,UAAU,EACV,gBAAgB,EAChB,UAAU,CACX;KAAA;IAED,IAAM,0BAA0B,GAAG,UAAC,EAO1B,EAAA;UANR,IAAI,GAAA,EAAA,CAAA,IAAA;QACJ,iBAAiB,GAAA,EAAA,CAAA,iBAAA;QACjB,YAAY,GAAA,EAAA,CAAA,YAAA;QACZ,cAAc,GAAA,EAAA,CAAA,cAAA;QACd,UAAU,GAAA,EAAA,CAAA,UAAA;QACV,gBAAgB,GAAA,EAAA,CAAA,gBAAA;MACH,OAAA,kBAAkB,CAC/B,IAAI,EACJ,iBAAiB,EACjB,YAAY,EACZ,cAAc,EACd,UAAU,EACV,gBAAgB,EAChB,UAAU,CACX;KAAA;IAED,IAAM,yBAAyB,GAAG,UAAC,EAOzB,EAAA;UANR,IAAI,GAAA,EAAA,CAAA,IAAA;QACJ,gBAAgB,GAAA,EAAA,CAAA,gBAAA;QAChB,YAAY,GAAA,EAAA,CAAA,YAAA;QACZ,cAAc,GAAA,EAAA,CAAA,cAAA;QACd,UAAU,GAAA,EAAA,CAAA,UAAA;QACV,QAAQ,GAAA,EAAA,CAAA,QAAA;MACK,OAAA,iBAAiB,CAC9B,IAAI,EACJ,gBAAgB,EAChB,YAAY,EACZ,cAAc,EACd,UAAU,EACV,QAAQ,EACR,UAAU,CACX;KAAA;IAED,OACEF,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC,mBAAmB;MACxB,YAAY,EAAEK;IAAkB,CAAA,EAEhCL,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,oBAAoB;MAAC,QAAQ,EAAE;IAA0B,CAAA,CAAI,EAC1EA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,oBAAoB;MAAC,QAAQ,EAAE;IAA0B,CAAA,CAAI,EAC1EA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,mBAAmB;MAAC,QAAQ,EAAE;IAAyB,CAAA,CAAI,CACjE;GAEZ;EAlEM,qBAAA,CAAA,iBAAiB,GAAsB,wBAAwB;EAmExE,OAAA,qBAAC;CApED,CAAoCE,aAAmB,CAAA;AAsEvD;AACA,IAAa,iBAAiB,GAG1B,qBAAqB;ACtFzB,IAAMG,oBAAkB,GAAG,CACzB;EAAE,IAAI,EAAE;AAAc,CAAE,CACzB;AAED,IAAA,iBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAgCH,SAAAA,CAAAA,iBAAAA,EAAAA,MAAAA,CAAAA;EAAhC,SAAA,iBAAA,GAAA;;EAeC;EAdC,iBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACQ,IAAA,EAAA,GAA2C,IAAI,CAAC,KAAK;MAAnD,WAAW,GAAA,EAAA,CAAA,WAAA;MAAE,WAAW,GAAA,EAAA,CAAA,WAAA;MAAE,UAAU,GAAA,EAAA,CAAA,UAAe;IAE3D,OACEF,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC,eAAe;MACpB,YAAY,EAAEK;IAAkB,CAAA,EAEhCL,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,oBAAoB;MAAC,KAAK,EAAE;IAAW,CAAA,CAAI,EACxDA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,oBAAoB;MAAC,KAAK,EAAE;IAAW,CAAA,CAAI,EACxDA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,mBAAmB;MAAC,KAAK,EAAE;IAAU,CAAA,CAAI,CAC/C;GAEZ;EACH,OAAA,iBAAC;AAAD,CAAC,CAf+BE,aAAmB,CAAA;AAiBnD;AACA,IAAa,aAAa,GAA4C,iBAAiB;ACAvF,IAAMiB,cAAY,GAAG,CACnB;EAAE,IAAI,EAAE,kBAAkB;EAAE,QAAQ,EAAE;AAAI,CAAE,EAC5C;EAAE,IAAI,EAAE;AAAc,CAAE,EACxB;EAAE,IAAI,EAAE,eAAe;EAAE,QAAQ,EAAE;AAAI,CAAE,EACzC;EAAE,IAAI,EAAE,mBAAmB;EAAE,QAAQ,EAAE;AAAI,CAAE,EAC7C;EAAE,IAAI,EAAE;AAAO,CAAE,EACjB;EAAE,IAAI,EAAE,iBAAiB;EAAE,QAAQ,EAAE;AAAI,CAAE,CAC5C;AAED,IAAMN,uBAAqB,GAAG,UAAC,EAOrB,EAAA;MANR,aAAa,GAAA,EAAA,CAAA,aAAA;IACb,cAAc,GAAA,EAAA,CAAA,cAAA;IACd,UAAU,GAAA,EAAA,CAAA,UAAA;IACV,QAAQ,GAAA,EAAA,CAAA,QAAA;IACR,iBAAiB,GAAA,EAAA,CAAA,iBAAA;IACjB,gBAAgB,GAAA,EAAA,CAAA,gBAAA;EACH,OAAA,sBAAsB,CACnC,aAAa,EAAE,iBAAiB,EAAE,gBAAgB,EAAE,cAAc,EAAE,UAAU,EAAE,QAAQ,CACzF;AAFc,CAEd;AACD,IAAM,uBAAuB,GAAG,UAAC,EAEvB,EAAA;MADR,eAAe,GAAA,EAAA,CAAA,eAAA;IAAE,iBAAiB,GAAA,EAAA,CAAA,iBAAA;EACrB,OAAA,iBAAiB,CAAC,MAAM,GACnC,2BAA2B,CAAC,eAAe,CAAC,GAC5C,eAAe;AAFJ,CAEI;;EAEsBX,SAAAA,CAAAA,mBAAAA,EAAAA,MAAAA,CAAAA;EAAzC,SAAA,mBAAA,GAAA;;EAgMC;EA3KC,mBAAA,CAAA,SAAA,CAAA,aAAa,GAAb,UAAc,MAAM,EAAE,eAAe,EAAA;IAC7B,IAAA,EAAA,GAIF,IAAI,CAAC,KAAK;MAHZ,sBAAsB,GAAA,EAAA,CAAA,sBAAA;MACP,IAAI,GAAA,EAAA,CAAA,aAAA;MACnB,QAAQ,GAAA,EAAA,CAAA,QACI;IAEd,OACEF,aAAAA,CAAC,mBAAmB,EAAA;MAClB,MAAM,EAAE,MAAM;MACd,eAAe,EAAE,eAAe;MAChC,sBAAsB,EAAE,sBAAsB;MAC9C,aAAa,EAAE,IAAI;MACnB,QAAQ,EAAE;IAAS,CAAA,CACnB;GAEL;EAED,mBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IAAA,IAAA,KAAA,GAAA,IAAA;IACQ,IAAA,EAAA,GAUF,IAAI,CAAC,KAAK;MATO,QAAQ,GAAA,EAAA,CAAA,iBAAA;MACR,QAAQ,GAAA,EAAA,CAAA,iBAAA;MACT,OAAO,GAAA,EAAA,CAAA,gBAAA;MACL,SAAS,GAAA,EAAA,CAAA,kBAAA;MACT,SAAS,GAAA,EAAA,CAAA,kBAAA;MACV,QAAQ,GAAA,EAAA,CAAA,iBAAA;MACF,cAAc,GAAA,EAAA,CAAA,uBAAA;MACX,iBAAiB,GAAA,EAAA,CAAA,0BAAA;MAClB,gBAAgB,GAAA,EAAA,CAAA,yBAC/B;IAEd,OACEA,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC,iBAAiB;MACtB,YAAY,EAAEmB;IAAY,CAAA,EAE1BnB,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,eAAe;MAAC,QAAQ,EAAEa;IAAqB,CAAA,CAAI,EAChEb,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,iBAAiB;MAAC,QAAQ,EAAE;IAAuB,CAAA,CAAI,EACpEA,aAAAA,CAAC,QAAQ,EAAA;MACP,IAAI,EAAC,WAAW;MAChB,SAAS,EAAE,UACT,EAA8B,EAAA;YAA5B,QAAQ,GAAA,EAAA,CAAA,QAAA;UAAE,WAAW,GAAA,EAAA,CAAA,WAAA;QACpB,OAAA,uBAAuB,CAAC,QAAQ,EAAE,WAAW,CAAC;MAAA;IAAA,CAAA,EAElD,UAAC,MAAsB,EAAA;MAAK,OAC3BA,aAAAA,CAAC,iBAAiB,EAAA,IAAA,EACf,UAAC,EAAyC,EAAA;YAAvC,iBAAiB,GAAA,EAAA,CAAA,iBAAA;UAAE,kBAAkB,GAAA,EAAA,CAAA,kBAAA;QACvC,IAAM,eAAe,GAAG,kBAAkB,CACxC,iBAAiB,EACjB,MAAM,CAAC,WAAW,CAAC,MAAO,CAAC,IAAI,EAC/B,kBAAkB,CACnB;QACD,OACEA,aAAAA,CAAC,SAAS,EAAA,QAAA,CAAA,CAAA,CAAA,EACJ,MAAM,EAAA;UACV,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC;QAAO,CAAA,CAAA,EAEjC,KAAI,CAAC,aAAa,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,eAAe,CAAC,CACrD;OAEf,CACiB;IAAA,CACrB,CACQ,EACXA,aAAAA,CAAC,QAAQ,EAAA;MACP,IAAI,EAAC,WAAW;MAChB,SAAS,EAAE,UACT,EAA8B,EAAA;YAA5B,QAAQ,GAAA,EAAA,CAAA,QAAA;UAAE,WAAW,GAAA,EAAA,CAAA,WAAA;QACpB,OAAA,uBAAuB,CAAC,QAAQ,EAAE,WAAW,CAAC;MAAA;IAAA,CAAA,EAElD,UAAC,MAAsB,EAAA;MAAK,OAC3BA,aAAAA,CAAC,iBAAiB,EAAA,IAAA,EACf,UAAC,EAAyC,EAAA;YAAvC,iBAAiB,GAAA,EAAA,CAAA,iBAAA;UAAE,kBAAkB,GAAA,EAAA,CAAA,kBAAA;QACvC,IAAM,eAAe,GAAG,kBAAkB,CACxC,iBAAiB,EACjB,MAAM,CAAC,WAAW,CAAC,MAAO,CAAC,IAAI,EAC/B,kBAAkB,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,EACnD,UAAA,WAAW,EAAA;UAAI,OAAA,eAAe,CAAC,WAAW,CAAC;QAAA,CAAA,CAC5C;QACD,OACEA,aAAAA,CAAC,SAAS,EAAA,QAAA,CAAA,CAAA,CAAA,EACJ,MAAM,EAAA;UACV,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC;QAAO,CAAA,CAAA,EAEjC,KAAI,CAAC,aAAa,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,eAAe,CAAC,CACrD;OAEf,CACiB;IAAA,CACrB,CACQ,EACXA,aAAAA,CAAC,QAAQ,EAAA;MACP,IAAI,EAAC,WAAW;MAChB,SAAS,EAAE,UACT,EAA8B,EAAA;YAA5B,QAAQ,GAAA,EAAA,CAAA,QAAA;UAAE,WAAW,GAAA,EAAA,CAAA,WAAA;QACpB,OAAA,sBAAsB,CAAC,QAAQ,EAAE,WAAW,CAAC;MAAA;IAAA,CAAA,EAEjD,UAAC,MAAsB,EAAA;MAAK,OAC3BA,aAAAA,CAAC,iBAAiB,EAAA,IAAA,EACf,UAAC,EAMD,EAAA;YALC,gBAAgB,GAAA,EAAA,CAAA,gBAAA;UAChB,iBAAiB,GAAA,EAAA,CAAA,iBAAA;UACjB,mBAAmB,GAAA,EAAA,CAAA,mBAAA;UACnB,QAAQ,GAAA,EAAA,CAAA,QAAA;UACR,eAAe,GAAA,EAAA,CAAA,eAAA;QAEf,IAAM,eAAe,GAAG,kBAAkB,CACxC,gBAAgB,EAChB,MAAM,CAAC,WAAW,CAAC,MAAO,CAAC,IAAI,EAC/B,iBAAiB,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CACjD;QACD,IAAI,mBAAmB,KAAK,MAAM,CAAC,WAAW,CAAC,MAAO,CAAC,IAAI,EAAE;UAC3D,OACEA,aAAAA,CAAC,cAAc,EAAA,QAAA,CAAA,CAAA,CAAA,EACT,MAAM,EAAA;YACV,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC;UAAO,CAAA,CAAA,EAElCA,aAAAA,CAAC,gBAAgB,EAAA;YACf,KAAK,EAAE,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG;UAAC,CAAA,CAC3C,EACFA,aAAAA,CAAC,iBAAiB,EAAA,IAAA,EACf,KAAI,CAAC,aAAa,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,eAAe,CAAC,CAC7C,CACL;QAEpB;QACD,OACEA,aAAAA,CAAC,QAAQ,EAAA,QAAA,CAAA,CAAA,CAAA,EACH,MAAM,EAAA;UACV,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC;QAAO,CAAA,CAAA,EAEjC,KAAI,CAAC,aAAa,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,eAAe,CAAC,CACtD;OAEd,CACiB;IAAA,CACrB,CACQ,EACXA,aAAAA,CAAC,QAAQ,EAAA;MACP,IAAI,EAAC,UAAU;MACf,SAAS,EAAE,UAAC,EAAiB,EAAA;YAAf,QAAQ,GAAA,EAAA,CAAA,QAAA;QAAY,OAAA,CAAC,CAAC,sBAAsB,CAAC,QAAQ,CAAC;MAAA;IAAA,CAAA,EAEnE,UAAC,MAAqB,EAAA;MAAK,OAC1BA,aAAAA,CAAC,QAAQ,EAAA,QAAA,CAAA,CAAA,CAAA,EACH,MAAM,CAAA,CACV;IAAA,CACH,CACQ,EACXA,aAAAA,CAAC,QAAQ,EAAA;MACP,IAAI,EAAC,UAAU;MACf,SAAS,EAAE,UAAC,EAAiB,EAAA;YAAf,QAAQ,GAAA,EAAA,CAAA,QAAA;QAAY,OAAA,CAAC,CAAC,sBAAsB,CAAC,QAAQ,CAAC;MAAA;IAAA,CAAA,EAEnE,UAAC,MAAqB,EAAA;MAAK,OAC1BA,aAAAA,CAAC,QAAQ,EAAA,QAAA,CAAA,CAAA,CAAA,EACH,MAAM,CAAA,CACV;IAAA,CACH,CACQ,EACXA,aAAAA,CAAC,QAAQ,EAAA;MACP,IAAI,EAAC,UAAU;MACf,SAAS,EAAE,UAAC,EAAiB,EAAA;YAAf,QAAQ,GAAA,EAAA,CAAA,QAAA;QAAY,OAAA,CAAC,CAAC,qBAAqB,CAAC,QAAQ,CAAC;MAAA;IAAA,CAAA,EAElE,UAAC,MAAqB,EAAA;MAAK,OAC1BA,aAAAA,CAAC,OAAO,EAAA,QAAA,CAAA,CAAA,CAAA,EACF,MAAM,CAAA,CACV;IAAA,CACH,CACQ,CACJ;GAEZ;EA9LM,mBAAA,CAAA,aAAa,GAAG,uBAAuB;EACvC,mBAAA,CAAA,cAAc,GAAG,wBAAwB;EACzC,mBAAA,CAAA,cAAc,GAAG,wBAAwB;EACzC,mBAAA,CAAA,YAAY,GAAG;IACpB,sBAAsB,EAAE,EAAE;IAC1B,QAAQ,EAAE,CAAA;GACX;EACM,mBAAA,CAAA,UAAU,GAAG;IAClB,iBAAiB,EAAE,UAAU;IAC7B,iBAAiB,EAAE,UAAU;IAC7B,gBAAgB,EAAE,SAAS;IAC3B,kBAAkB,EAAE,WAAW;IAC/B,kBAAkB,EAAE,WAAW;IAC/B,iBAAiB,EAAE,UAAU;IAC7B,uBAAuB,EAAE,eAAe;IACxC,0BAA0B,EAAE,kBAAkB;IAC9C,yBAAyB,EAAE,iBAAiB;IAC5C,aAAa,EAAE;GAChB;EA6KH,OAAA,mBAAC;CAhMD,CAAyCE,aAAmB,CAAA;;AAmM5D,IAAa,eAAe,GAOxB,mBAAmB;ACpPvB,IAAM,mBAAmB,GAAG,UAC1B,EAAyC,EAAA;MAAvC,IAAI,GAAA,EAAA,CAAA,IAAA;IAAE,IAAI,GAAA,EAAA,CAAA,IAAA;IAAE,gBAAgB,GAAA,EAAA,CAAA,gBAAA;EAC3B,OAAA,oBAAoB,CAAC,IAAI,EAAE,IAAI,EAAE,gBAAgB,CAAC;AAAlD,CAAkD;AAEvD,IAAM,YAAY,GAAG,UACnB,EAA2C,EAAA;MAAzC,WAAW,GAAA,EAAA,CAAA,WAAA;IAAE,iBAAiB,GAAA,EAAA,CAAA,iBAAA;EAC7B,OAAA,SAAS,CAAC,WAAW,EAAE,iBAAiB,CAAC;AAAzC,CAAyC;AAE9C,IAAM,uBAAuB,GAAG,UAAC,EAAwB,EAAA;MAAtB,WAAW,GAAA,EAAA,CAAA,WAAA;EAAgB,OAAA,eAAe,CAAC,WAAW,CAAC;AAA5B,CAA4B;AAE1F;AACA,IAAA,qBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAoCA,SAAAA,CAAAA,qBAAAA,EAAAA,MAAAA,CAAAA;EAMlC,SAAA,qBAAA,CAAY,KAAK,EAAA;IAAjB,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAK,CAAC,IAAA,IAAA;IAHd,KAAA,CAAA,YAAY,GAAW,CAAC;IAaxB,KAAA,CAAA,WAAW,GAAG,UACZ,QAAQ,EACR,EAAwB,EACxB,EAA4B,EAAA;UAD1B,WAAW,GAAA,EAAA,CAAA,WAAA;UACX,eAAe,GAAA,EAAA,CAAA,eAAA;MAET,IAAA,QAAQ,GAAK,KAAI,CAAC,KAAK,CAAA,QAAf;MAChB,IAAM,cAAc,GAAG,iBAAiB,CAAC,QAAQ,CAAC;MAElD,IAAI,kBAAkB,CAAC,WAAW,EAAE,cAAc,EAAE,QAAS,CAAC,EAAE;QAC9D,eAAe,CAAC;UAAE,cAAc,EAAA;QAAA,CAAE,CAAC;MACpC;KACF;IAED,KAAA,CAAA,qBAAqB,GAAG,UACtB,EAA+B,EAC/B,EAAwB,EAAA;UADtB,cAAc,GAAA,EAAA,CAAA,cAAA;QAAE,WAAW,GAAA,EAAA,CAAA,WAAA;UAC3B,WAAW,GAAA,EAAA,CAAA,WAAA;MAEP,IAAA,EAAA,GAAiD,KAAI,CAAC,KAAK;QAAzD,QAAQ,GAAA,EAAA,CAAA,QAAA;QAAE,aAAa,GAAA,EAAA,CAAA,aAAA;QAAE,iBAAiB,GAAA,EAAA,CAAA,iBAAe;MAC3D,IAAA,EAAA,GAA6C,KAAI,CAAC,KAAK;QAArD,mBAAmB,GAAA,EAAA,CAAA,mBAAA;QAAE,iBAAiB,GAAA,EAAA,CAAA,iBAAe;MAC7D,IAAM,iBAAiB,GAAG,WAAW,GAAG,gBAAgB,GAAG,WAAW;MAChE,IAAA,EAAA,GAAmC,cAAc,CACrD,cAAc,EAAE,WAAW,EAAE,QAAS,EAAE,aAAa,EAAE,WAAW,EAAE,iBAAiB,CACtF;QAFO,cAAc,GAAA,EAAA,CAAA,cAAA;QAAE,YAAY,GAAA,EAAA,CAAA,YAEnC;MAED,IAAI,WAAW,IAAI,iBAAiB,CAAC,cAAc,EAAE,mBAAmB,EAAE,iBAAiB,CAAC,EAAE;QAC5F,KAAI,CAAC,eAAe,CAAC,cAAc,EAAE,iBAAiB,EAAE,YAAY,CAAC;MACtE;KACF;IAoDD,KAAA,CAAA,oBAAoB,GAAG,UACrB,CAAM,EACN,EAAW,EACX,EAA4B,EAAA;UAA1B,eAAe,GAAA,EAAA,CAAA,eAAA;MAEjB,KAAI,CAAC,QAAQ,CAAC;QACZ,gBAAgB,EAAE;OACnB,CAAC;MACF,eAAe,CAAC;QAAE,WAAW,EAAE;MAAI,CAAE,CAAC;KACvC;IAED,KAAA,CAAA,yBAAyB,GAAG,YAAA;MAAM,OAAA,KAAI,CAAC,gBAAgB,EAAE;IAAA,CAAA;IAlGvD,KAAI,CAAC,KAAK,GAAG;MACX,gBAAgB,EAAE,gBAAgB;MAClC,mBAAmB,EAAE,CAAC;MACtB,iBAAiB,EAAE,KAAK,CAAC,aAAa,IAAI,CAAC;MAC3C,iBAAiB,EAAE,CAAC,GAAG,KAAK,CAAC;KAC9B;;EACF;EA+BD,qBAAA,CAAA,SAAA,CAAA,eAAe,GAAf,UACE,cAAwB,EAAE,WAAwB,EAAE,YAAsB,EAAA;IAD5E,IAAA,KAAA,GAAA,IAAA;IAGQ,IAAA,EAAA,GAAgD,IAAI,CAAC,KAAK;MAAxD,OAAO,GAAA,EAAA,CAAA,OAAA;MAAE,iBAAiB,GAAA,EAAA,CAAA,iBAAA;MAAE,aAAa,GAAA,EAAA,CAAA,aAAe;IACxD,IAAmB,mBAAmB,GAAK,IAAI,CAAC,KAAK,CAAA,iBAAf;IAE9C,IAAI,IAAI,CAAC,YAAY,KAAK,CAAC,EAAE;MAC3B,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC;IAChC;IACD,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,UAAU,CAAC,YAAA;MAC5B,IAAO,mBAAmB,GAAU,cAAc,CAAA,KAAxB;QAAE,GAAG,GAAK,cAAc,CAAA,GAAnB;MACvC,IAAM,SAAS,GAAG,GAAG,GAAG,mBAAmB;MAC3C,IAAM,gBAAgB,GAAG,kBAAkB,CAAC,WAAW,EAAE,YAAY,CAAC;MACtE,IAAM,iBAAiB,GAAG,oBAAoB,CAC5C,iBAAiB,EACjB,YAAY,CAAC,GAAG,EAChB,mBAAmB,EACnB,aAAa,CACd;MAED,OAAO,CAAC,mBAAmB,EAAE,SAAS,CAAC;MAEvC,KAAI,CAAC,QAAQ,CAAC;QACZ,gBAAgB,EAAA,gBAAA;QAChB,iBAAiB,EAAA,iBAAA;QACjB,mBAAmB,EAAA,mBAAA;QACnB,iBAAiB,EAAE;OACpB,CAAC;KACH,EAAE,EAAE,CAAC;GACP;EAED,qBAAA,CAAA,SAAA,CAAA,gBAAgB,GAAhB,YAAA;IAAA,IAAA,KAAA,GAAA,IAAA;IACQ,IAAA,EAAA,GAAwB,IAAI,CAAC,KAAK;MAAhC,OAAO,GAAA,EAAA,CAAA,OAAA;MAAE,QAAQ,GAAA,EAAA,CAAA,QAAe;IACxC,IAAM,UAAU,GAAG,CAAC;IACpB,IAAM,QAAQ,GAAG,CAAC,GAAG,QAAS;IAE9B,IAAI,IAAI,CAAC,YAAY,KAAK,CAAC,EAAE;MAC3B,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC;IAChC;IACD,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,UAAU,CAAC,YAAA;MACpC,OAAO,CAAC,UAAU,EAAE,QAAQ,CAAC;MAE7B,KAAI,CAAC,QAAQ,CAAC;QACZ,gBAAgB,EAAE,gBAAgB;QAClC,mBAAmB,EAAE,UAAU;QAC/B,iBAAiB,EAAE;OACpB,CAAC;KACH,EAAE,EAAE,CAAC;GACP;EAeM,qBAAA,CAAA,wBAAwB,GAA/B,UAAgC,SAAS,EAAE,SAAS,EAAA;IAEhD,IAAA,EAAA,GAIE,SAAS,CAAA,iBAJ2D;MAAnD,qBAAqB,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,SAAS,CAAC,iBAAiB,GAAA,EAAA;MACtE,aAAa,GAGX,SAAS,CAAA,aAHE;MACb,QAAQ,GAEN,SAAS,CAAA,QAFH;MACR,iBAAiB,GACf,SAAS,CAAA,iBADM;IAGjB,IAAqB,uBAAuB,GAE1C,SAAS,CAAA,mBAFiC;MAC1B,mBAAmB,GACnC,SAAS,CAAA,gBAD0B;IAGvC,IAAM,iBAAiB,GAAG,oBAAoB,CAC5C,iBAAiB,EACjB,QAAQ,GAAG,CAAC,EACZ,qBAAqB,EACrB,aAAa,CACd;IACD,IAAM,mBAAmB,GAAG,IAAI,CAAC,GAAG,CAClC,IAAI,CAAC,GAAG,CAAC,uBAAuB,EAAE,iBAAiB,GAAG,QAAQ,CAAC,EAC/D,CAAC,CACF;IACD,IAAM,gBAAgB,GACpB,uBAAuB,KAAK,mBAAmB,GAC3C,mBAAmB,GACnB,gBAAgB;IAEtB,OAAO;MACL,iBAAiB,EAAA,iBAAA;MACjB,mBAAmB,EAAA,mBAAA;MACnB,gBAAgB,EAAA;KACjB;GACF;EAED,qBAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjB,YAAA;IACQ,IAAA,EAAA,GAA0D,IAAI,CAAC,KAAK;MAAlE,OAAO,GAAA,EAAA,CAAA,OAAA;MAAE,QAAQ,GAAA,EAAA,CAAA,QAAA;MAAE,iBAAiB,GAAA,EAAA,CAAA,iBAAA;MAAE,aAAa,GAAA,EAAA,CAAA,aAAe;IAC1E,OAAO,CAAC,CAAC,EAAE,CAAC,GAAG,QAAS,CAAC;IAEzB,IAAM,WAAW,GAAG,iBAAiB,GAAG,CAAC,GAAG,QAAS,GAAG,aAAa;IACrE,IAAI,CAAC,QAAQ,CAAC;MACZ,iBAAiB,EAAE;KACpB,CAAC;GACH;EAED,qBAAA,CAAA,SAAA,CAAA,oBAAoB,GAApB,YAAA;IACE,IAAI,IAAI,CAAC,YAAY,KAAK,CAAC,EAAE;MAC3B,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC;IACvC;GACF;EAED,qBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACQ,IAAA,EAAA,GAA0C,IAAI,CAAC,KAAK;MAAlD,gBAAgB,GAAA,EAAA,CAAA,gBAAA;MAAE,iBAAiB,GAAA,EAAA,CAAA,iBAAe;IACpD,IAAA,EAAA,GAAiD,IAAI,CAAC,KAAK;MAAzD,IAAI,GAAA,EAAA,CAAA,IAAA;MAAE,QAAQ,GAAA,EAAA,CAAA,QAAA;MAAE,OAAO,GAAA,EAAA,CAAA,OAAA;MAAE,iBAAiB,GAAA,EAAA,CAAA,iBAAe;IAEjE,OACEF,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC;IAAmB,CAAA,EAExBA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,cAAc;MAAC,KAAK,EAAA;IAAA,CAAA,CAAG,EACpCA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,eAAe;MAAC,KAAK,EAAE;IAAO,CAAA,CAAI,EAC/CA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,qBAAqB;MAAC,KAAK,EAAE;IAAiB,CAAA,CAAI,EAC/DA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,MAAM;MAAC,KAAK,EAAE;IAAI,CAAA,CAAI,EACnCA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,kBAAkB;MAAC,KAAK,EAAE;IAAgB,CAAA,CAAI,EAC3DA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,UAAU;MAAC,KAAK,EAAE;IAAQ,CAAA,CAAI,EAC3CA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,mBAAmB;MAAC,KAAK,EAAE;IAAiB,CAAA,CAAI,EAE7DA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,aAAa;MAAC,QAAQ,EAAE;IAAmB,CAAA,CAAI,EAC5DA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,MAAM;MAAC,QAAQ,EAAE;IAAY,CAAA,CAAI,EAC9CA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,iBAAiB;MAAC,QAAQ,EAAE;IAAuB,CAAA,CAAI,EAEpEA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,iBAAiB;MAAC,MAAM,EAAE,IAAI,CAAC;IAAqB,CAAA,CAAI,EACrEA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,aAAa;MAAC,MAAM,EAAE,IAAI,CAAC;IAAW,CAAA,CAAI,EACvDA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,eAAe;MAAC,MAAM,EAAE,IAAI,CAAC;IAAoB,CAAA,CAAI,EAClEA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,qBAAqB;MAAC,MAAM,EAAE,IAAI,CAAC;IAAoB,CAAA,CAAI,EACxEA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,oBAAoB;MAAC,MAAM,EAAE,IAAI,CAAC;IAAyB,CAAA,CAAI,EAC5EA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,mBAAmB;MAAC,MAAM,EAAE,IAAI,CAAC;IAAyB,CAAA,CAAI,EAC3EA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,sBAAsB;MAAC,MAAM,EAAE,IAAI,CAAC;IAAyB,CAAA,CAAI,CACvE;GAEZ;EA3LM,qBAAA,CAAA,YAAY,GAAG;IACpB,QAAQ,EAAE;GACX;EA0LH,OAAA,qBAAC;CA7LD,CAAoCE,aAAmB,CAAA;AA+LvD,IAAa,iBAAiB,GAAgD,qBAAqB;AClMnG,IAAMG,oBAAkB,GAAG,CACzB;EAAE,IAAI,EAAE;AAAc,CAAE,EACxB;EAAE,IAAI,EAAE;AAAO,CAAE,EACjB;EAAE,IAAI,EAAE,kBAAkB;EAAE,QAAQ,EAAE;AAAI,CAAE,CAC7C;AAED,IAAM,4BAA4B,GAAG,UACnC,EAAwC,EAAA;MAAtC,aAAa,GAAA,EAAA,CAAA,aAAA;IAAE,YAAY,GAAA,EAAA,CAAA,YAAA;EAC1B,OAAA,oBAAoB,CAAC,aAAa,EAAE,YAAY,CAAC;AAAjD,CAAiD;AACtD,IAAM,+BAA+B,GAAG,UACtC,EAAuC,EAAA;MAArC,YAAY,GAAA,EAAA,CAAA,YAAA;IAAE,YAAY,GAAA,EAAA,CAAA,YAAA;EACzB,OAAA,uBAAuB,CAAC,YAAY,EAAE,YAAY,CAAC;AAAnD,CAAmD;AAExD;AACA,IAAM,yBAAyB,GAAG,yFAAyF;AAE3H;AACA,IAAM,0BAA0B,GAAmF,UAAC,KAAK,EAAA;EAC/G,IAAe,QAAQ,GAA6C,KAAK,CAAA,aAAlD;IAAE,eAAe,GAA4B,KAAK,CAAA,eAAjC;IAAE,qBAAqB,GAAK,KAAK,CAAA,qBAAV;EAEvE,OACEL,aAAAA,CAAC,MAAM,EAAA;IAAC,IAAI,EAAC,wBAAwB;IAAC,YAAY,EAAEK;EAAkB,CAAA,EACpEL,aAAAA,CAAC,MAAM,EAAA;IAAC,IAAI,EAAC,eAAe;IAAC,QAAQ,EAAE;EAA4B,CAAA,CAAI,EACvEA,aAAAA,CAAC,MAAM,EAAA;IAAC,IAAI,EAAC,cAAc;IAAC,QAAQ,EAAE;EAA+B,CAAA,CAAI,EACzEA,aAAAA,CAAC,QAAQ,EAAA;IACP,IAAI,EAAC,WAAW;IAChB,SAAS,EAAE,UAAC,EAA8B,EAAA;UAA5B,QAAQ,GAAA,EAAA,CAAA,QAAA;QAAE,WAAW,GAAA,EAAA,CAAA,WAAA;MACjC,OAAA,QAAQ,CAAC,IAAI,KAAK,eAAe,IACjC,WAAW,CAAC,IAAI,KAAK,eAAe;IAAA;EAAA,CAAA,EAGrC,UAAC,MAAsB,EAAA;IAAK,OAC3BA,aAAAA,CAAC,iBAAiB,EAAA,IAAA,EACf,UAAC,EAAE,EAAE,EAAkB,EAAA;;UAAhB,cAAc,GAAA,EAAA,CAAA,cAAA;MACC,IAAA,KAAK,GAAgC,MAAM,CAAA,QAAA,CAAA,KAAtC;QAAmB,MAAM,GAAO,MAAM,CAAA,WAAA,CAAA,MAAb;MAC3C,IAAM,UAAU,GAAK,MAAO,CAAA,IAAZ;MAExB,IAAI,eAAe,KAAK,OAAO,IAAI,eAAe,KAAK,aAAa,EAAE;QACpE,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC;MAC3C;MAED,IAAM,qBAAqB,GAAG,YAAA;QAC5B,OAAA,cAAc,CAAC;UACb,YAAY,EAAE,CAAC;YAAE,KAAK,EAAA,KAAA;YAAE,UAAU,EAAA;UAAA,CAAE;SACrC,CAAC;OAAA;MACJ,IAAM,SAAS,GAAG,eAAe,KAAK,OAAO,GAAG,SAAS,GAAG,eAAe;MAC3E,IAAM,SAAS,GAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAQ,MAAM,CAAA,GAAA,EAAA,GAAA,CAAA,CAAA,EAAA,EAAA,CAAG,SAAS,CAAA,GAAG,qBAAqB,EAAA,EAAA,EAAE;MAEnE,OAAOA,aAAAA,CAAC,mBAAmB,EAAA;QAAC,MAAM,EAAE;MAAS,CAAA,CAAI;KAClD,CACiB;EAAA,CACrB,CACQ,EACXA,aAAAA,CAAC,QAAQ,EAAA;IACP,IAAI,EAAC,WAAW;IAChB,SAAS,EAAE,UAAC,EAA8B,EAAA;UAA5B,QAAQ,GAAA,EAAA,CAAA,QAAA;QAAE,WAAW,GAAA,EAAA,CAAA,WAAA;MACjC,OAAA,QAAQ,CAAC,WAAW,IAAI,WAAW,CAAC,WAAW;IAAA;EAAA,CAAA,EAGhD,UAAC,MAAsB,EAAA;IAAK,OAC3BA,aAAAA,CAAC,iBAAiB,EAAA,IAAA,EACf,UACC,EAAqE,EACrE,EAAkE,EAAA;UADhE,YAAY,GAAA,EAAA,CAAA,YAAA;QAAE,eAAe,GAAA,EAAA,CAAA,eAAA;QAAE,UAAU,GAAA,EAAA,CAAA,UAAA;QAAE,sBAAsB,GAAA,EAAA,CAAA,sBAAA;UACjE,SAAS,GAAA,EAAA,CAAA,SAAA;QAAE,aAAa,GAAA,EAAA,CAAA,aAAA;QAAE,iBAAiB,GAAA,EAAA,CAAA,iBAAA;QAAE,iBAAiB,GAAA,EAAA,CAAA,iBAAA;MAExD,IAAA,EAAA,GAAuD,MAAM,CAAA,QAApC;QAAZ,KAAK,GAAA,EAAA,CAAA,KAAA;QAAE,GAAG,GAAA,EAAA,CAAA,GAAA;QAAmB,MAAM,GAAO,MAAM,CAAA,WAAA,CAAA,MAAb;MAChD,IAAM,UAAU,GAAK,MAAO,CAAA,IAAZ;MAExB,IAAM,UAAU,GAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACX,GAAG,CAAA,EACH,YAAY,CAAC,UAAU,EAAE,KAAM,CAAC,CACpC;MAED,IAAM,KAAK,GAAG,YAAY,CAAC,UAAU,EAAE,UAAU,CAAC;MAClD,IAAM,aAAa,GAAG,UAAC,QAAa,EAAA;QAClC,IAAM,UAAU,GAAG;UACjB,KAAK,EAAA,KAAA;UACL,MAAM,EAAE,eAAe,CAAC,UAAU,EAAE,QAAQ,EAAE,UAAU;SACzD;QACD,SAAS,CAAC,UAAU,CAAC;OACtB;MACD,IAAM,SAAS,GAAG,UAAC,EAAO,EAAA;YAAL,GAAG,GAAA,EAAA,CAAA,GAAA;QACtB,IAAI,GAAG,KAAK,OAAO,EAAE;UACnB,iBAAiB,CAAC;YAAE,MAAM,EAAE,CAAC,KAAK;UAAC,CAAE,CAAC;UACtC,aAAa,CAAC;YAAE,YAAY,EAAE,CAAC;cAAE,KAAK,EAAA,KAAA;cAAE,UAAU,EAAA;YAAA,CAAE;UAAC,CAAE,CAAC;SACzD,MAAM,IAAI,GAAG,KAAK,QAAQ,EAAE;UAC3B,iBAAiB,CAAC;YAAE,MAAM,EAAE,CAAC,KAAK;UAAC,CAAE,CAAC;UACtC,aAAa,CAAC;YAAE,YAAY,EAAE,CAAC;cAAE,KAAK,EAAA,KAAA;cAAE,UAAU,EAAA;YAAA,CAAE;UAAC,CAAE,CAAC;QACzD;OACF;MACD,IAAM,MAAM,GAAG,YAAA;QACb,iBAAiB,CAAC;UAAE,MAAM,EAAE,CAAC,KAAK;QAAC,CAAE,CAAC;QACtC,aAAa,CAAC;UAAE,YAAY,EAAE,CAAC;YAAE,KAAK,EAAA,KAAA;YAAE,UAAU,EAAA;UAAA,CAAE;QAAC,CAAE,CAAC;OACzD;MACD,IAAM,OAAO,GAAG,qBAAqB,GAAG,UAAA,CAAC,EAAA;QAAI,OAAA,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE;MAAA,CAAA,GAAG,YAAA,CAAA,CAAQ;MACzE,IAAM,cAAc,GAAG,sBAAsB,CAAC,UAAU,CAAC;MAEzD,OACEA,aAAAA,CAAC,mBAAmB,EAAA;QAClB,IAAI,EAAC,aAAa;QAClB,MAAM,EAAE;UACN,MAAM,EAAA,MAAA;UACN,GAAG,EAAA,GAAA;UACH,KAAK,EAAA,KAAA;UACL,aAAa,EAAA,aAAA;UACb,QAAQ,EAAE,CAAC;QACZ;MAAA,CAAA,EAEA,UAAA,OAAO,EAAA;QAAI,OACVA,aAAAA,CAAC,QAAQ,EAAA,QAAA,CAAA,CAAA,CAAA,EACH,MAAM,EAAA;UACV,GAAG,EAAE,GAAG;UACR,MAAM,EAAE,MAAO;UACf,KAAK,EAAE,KAAK;UACZ,cAAc,EAAE,cAAc;UAC9B,aAAa,EAAE,aAAa;UAC5B,SAAS,EAAA,IAAA;UACT,SAAS,EAAE,SAAS;UACpB,MAAM,EAAE,MAAM;UACd,OAAO,EAAE;QAAO,CAAA,CAAA,EAEf,OAAO,CACC;MAAA,CACZ,CACmB;KAEzB,CACiB;EAAA,CACrB,CACQ,CACJ;AAEb,CAAC;AAED,0BAA0B,CAAC,UAAU,GAAG;EACtC,aAAa,EAAE;CAChB;AAED,0BAA0B,CAAC,YAAY,GAAG;EACxC,eAAe,EAAE,OAAO;EACxB,qBAAqB,EAAE;CACxB;AAED;AACA,IAAa,sBAAsB,GAAqD,0BAA0B;AC1JlH,IAAMY,iBAAe,GAAG;EACtB,cAAc,EAAE,QAAQ;EACxB,SAAS,EAAE,iBAAiB;EAC5B,cAAc,EAAE;CACjB;AAED,IAAA,eAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA8BV,SAAAA,CAAAA,eAAAA,EAAAA,MAAAA,CAAAA;EAA9B,SAAA,eAAA,GAAA;IAAA,IAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;IAOE,KAAA,CAAA,KAAK,GAAG;MAAE,OAAO,EAAE;IAAK,CAAE;IAE1B,KAAA,CAAA,YAAY,GAAG,UAAA,MAAM,EAAA;MAAI,OAAA,KAAI,CAAC,MAAM,GAAG,MAAM;IAAA,CAAA;IAE7C,KAAA,CAAA,YAAY,GAAG,YAAA;MACL,IAAA,OAAO,GAAK,KAAI,CAAC,KAAK,CAAA,OAAf;MACf,KAAI,CAAC,QAAQ,CAAC;QAAE,OAAO,EAAE,CAAC;MAAO,CAAE,CAAC;KACrC;IAED,KAAA,CAAA,UAAU,GAAG,YAAA;MAAM,OAAA,KAAI,CAAC,QAAQ,CAAC;QAAE,OAAO,EAAE;MAAK,CAAE,CAAC;IAAA,CAAA;;EAiErD;EA/DC,eAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IAAA,IAAA,KAAA,GAAA,IAAA;IACQ,IAAA,EAAA,GAMF,IAAI,CAAC,KAAK;MALW,YAAY,GAAA,EAAA,CAAA,qBAAA;MACpB,IAAI,GAAA,EAAA,CAAA,aAAA;MACA,QAAQ,GAAA,EAAA,CAAA,iBAAA;MAC3B,QAAQ,GAAA,EAAA,CAAA,QAAA;MACR,WAAW,GAAA,EAAA,CAAA,WACC;IAEZ,IAAA,OAAO,GACL,IAAI,CAAC,KAAK,CAAA,OADL;IAGT,IAAM,UAAU,GAAG,oBAAoB,CAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAMU,iBAAe,CAAA,EAAK,QAAQ,CAAA,CAAG;IAE5E,OACEZ,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC,aAAa;MAClB,YAAY,EAAE,CACZ;QAAE,IAAI,EAAE,gBAAgB;QAAE,QAAQ,EAAE;MAAI,CAAE,EAC1C;QAAE,IAAI,EAAE;MAAS,CAAE;IACpB,CAAA,EAEDA,aAAAA,CAAC,QAAQ,EAAA;MAAC,IAAI,EAAC;IAAgB,CAAA,EAC7BA,aAAAA,CAAC,mBAAmB,EAAA,IAAA,CAAG,EACvBA,aAAAA,CAAC,iBAAiB,EAAA,IAAA,EACf,UAAC,EAAa,EAAA;UAAX,SAAS,GAAA,EAAA,CAAA,SAAA;MAAO,OAClBA,aAAAA,CAAAA,QAAAA,EAAAA,IAAAA,EACEA,aAAAA,CAAC,YAAY,EAAA;QACX,SAAS,EAAE,KAAI,CAAC,YAAY;QAC5B,QAAQ,EAAE,KAAI,CAAC,YAAY;QAC3B,UAAU,EAAE;MAAU,CAAA,CACtB,EACFA,aAAAA,CAAC,IAAI,EAAA;QACH,OAAO,EAAE,OAAO;QAChB,MAAM,EAAE,KAAI,CAAC,UAAU;QACvB,MAAM,EAAE,KAAI,CAAC;MAAM,CAAA,EAEnBA,aAAAA,CAAC,QAAQ,EAAA;QACP,GAAG,EAAC,WAAW;QACf,IAAI,EAAE,UAAU,CAAC,WAAW,CAAC;QAC7B,OAAO,EAAE,YAAA;UACP,KAAI,CAAC,UAAU,EAAE;UACjB,WAAW,EAAE;QACd;MAAA,CAAA,CACD,EACD,CAAA,SAAS,KAAA,IAAA,IAAT,SAAS,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAT,SAAS,CAAE,MAAM,IAChBA,aAAAA,CAAC,QAAQ,EAAA;QACP,GAAG,EAAC,gBAAgB;QACpB,IAAI,EAAE,UAAU,CAAC,gBAAgB,CAAC;QAClC,OAAO,EAAE,YAAA;UACP,KAAI,CAAC,UAAU,EAAE;UACjB,WAAW,CAAC;YAAE,YAAY,EAAE;UAAI,CAAE,CAAC;QACpC;MAAA,CAAA,CACD,GACA,IAAI,CACH,CACN;KACJ,CACiB,CACX,CACJ;GAEZ;EA/EM,eAAA,CAAA,UAAU,GAAG;IAClB,qBAAqB,EAAE,cAAc;IACrC,aAAa,EAAE,MAAM;IACrB,iBAAiB,EAAE;GACpB;EA4EH,OAAA,eAAC;CAjFD,CAA8BE,aAAmB,CAAA;AAmFjD,IAAa,WAAW,GAA6B,eAAe;AChFpE,IAAMc,iBAAe,GAAG,UAAC,KAAqB,EAAA;EAAK,OAAA,aAAA,CAAC,mBAAmB,EAAA;IAAC,MAAM,EAAE;EAAK,CAAA,CAAI;AAAA,CAAA;AACzF,IAAMI,gBAAc,GAAG,UAAC,KAAoB,EAAA;EAAK,OAAA,aAAA,CAAC,mBAAmB,EAAA;IAAC,MAAM,EAAE;EAAK,CAAA,CAAI;AAAA,CAAA;AAEvF,IAAA,2BAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA0ClB,SAAAA,CAAAA,2BAAAA,EAAAA,MAAAA,CAAAA;EAKxC,SAAA,2BAAA,CAAY,KAAK,EAAA;IAAjB,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAK,CAAC,IAAA,IAAA;IAJd,KAAA,CAAA,QAAQ,GAAa,CAAA,CAAE;IAMrB,IAAM,WAAW,GAAG,KAAK,CAAC,WAAW,IAAI,KAAK,CAAC,kBAAkB;IAEjE,KAAI,CAAC,KAAK,GAAG;MACX,cAAc,EAAE,WAAW,GAAA,QAAA,CAAA;QACzB,IAAI,EAAE,eAAe,CAAC,QAAQ;MAAE,CAAA,EAAK,WAAW,CAAA,GAAK;KACxD;IACD,KAAI,CAAC,qBAAqB,GAAG,KAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,KAAI,CAAC;IAClE,KAAI,CAAC,SAAS,GAAG,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAI,CAAC;IAC1C,KAAI,CAAC,iBAAiB,GAAG,KAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAI,CAAC;IAC1D,KAAI,CAAC,iBAAiB,GAAG,KAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAI,CAAC;;EAC3D;EAEM,2BAAA,CAAA,wBAAwB,GAA/B,UACE,KAAuC,EAAE,KAAuC,EAAA;IAEhF,IAAM,WAAW,GAAG,KAAK,CAAC,WAAW,KAAK,SAAS,GAAG,KAAK,CAAC,WAAW,GAAG,KAAK,CAAC,cAAc;IAC9F,OAAO;MACL,cAAc,EAAE,WAAW,GAAA,QAAA,CAAA;QACzB,IAAI,EAAE,eAAe,CAAC,QAAQ;MAAE,CAAA,EAC7B,WAAW,CAAA,GACZ;KACL;GACF;EAED,2BAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjB,YAAA;IACE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAQ,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,qBAAqB,CAAC;GACpF;EAED,2BAAA,CAAA,SAAA,CAAA,oBAAoB,GAApB,YAAA;IACE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAQ,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,qBAAqB,CAAC;GACvF;EAED,2BAAA,CAAA,SAAA,CAAA,OAAO,GAAP,UAAQ,GAAG,EAAE,IAAI,EAAE,IAAI,EAAA;IACb,IAAA,cAAc,GAAK,IAAI,CAAC,KAAK,CAAA,cAAf;IACd,IAAA,YAAY,GAAK,IAAI,CAAC,KAAK,CAAA,YAAf;IACpB,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;MACxB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE;IACzB;IACD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE;MAC9B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;IAC/B;IAED,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;IAEnC,IAAI,CAAA,cAAc,KAAA,IAAA,IAAd,cAAc,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAd,cAAc,CAAE,MAAM,MAAK,IAAI,IAAI,CAAA,cAAc,KAAA,IAAA,IAAd,cAAc,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAd,cAAc,CAAE,SAAS,MAAK,IAAI,EAAE;MACzE,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,cAAc,EAAE,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC;IAChF;IAED,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,EAAE,CAAC,IACzD,IAAI,KAAK,YAAY,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE;MAC5B,IAAI,CAAC,oBAAoB,CAAC;QACxB,IAAI,EAAE,eAAe,CAAC,QAAQ,EAAE;QAChC,SAAS,EAAE,IAAI;QACf,MAAM,EAAE;OACT,EAAE,cAAc,CAAC;IACnB;GACF;EAED,2BAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjB,UAAkB,GAAG,EAAA;IACnB,IAAI,CAAC,cAAc,GAAG,GAAG;GAC1B;EAED,2BAAA,CAAA,SAAA,CAAA,SAAS,GAAT,UAAU,IAAI,EAAE,IAAI,EAAA;IAClB,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC;IAChC,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;MACjD,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;IAC3B;GACF;EAED,2BAAA,CAAA,SAAA,CAAA,SAAS,GAAT,UAAU,EAA2B,EAAA;QAAzB,GAAG,GAAA,EAAA,CAAA,GAAA;MAAE,IAAI,GAAA,EAAA,CAAA,IAAA;MAAE,IAAI,GAAA,EAAA,CAAA,IAAA;MAAE,MAAM,GAAA,EAAA,CAAA,MAAA;IACjC,IAAI,MAAM,KAAK,KAAK,EAAE;MACpB,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC;KAC9B,MAAM;MACL,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC;IAC3B;GACF;EAED,2BAAA,CAAA,SAAA,CAAA,oBAAoB,GAApB,UAAqB,WAAW,EAAE,eAAe,EAAA;IACvC,IAAA,mBAAmB,GAAK,IAAI,CAAC,KAAK,CAAA,mBAAf;IAC3B,IAAI,CAAC,QAAQ,CAAC;MACZ,cAAc,EAAE;KACjB,CAAC;IACF,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,WAAW,EAAE,eAAe,EAAE,mBAAmB,CAAC;GACxE;EAED,2BAAA,CAAA,SAAA,CAAA,qBAAqB,GAArB,UAAsB,KAAK,EAAA;;IACjB,IAAA,cAAc,GAAK,IAAI,CAAC,KAAK,CAAA,cAAf;IAChB,IAAA,EAAA,GAEF,IAAI,CAAC,KAAK;MADZ,YAAY,GAAA,EAAA,CAAA,YAAA;MAAE,aAAa,GAAA,EAAA,CAAA,aAAA;MAAE,eAAe,GAAA,EAAA,CAAA,eAAA;MAAE,cAAc,GAAA,EAAA,CAAA,cAAA;MAAE,cAAc,GAAA,EAAA,CAAA,cAAA;MAAE,aAAa,GAAA,EAAA,CAAA,aAC/E;IAEd,IAAI,KAAK,CAAC,GAAG,KAAK,GAAG,KAAK,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,OAAO,CAAC,EAAE;MACzD,IAAI,IAAI,CAAC,cAAc,EAAE;QACvB,KAAK,CAAC,cAAc,EAAE;QACtB,CAAA,EAAA,GAAA,IAAI,CAAC,cAAc,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,KAAK,EAAA;MACnC;MACD,IAAI,cAAc,EAAE;QAClB,IAAI,CAAC,oBAAoB,CAAC,SAAS,EAAE,cAAc,CAAC;MACrD;MACD;IACD;IAED,IAAI,cAAc,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,cAAc,CAAC,IAAI,KAAK,CAAC,GAAG,KAAK,KAAK,EAAE;MACxF,IAAM,WAAW,GAAG,mBAAmB,CAAC,aAAa,EAAE,cAAc,EAAE,IAAI,CAAC,QAAQ,CAAC;MACrF,KAAK,CAAC,cAAc,EAAE;MACtB,IAAI,CAAC,oBAAoB,CAAC,WAAW,EAAE,cAAc,CAAC;MACtD;IACD;IAED,IAAI,cAAc,IAAI,gBAAgB,CAAC,KAAK,CAAC,EAAE;MACvC,IAAA,EAAA,GAAyB,kBAAkB,CAAC,YAAY,EAAE,aAAa,EAC3E,eAAe,EAAE,cAAc,EAAE,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,aAAa,EACpE,cAAc,EAAE,cAAc,CAAC;QAFzB,OAAO,GAAA,EAAA,CAAA,OAAA;QAAE,SAAS,GAAA,EAAA,CAAA,SAEO;MAEjC,IAAI,OAAO,EAAE;QACX,IAAI,SAAS,EAAE;UACb,cAAc,CAAC,SAAS,KAAK,MAAM,GAAG,aAAa,GAAG,cAAc,CAAC;QACtE;QACD,KAAK,CAAC,cAAc,EAAE;QACtB,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,cAAc,CAAC;OACnD,MAAM,IAAI,gBAAgB,CAAC,KAAK,CAAC,IAAI,cAAc,EAAE;QACpD,IAAI,CAAC,oBAAoB,CAAC,SAAS,EAAE,cAAc,CAAC;MACrD;IACF;GACF;EAED,2BAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjB,UAAkB,EAAqB,EAAA;QAAnB,IAAI,GAAA,EAAA,CAAA,IAAA;MAAE,IAAI,GAAA,EAAA,CAAA,IAAA;MAAE,KAAK,GAAA,EAAA,CAAA,KAAA;IAC3B,IAAA,cAAc,GAAK,IAAI,CAAC,KAAK,CAAA,cAAf;IACd,IAAA,aAAa,GAAK,IAAI,CAAC,KAAK,CAAA,aAAf;IACrB,IAAI,IAAI,KAAK,QAAQ,IAAI,IAAI,KAAK,SAAS,EAAE;MAC3C,IAAI,CAAC,oBAAoB,CAAC,SAAS,EAAE,cAAc,CAAC;KACrD,MAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC,EAAE;MACpD,IAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,GAAG;MAChD,IAAI,CAAC,oBAAoB,CAAC;QACxB,MAAM,EAAE,IAAI;QACZ,SAAS,EAAA,SAAA;QACT,KAAK,EAAE,CAAC,CAAC;QACT,IAAI,EAAE,OAAO,CAAC,IAAI;OACnB,EAAE,cAAc,CAAC;KACnB,MAAM;MACL,IAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;MAC1B,IAAI,CAAC,oBAAoB,CAAC;QACxB,MAAM,EAAE,IAAI;QACZ,SAAS,EAAE,IAAI;QACf,KAAK,EAAE,eAAe,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,aAAa,EAAE,IAAI,CAAC;QAC7E,IAAI,EAAA;OACL,EAAE,cAAc,CAAC;IACnB;GACF;EAED,2BAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IAAA,IAAA,KAAA,GAAA,IAAA;IACQ,IAAA,EAAA,GAKF,IAAI,CAAC,KAAK;MAJG,IAAI,GAAA,EAAA,CAAA,aAAA;MACL,GAAG,GAAA,EAAA,CAAA,YAAA;MACjB,iBAAiB,GAAA,EAAA,CAAA,iBAAA;MACjB,aAAa,GAAA,EAAA,CAAA,aACD;IACN,IAAA,cAAc,GAAK,IAAI,CAAC,KAAK,CAAA,cAAf;IACtB,IAAM,gBAAgB,GAAG,YAAA;MAAM,OAAA,WAAW,CAAC,aAAa,EAAE,cAAc,CAAC;IAAA,CAAA;IACzE,OACEF,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC;IAA6B,CAAA,EAElCA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,mBAAmB;MAAC,MAAM,EAAE,IAAI,CAAC;IAAiB,CAAA,CAAI,EAClE,iBAAiB,IAChBA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,sBAAsB;MAAC,KAAK,EAAA;IAAA,CAAA,CAAG,EAE7C,iBAAiB,IAChBA,aAAAA,CAAC,MAAM,EAAA;MAAC,IAAI,EAAC,SAAS;MAAC,QAAQ,EAAE;IAAgB,CAAA,CAAI,EAEvDA,aAAAA,CAAC,QAAQ,EAAA;MAAC,IAAI,EAAC;IAAW,CAAA,EACvB,UAAC,MAAsB,EAAA;MAAK,OAC3BA,aAAAA,CAAC,IAAI,EAAA,QAAA,CAAA,CAAA,CAAA,EACC,MAAM,EAAA;QACV,SAAS,EAAEgB,iBAAe;QAC1B,QAAQ,EAAE,CAAC;QACX,8BAA8B,EAAE,KAAI,CAAC,SAAS;QAC9C,iBAAiB,EAAE,KAAI,CAAC,iBAAiB;QACzC,OAAO,EAAE,aAAa,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,WAAW,EAAE,cAAc;MAAC,CAAA,CAAA,CAC3E;IAAA,CACH,CACQ,EACXhB,aAAAA,CAAC,QAAQ,EAAA;MAAC,IAAI,EAAC;IAAQ,CAAA,EACrBA,aAAAA,CAAC,mBAAmB,EAAA;MAClB,MAAM,EAAE;QACN,8BAA8B,EAAE,IAAI,CAAC,SAAS;QAC9C,iBAAiB,EAAE,IAAI,CAAC;MACzB;IAAA,CAAA,CACD,CACO,EACXA,aAAAA,CAAC,QAAQ,EAAA;MAAC,IAAI,EAAC;IAAQ,CAAA,EACrBA,aAAAA,CAAC,mBAAmB,EAAA;MAClB,MAAM,EAAE;QACN,8BAA8B,EAAE,IAAI,CAAC,SAAS;QAC9C,iBAAiB,EAAE,IAAI,CAAC;MACzB;IAAA,CAAA,CACD,CACO,EACT,iBAAiB,IACjBA,aAAAA,CAAC,QAAQ,EAAA;MACP,IAAI,EAAC,UAAU;MACf,SAAS,EAAE,UAAC,EAAiB,EAAA;YAAf,QAAQ,GAAA,EAAA,CAAA,QAAA;QAAY,OAAA,CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC;MAAA;IAAA,CAAA,EAE3D,UAAC,MAAqB,EAAA;MAAK,OAC1BA,aAAAA,CAAC,GAAG,EAAA,QAAA,CAAA,CAAA,CAAA,EACE,MAAM,EAAA;QACV,SAAS,EAAEoB,gBAAc;QACzB,OAAO,EAAE,YAAY,CAAC,MAAM,CAAC,QAAQ,EAAE,cAAc,KAAA,IAAA,IAAd,cAAc,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAd,cAAc,CAAE,MAAM;MAAC,CAAA,CAAA,CAC9D;IAAA,CACH,CAEJ,CACM;GAEZ;EACH,OAAA,2BAAC;AAAD,CAAC,CA/NyClB,aAAmB,CAAA;AAiO7D;AACA,IAAA,2BAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA0CA,SAAAA,CAAAA,2BAAAA,EAAAA,MAAAA,CAAAA;EAA1C,SAAA,2BAAA,GAAA;;EAwCC;EAnCC,2BAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IAAA,IAAA,KAAA,GAAA,IAAA;IACE,OACEF,aAAAA,CAAC,MAAM,EAAA;MACL,IAAI,EAAC,yBAAyB;MAC9B,YAAY,EAAE,CACZ;QAAE,IAAI,EAAE;MAAO,CAAE;IAClB,CAAA,EAEDA,aAAAA,CAAC,iBAAiB,EAAA,IAAA,EACjB,UACC,EAAyE,EACzE,EAAuF,EAAA;UADrF,YAAY,GAAA,EAAA,CAAA,YAAA;QAAE,aAAa,GAAA,EAAA,CAAA,aAAA;QAAE,OAAO,GAAA,EAAA,CAAA,OAAA;QAAE,eAAe,GAAA,EAAA,CAAA,eAAA;QAAE,cAAc,GAAA,EAAA,CAAA,cAAA;UACrE,cAAc,GAAA,EAAA,CAAA,cAAA;QAAE,aAAa,GAAA,EAAA,CAAA,aAAA;QAAE,iBAAiB,GAAA,EAAA,CAAA,iBAAA;QAAE,iBAAiB,GAAA,EAAA,CAAA,iBAAA;QAAE,cAAc,GAAA,EAAA,CAAA,cAAA;MAErF,OAAO,OAAO,CAAC,OAAO,GACpBA,aAAAA,CAAC,2BAA2B,EAAA,QAAA,CAAA;QAC1B,YAAY,EAAE,YAAY;QAC1B,aAAa,EAAE,aAAa;QAC5B,OAAO,EAAE,OAAO;QAChB,eAAe,EAAE,gBAAgB,CAAC,eAAe,CAAC;QAClD,cAAc,EAAE,cAAc;QAC9B,cAAc,EAAE,cAAc;QAC9B,aAAa,EAAE;UACb,aAAa,EAAA,aAAA;UACb,iBAAiB,EAAA,iBAAA;UACjB,iBAAiB,EAAA,iBAAA;UACjB,cAAc,EAAA;QACf;MAAA,CAAA,EACG,KAAI,CAAC,KAAK,CAAA,CACd,GACA,IAAI;KACT,CACmB,CACb;GAEZ;EAtCM,2BAAA,CAAA,UAAU,GAAG;IAClB,aAAa,EAAE,MAAM;IACrB,YAAY,EAAE;GACf;EAoCH,OAAA,2BAAC;CAxCD,CAA0CE,aAAmB,CAAA;AA0C7D;AACA,IAAa,uBAAuB,GAAsD,2BAA2B;AChS9G,IAAM,WAAW,GAAG,UAAC,EAAO,EAAA;MAAL,GAAG,GAAA,EAAA,CAAA,GAAA;EAAO,OAAC,GAAG,CAAC,MAAM,KAAK,SAAS,GAC5D;IAAE,MAAM,EAAK,GAAG,CAAC,MAAM,GAAA;EAAI,CAAE,GAC9B,SAAS;AAF2B,CAE1B;AAEP,IAAM,QAAQ,GAAG,UAAC,KAAsB,EAAA;EAC7C,OAAA,OAAO,KAAK,KAAK,QAAQ,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAAzD,CAAyD;;ACL3D;AAcA,IAAA,eAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA8BA,SAAAA,CAAAA,eAAAA,EAAAA,MAAAA,CAAAA;EAO5B,SAAA,eAAA,CAAY,KAAK,EAAA;IAAjB,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAK,CAAC,IAAA,IAAA;IALd,KAAA,CAAA,gBAAgB,GAAG,CAAC,CAAC;IAErB,KAAA,CAAA,GAAG,GAAG,CAAC,CAAC;IAKN,KAAI,CAAC,KAAK,GAAG;MACX,cAAc,EAAE,IAAI,GAAG;KACxB;IAED,KAAI,CAAC,UAAU,GAAG,IAAI,GAAG,EAAE;IAC3B,KAAI,CAAC,gBAAgB,GAAG,CAAA,CAAE;IAC1B,KAAI,CAAC,QAAQ,GAAGC,SAAe,EAAE;;EAClC;EAED,eAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjB,YAAA;IACE,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE;MACjB,IAAA,YAAY,GAAK,IAAI,CAAC,KAAK,CAAA,YAAf;MACpB,IAAI,OAAO,YAAY,KAAK,UAAU,EAAE;QACtC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC;OACpC,MAAM,IAAI,YAAY,EAAE;QACvB,YAAY,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO;MAC7C;IACF;GACF;EAED,eAAA,CAAA,SAAA,CAAA,kBAAkB,GAAlB,UAAmB,SAAS,EAAA;IAClB,IAAA,OAAO,GAAK,IAAI,CAAC,KAAK,CAAA,OAAf;IACP,IAAS,WAAW,GAAK,SAAS,CAAA,OAAd;IACpB,IAAA,cAAc,GAAK,IAAI,CAAC,KAAK,CAAA,cAAf;IAEtB,IAAM,qBAAqB,GAAG,CAAC,YAAY,CAAC,OAAO,EAAE,WAAW,CAAC,IAC5D,CAAC,CAAC,cAAc,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI;;;;IAKpD,IAAI,qBAAqB,EAAE;MACzB,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC;IACnC;GACF;EAED,eAAA,CAAA,SAAA,CAAA,gBAAgB,GAAhB,UAAiB,WAAW,EAAA;IAClB,IAAA,OAAO,GAAK,IAAI,CAAC,KAAK,CAAA,OAAf;IACf,IAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,OAAO,CAAC;IAE3D,IAAI,CAAC,UAAU,GAAG,aAAa,CAAC,WAAW,EAAE,OAAO,EAAE,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC;IAElF,oBAAoB,CAAC,IAAI,CAAC,GAAG,CAAC;IAC9B,IAAI,CAAC,GAAG,GAAG,qBAAqB,CAAC,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;GACxE;EAED,eAAA,CAAA,SAAA,CAAA,aAAa,GAAb,UAAc,WAAW,EAAE,OAAO,EAAA;IAC1B,IAAA,EAAA,GAA+B,IAAI,CAAC,QAAQ,CAAC,OAAQ;MAAnD,WAAW,GAAA,EAAA,CAAA,WAAA;MAAE,WAAW,GAAA,EAAA,CAAA,WAA2B;IACnD,IAAA,cAAc,GAAK,IAAI,CAAC,KAAK,CAAA,cAAf;IAEtB,IAAM,YAAY,GAAG,IAAI,CAAC,gBAAgB,KAAK,WAAW,IACrD,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,MAAM,CAAC;IAC3C,IAAM,kBAAkB,GAAG,OAAO,CAAC,MAAM,KAAK,WAAW,CAAC,MAAM;IAEhE,IAAI,kBAAkB,IAAK,YAAY,IAAI,CAAC,cAAc,CAAC,IAAK,EAAE;MAChE,IAAI,CAAC,gBAAgB,GAAG,CAAA,CAAE;MAC1B,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,WAAW;MACnD,IAAI,CAAC,gBAAgB,GAAG,WAAW;IACpC;IAED,OAAO,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,MAAM,CAAC;GAC7C;EAED,eAAA,CAAA,SAAA,CAAA,UAAU,GAAV,YAAA;IACU,IAAA,OAAO,GAAK,IAAI,CAAC,KAAK,CAAA,OAAf;IACP,IAAA,cAAc,GAAK,IAAI,CAAC,KAAK,CAAA,cAAf;IAEtB,IAAI,MAAM,GAAG,OAAO;IAEpB,IAAM,YAAY,GAAG,OAAO,CACzB,MAAM,CAAC,UAAA,MAAM,EAAA;MAAI,OAAA,MAAM,CAAC,KAAK,KAAK,SAAS,IAAI,MAAM,CAAC,KAAK,KAAK,MAAM;IAAA,CAAA,CAAC,CACvE,MAAM,KAAK,CAAC;IACf,IAAI,YAAY,EAAE;;;MAGhB,MAAM,GAAA,QAAA,CAAO,MAAM,EAAA,CAAE;QAAE,GAAG,EAAE,eAAe,CAAC,QAAQ,EAAE;QAAE,IAAI,EAAE;MAAe,CAAE,CAAA,CAAC;IACjF;IAED,IAAI,cAAc,CAAC,IAAI,EAAE;MACvB,MAAM,GAAG,MAAM,CACZ,GAAG,CAAC,UAAA,MAAM,EAAA;QAAI,OAAC,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,G,sBACrC,MAAM,CAAA,EAAA;UAAE,cAAc,EAAE,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG;QAAC,CAAA,CAAA,GAC3D,MAAM;MAAA,CAAC,CAAC;IACf;IAED,OAAO,MAAM;GACd;EAED,eAAA,CAAA,SAAA,CAAA,qBAAqB,GAArB,YAAA;IACU,IAAgB,uBAAuB,GAAK,IAAI,CAAC,KAAK,CAAA,cAAf;IAC/C,IAAI,CAAC,UAAU,GAAG,sBAAsB,CAAC,IAAI,CAAC,UAAU,CAAC;IAEzD,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE;MACzB,IAAI,uBAAuB,CAAC,IAAI,EAAE;QAChC,IAAI,CAAC,QAAQ,CAAC;UAAE,cAAc,EAAE,IAAI,GAAG;QAAE,CAAE,CAAC;MAC7C;MACD;IACD;IAED,IAAM,cAAc,GAAG,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC;IACtD,IAAI,CAAC,QAAQ,CAAC;MAAE,cAAc,EAAA;IAAA,CAAE,CAAC;GAClC;EAED,eAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACE,IAAM,EAAA,GAKF,IAAI,CAAC,KAAK;MAJK,MAAM,GAAA,EAAA,CAAA,eAAA;MACvB,cAAc,GAAA,EAAA,CAAA,cAAA;MACd,YAAY,GAAA,EAAA,CAAA,YAAA;MACT,SAAS,GAAA,MAAA,CAAA,EAAA,EAJR,CAAA,iBAAA,EAAA,gBAAA,EAAA,cAAA,CAKL,CAAa;IACd,IAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE;IACjC,IAAM,QAAQ,GAAG,OAAO,CACrB,GAAG,CAAC,UAAA,MAAM,EAAA;MAAI,OAAA,MAAM,CAAC,KAAK,KAAK,MAAM,CAAC,IAAI,KAAK,eAAe,GAAG,CAAC,GAAG,cAAc,CAAC;IAAA,CAAA,CAAC,CACrF,MAAM,CAAC,UAAA,KAAK,EAAA;MAAI,OAAA,KAAK,KAAK,MAAM,IAAI,KAAK,KAAK,CAAC;IAAA,CAAA,CAAC,CAChD,GAAG,CAAC,UAAA,KAAK,EAAA;MAAI,OAAA,QAAQ,CAAC,KAAK,CAAC,GAAM,KAAK,GAAA,IAAI,GAAG,KAAK;IAAA,CAAA,CAAC,CACpD,IAAI,CAAC,KAAK,CAAC;IAEd,OACEH,aAAAA,CAAC,MAAM,EAAA,QAAA,CAAA,CAAA,CAAA,EACD,SAAS,EAAA;MACb,QAAQ,EAAE,IAAI,CAAC,QAAQ;MACvB,OAAO,EAAE,OAAO;MAChB,QAAQ,EAAE,QAAQ;MAClB,cAAc,EAAE;IAAc,CAAA,CAAA,CAC9B;GAEL;EACH,OAAA,eAAC;AAAD,CAAC,CAzI6BE,aAAmB,CAAA;AA2IjD;AACA,IAAa,WAAW,GAA8C,eAAe;ACtJrF,IAAM,eAAe,GAAG,UAAC,SAAS,EAAE,SAAS,EAAA;EACnC,IAAO,SAAS,GAAmB,SAAS,CAAA,KAA5B;IAAO,OAAO,GAAK,SAAS,CAAA,GAAd;EAC9B,IAAO,SAAS,GAAmB,SAAS,CAAA,KAA5B;IAAO,OAAO,GAAK,SAAS,CAAA,GAAd;EAEtC,IAAI,OAAO,KAAK,OAAO,IAAI,SAAS,CAAC,MAAM,KAAK,SAAS,CAAC,MAAM,EAAE;IAChE,OAAO,KAAK;EACb;EAED,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,UAAC,QAAQ,EAAE,CAAC,EAAA;IACjC,IAAM,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC;IAC7B,OAAO,QAAQ,CAAC,MAAM,KAAK,QAAQ,CAAC,MAAM,IAAI,QAAQ,CAAC,OAAO,KAAK,QAAQ,CAAC,OAAO;GACpF,CAAC;AACJ,CAAC;AAEM,IAAM,gBAAgB,GAAGH,IAAU,CAAwB,UAAC,EAElE,EAAA;MADC,GAAG,GAAA,EAAA,CAAA,GAAA;IAAE,KAAK,GAAA,EAAA,CAAA,KAAA;IAAgB,GAAG,GAAA,EAAA,CAAA,YAAA;IAAiB,IAAI,GAAA,EAAA,CAAA,aAAA;IAAE,YAAY,GAAA,EAAA,CAAA,YAAA;EAEhE,OACEC,aAAAA,CAAC,GAAG,EAAA;IACF,YAAY,EAAE,YAAY;IAC1B,QAAQ,EAAE,GAAG;IACb,KAAK,EAAE,WAAW,CAAC;MAAE,GAAG,EAAA;IAAA,CAAE;EAAC,CAAA,EAE1B,KAAK,CAAC,GAAG,CAAC,UAAC,EAAmB,EAAA;QAAjB,MAAM,GAAA,EAAA,CAAA,MAAA;MAAE,OAAO,GAAA,EAAA,CAAA,OAAA;IAC3B,OACEA,aAAAA,CAAC,IAAI,EAAA;MACH,GAAG,EAAE,MAAM,CAAC,GAAG;MACf,QAAQ,EAAE,GAAG;MACb,WAAW,EAAE,MAAM;MACnB,OAAO,EAAE;IAAO,CAAA,CAChB;GAEL,CAAC,CACE;AAEV,CAAC,EAAE,eAAe,CAAC;;ACnCnB;AACA,IAAA,uBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA6CE,SAAAA,CAAAA,uBAAAA,EAAAA,MAAAA,CAAAA;EAA7C,SAAA,uBAAA,GAAA;;EA+BC;EA9BC,uBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACQ,IAAA,EAAA,GAOF,IAAI,CAAC,KAAK;MANZ,aAAa,GAAA,EAAA,CAAA,aAAA;MACb,cAAc,GAAA,EAAA,CAAA,cAAA;MACC,IAAI,GAAA,EAAA,CAAA,aAAA;MACnB,aAAa,GAAA,EAAA,CAAA,aAAA;MACb,YAAY,GAAA,EAAA,CAAA,YAAA;MACZ,OAAO,GAAA,EAAA,CAAA,OACK;IAEd,OACEF,aAAAA,CAAC,IAAI,EAAA;MAAC,OAAO,EAAE;IAAO,CAAA,EACnB,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,UAAC,UAAU,EAAA;MACzB,IAAA,GAAG,GAAiB,UAAU,CAAA,GAA3B;QAAE,EAAA,GAAe,UAAU,CAAA,KAAf;QAAV,KAAK,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,EAAE,GAAA,EAAA;MAEvB,OACEA,aAAAA,CAAC,gBAAgB,EAAA;QACf,GAAG,EAAE,GAAG,CAAC,GAAG;QACZ,GAAG,EAAE,GAAG;QACR,KAAK,EAAE,KAAK;QACZ,YAAY,EAAE,UAAA,GAAG,EAAA;UAAI,OAAA,cAAc,CAAC,GAAG,EAAE,GAAG,CAAC;QAAA,CAAA;QAC7C,YAAY,EAAE,YAAY;QAC1B,aAAa,EAAE;MAAa,CAAA,CAC5B;KAEL,CAAC,CACK;GAEZ;EAEH,OAAA,uBAAC;AAAD,CAAC,CA/B4CE,aAAmB,CAAA;;ACFhE;AACA,IAAA,WAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAiCA,SAAAA,CAAAA,WAAAA,EAAAA,MAAAA,CAAAA;EAAjC,SAAA,WAAA,GAAA;;EAoBC;EAnBC,WAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACU,IAAA,OAAO,GAAK,IAAI,CAAC,KAAK,CAAA,OAAf;IAEf,OACEF,aAAAA,CAAAA,UAAAA,EAAAA,IAAAA,EACG,OAAO,CAAC,GAAG,CAAC,UAAC,EAAc,EAAA;UAAZ,GAAG,GAAA,EAAA,CAAA,GAAA;QAAE,KAAK,GAAA,EAAA,CAAA,KAAA;MACxB,IAAM,UAAU,GAAG,OAAO,KAAK,KAAK,QAAQ,GAAM,KAAK,GAAA,IAAI,GAAG,KAAK;MACnE,OACEA,aAAAA,CAAAA,KAAAA,EAAAA;QACE,GAAG,EAAE,GAAG;QACR,KAAK,EAAE,KAAK,KAAK,SAAS,GACtB;UAAE,KAAK,EAAE;QAAU,CAAE,GACrB;MAAS,CAAA,CACb;KAEL,CAAC,CACO;GAEd;EACH,OAAA,WAAC;AAAD,CAAC,CApBgCE,aAAmB,CAAA;ACQpD,IAAM,WAAW,GAAG,MAAM;AAC1B,IAAM,iBAAiB,GAAG,QAAQ;AAClC,IAAM,MAAM,GAAG,CAAC;AAEhB,IAAMe,cAAY,GAAG;EACnB,UAAU,EAAE,EAAE;EACd,UAAU,EAAE,EAAE;EACd,aAAa,EAAE,YAAA;IAAM,OAAA,IAAI;EAAA,CAAA;EACzB,eAAe,EAAE,YAAA;IAAM,OAAA,IAAI;EAAA,CAAA;EAC3B,cAAc,EAAE,YAAA;IAAM,OAAA,IAAI;EAAA,CAAA;EAC1B,kBAAkB,EAAEN,UAAgB,CAAC,YAAA;IAAM,OAAA,IAAI;EAAA,CAAA;CAChD;AAGD;AACA;;EACwCT,SAAAA,CAAAA,kBAAAA,EAAAA,MAAAA,CAAAA;EAKtC,SAAA,kBAAA,CAAY,KAAK,EAAA;IAAjB,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAK,CAAC,IAAA,IAAA;IAHd,KAAA,CAAA,OAAO,GAAG,IAAI,GAAG,EAAoB;IA6BrC,KAAA,CAAA,cAAc,GAAG,UAAC,GAAG,EAAE,GAAG,EAAA;MACxB,IAAI,GAAG,CAAC,IAAI,KAAK,eAAe,EAAE;QAChC;MACD;MACD,IAAI,GAAG,KAAK,IAAI,EAAE;QAChB,KAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC;OAC7B,MAAM;QACL,KAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC;MAC/B;KACF;IAoCD,KAAA,CAAA,YAAY,GAAG,UAAC,GAAG,EAAA;;MACjB,IAAI,GAAG,EAAE;QACP,IAAM,UAAU,GAAA,CAAA,EAAA,GAAG,KAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,qBAAqB,EAAA,CAAG,MAAM;QAC5E,OAAO,GAAG,CAAC,MAAM,IAAI,UAAU,IAAI,KAAI,CAAC,KAAK,CAAC,kBAAkB;MACjE;MACD,OAAO,KAAI,CAAC,KAAK,CAAC,kBAAkB;KACrC;IAED,KAAA,CAAA,QAAQ,GAAG,UAAC,CAAC,EAAA;MACX,IAAM,IAAI,GAAG,CAAC,CAAC,MAAM;MAErB,IAAI,KAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,EAAE;QACjC;MACD;MAEO,IAAW,WAAW,GAA+B,IAAI,CAAA,SAAnC;QAAc,YAAY,GAAK,IAAI,CAAA,UAAT;MAClD,IAAA,EAAA,GAIF,KAAI,CAAC,KAAK;QAHZ,eAAe,GAAA,EAAA,CAAA,eAAA;QACf,SAAS,GAAA,EAAA,CAAA,SAAA;QACI,YAAY,GAAA,EAAA,CAAA,WACb;MAEd,IAAM,aAAa,GAAG,KAAI,CAAC,gBAAgB,EAAE;MAC7C,IAAM,GAAG,GAAG,WAAW,GAAG,YAAY;MACtC,IAAM,WAAW,GAAG,WAAW,GAAG,iBAAiB;;;MAGnD,IAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,MAAM,GAAG,eAAe;MACtD,IAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,GAAG,aAAa,CAAC,EAAE,aAAa,CAAC;MAE5E,KAAI,CAAC,QAAQ,CAAC;QACZ,WAAW,EAAA,WAAA;QACX,YAAY,EAAA,YAAA;QACZ,SAAS,EAAE,KAAK,GAAG,SAAS,GAAG,CAAC,GAAG,EAAE,aAAa,GAAG,GAAG;OACzD,CAAC;KACH;IAED,KAAA,CAAA,yBAAyB,GAAG,UAAC,EAAiB,EAAA;UAAf,KAAK,GAAA,EAAA,CAAA,KAAA;QAAE,MAAM,GAAA,EAAA,CAAA,MAAA;MAC1C,KAAI,CAAC,QAAQ,CAAC;QACZ,eAAe,EAAE,MAAM;QACvB,cAAc,EAAE;OACjB,CAAC;KACH;IA/GC,KAAI,CAAC,KAAK,GAAG;MACX,WAAW,EAAE,CAAC;MACd,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;MACjB,eAAe,EAAE,GAAG;MACpB,cAAc,EAAE,GAAG;MACnB,YAAY,EAAE;KACf;IAED,KAAI,CAAC,oBAAoB,GAAG,OAAO,CACjC,UAAC,YAAY,EAAE,UAAU,EAAE,cAAc,EAAA;MAAK,OAC5C,oBAAoB,CAAC,YAAY,EAAE,UAAU,EAAE,cAAc,CAAC;IAAA,CAC/D,CACF;;EACF;EAED,kBAAA,CAAA,SAAA,CAAA,gBAAgB,GAAhB,YAAA;IACE,IAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB;IAChF,IAAI,eAAe,GAAG,iBAAiB,EAAE;MACvC,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,GAAG,iBAAiB,GAC5D,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC;IACjC;IACD,OAAO,CAAC;GACT;EAaD,kBAAA,CAAA,SAAA,CAAA,kBAAkB,GAAlB,UAAmB,SAAS,EAAE,SAAS,EAAA;IAC/B,IAAA,EAAA,GAAwB,IAAI,CAAC,KAAK;MAAhC,QAAQ,GAAA,EAAA,CAAA,QAAA;MAAE,OAAO,GAAA,EAAA,CAAA,OAAe;;;;;IAKxC,IAAM,eAAe,GAAG,SAAS,CAAC,QAAQ,KAAK,QAAQ;;IAEvD,IAAM,kBAAkB,GAAG,SAAS,CAAC,OAAO,CAAC,MAAM,KAAK,OAAO,CAAC,MAAM;IAEhE,IAAA,EAAA,GAAiE,IAAI,CAAC,KAAK;MAAzE,WAAW,GAAA,EAAA,CAAA,WAAA;MAAE,YAAY,GAAA,EAAA,CAAA,YAAA;MAAE,cAAc,GAAA,EAAA,CAAA,cAAA;MAAE,eAAe,GAAA,EAAA,CAAA,eAAe;IACjF,IAAM,kBAAkB,GAAG,SAAS,CAAC,WAAW,KAAK,WAAW;IAChE,IAAM,mBAAmB,GAAG,SAAS,CAAC,YAAY,KAAK,YAAY;IACnE,IAAM,qBAAqB,GAAG,SAAS,CAAC,cAAc,KAAK,cAAc;IACzE,IAAM,sBAAsB,GAAG,SAAS,CAAC,eAAe,KAAK,eAAe;IAE5E,IAAI,SAAS,CAAC,aAAa,KAAK,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE;MACxD,IAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,EAAE;MACrC,IAAA,SAAS,GAAK,IAAI,CAAC,KAAK,CAAA,SAAf;MACjB,IAAI,aAAa,KAAK,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;QACnE,IAAI,CAAC,QAAQ,CAAC;UACZ,SAAS,EAAE,CAAC,CAAC,EAAE,aAAa;SAC7B,CAAC;MACH;IACF;IAED,IAAI,eAAe,IAAI,kBAAkB,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,SAAS,IACzE,uBAAuB,CAAC,SAAS,CAAC,OAAO,EAAE,OAAO,CAAC,IAAI,kBAAkB,IACzE,mBAAmB,IAAI,qBAAqB,IAAI,sBAAsB,EACpE;MACF,IAAI,CAAC,cAAc,EAAE;IACtB;GACF;EA8CD,kBAAA,CAAA,SAAA,CAAA,qBAAqB,GAArB,UAAsB,CAAC,EAAA;IACrB,IAAM,IAAI,GAAG,CAAC,CAAC,MAAM;;IAGrB,IAAI,IAAI,KAAK,CAAC,CAAC,aAAa,EAAE;MAC5B,OAAO,IAAI;IACZ;;;;IAID,IAAM,UAAU,GAAG,CAAC;IACpB,IAAM,oBAAoB,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,WAAW,EAAE,EAAE,CAAC,GAAG,UAAU;IAC1F,IAAM,kBAAkB,GAAG,QAAQ,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,EAAE,EAAE,CAAC,GAAG,UAAU;;IAExF,IAAI,IAAI,CAAC,SAAS,GAAG,CAAC,IACjB,IAAI,CAAC,UAAU,GAAG,CAAC,IACnB,oBAAoB,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,IACnE,kBAAkB,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,YAAY,CAAC,EAAE;MACxE,OAAO,IAAI;IACZ;IAED,OAAO,KAAK;GACb;EAED,kBAAA,CAAA,SAAA,CAAA,cAAc,GAAd,YAAA;IACQ,IAAA,EAAA,GAA4B,IAAI,CAAC,KAAK;MAApC,QAAQ,GAAA,EAAA,CAAA,QAAA;MAAE,WAAW,GAAA,EAAA,CAAA,WAAe;IAC5C,IAAM,WAAW,GAAG,IAAI,CAAC,iBAAiB,EAAE;IAE5C,IAAI,QAAQ,KAAK,WAAW,EAAE;MAC5B,WAAW,CAAC,WAAW,CAAC;IACzB;GACF;EAED,kBAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjB,YAAA;IACQ,IAAA,EAAA,GAA4E,IAAI,CAAC,KAAK;MAApF,WAAW,GAAA,EAAA,CAAA,WAAA;MAAE,SAAS,GAAA,EAAA,CAAA,SAAA;MAAE,YAAY,GAAA,EAAA,CAAA,YAAA;MAAE,eAAe,GAAA,EAAA,CAAA,eAAA;MAAE,cAAc,GAAA,EAAA,CAAA,cAAe;IACtF,IAAA,EAAA,GASF,IAAI,CAAC,KAAK;MARZ,eAAe,GAAA,EAAA,CAAA,eAAA;MACf,QAAQ,GAAA,EAAA,CAAA,QAAA;MACR,UAAU,GAAA,EAAA,CAAA,UAAA;MACV,UAAU,GAAA,EAAA,CAAA,UAAA;MACV,OAAO,GAAA,EAAA,CAAA,OAAA;MACP,cAAc,GAAA,EAAA,CAAA,cAAA;MACd,YAAY,GAAA,EAAA,CAAA,YAAA;MACZ,QAAQ,GAAA,EAAA,CAAA,QACI;IACd,IAAM,cAAc,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,cAAc,EAAE,cAAe,CAAC;IAE1F,OAAO,WAAW,CAChB;MAAE,WAAW,EAAA,WAAA;MAAE,SAAS,EAAA,SAAA;MAAE,YAAY,EAAA,YAAA;MAAE,eAAe,EAAA,eAAA;MAAE,cAAc,EAAA;IAAA,CAAE,EACzE;MAAE,eAAe,EAAA,eAAA;MAAE,OAAO,EAAA,OAAA;MAAE,QAAQ,EAAA,QAAA;MAAE,UAAU,EAAA,UAAA;MAAE,UAAU,EAAA,UAAA;MAAE,YAAY,EAAA,YAAA;MAAE,QAAQ,EAAA;IAAA,CAAE,EACtF,IAAI,CAAC,YAAY,EAAE,cAAc,CAClC;GACF;EAED,kBAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjB,UAAkB,QAAsB,EAAA;IAChC,IAAA,EAAA,GAA8C,IAAI,CAAC,KAAK;MAAtD,cAAc,GAAA,EAAA,CAAA,cAAA;MAAE,YAAY,GAAA,EAAA,CAAA,YAAA;MAAE,SAAS,GAAA,EAAA,CAAA,SAAe;IACxD,IAAA,EAAA,GAIF,IAAI,CAAC,KAAK;MAHZ,UAAU,GAAA,EAAA,CAAA,UAAA;MAAE,QAAQ,GAAA,EAAA,CAAA,QAAA;MAAE,UAAU,GAAA,EAAA,CAAA,UAAA;MAChC,OAAO,GAAA,EAAA,CAAA,OAAA;MAAE,eAAe,GAAA,EAAA,CAAA,eAAA;MAAE,aAAa,GAAA,EAAA,CAAA,aAAA;MACvC,cAAc,GAAA,EAAA,CAAA,cAAA;MAAE,cAAc,GAAA,EAAA,CAAA,cAClB;IACd,IAAM,cAAc,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,cAAc,EAAE,cAAe,CAAC;IAE1F,OAAO,iBAAiB,CAAC;MACvB,UAAU,EAAA,UAAA;MACV,QAAQ,EAAA,QAAA;MACR,UAAU,EAAA,UAAA;MACV,OAAO,EAAA,OAAA;MACP,eAAe,EAAA,eAAA;MACf,aAAa,EAAA,aAAA;MACb,cAAc,EAAA,cAAA;MACd,YAAY,EAAA,YAAA;MACZ,cAAc,EAAA,cAAA;MACd,QAAQ,EAAA,QAAA;MACR,SAAS,EAAA,SAAA;MACT,YAAY,EAAE,IAAI,CAAC,YAAY;MAC/B,cAAc,EAAA;KACf,CAAC;GACH;EAED,kBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACQ,IAAA,EAAA,GAkBF,IAAI,CAAC,KAAK;MAjBQ,SAAS,GAAA,EAAA,CAAA,kBAAA;MACb,KAAK,GAAA,EAAA,CAAA,cAAA;MACN,IAAI,GAAA,EAAA,CAAA,aAAA;MACJ,IAAI,GAAA,EAAA,CAAA,aAAA;MACF,MAAM,GAAA,EAAA,CAAA,eAAA;MACvB,QAAQ,GAAA,EAAA,CAAA,QAAA;MACR,MAAM,GAAA,EAAA,CAAA,MAAA;MACN,UAAU,GAAA,EAAA,CAAA,UAAA;MACV,UAAU,GAAA,EAAA,CAAA,UAAA;MACV,cAAc,GAAA,EAAA,CAAA,cAAA;MACd,QAAQ,GAAA,EAAA,CAAA,QAAA;MACR,aAAa,GAAA,EAAA,CAAA,aAAA;MACb,YAAY,GAAA,EAAA,CAAA,YAAA;MACZ,QAAQ,GAAA,EAAA,CAAA,QAAA;MACR,SAAS,GAAA,EAAA,CAAA,SAAA;MACT,OAAO,GAAA,EAAA,CAAA,OAAA;MACP,YAAY,GAAA,EAAA,CAAA,YACA;IAEd,IAAM,UAAU,GAAG,aAAa,CAAC,OAAO,CAAC,MAAM,EAAE,cAAe,EAAE,YAAY,CAAC;IAC/E,IAAM,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC;IACvD,IAAM,WAAW,GAAG;MAClB,aAAa,EAAA,aAAA;MACb,YAAY,EAAA,YAAA;MACZ,cAAc,EAAA,cAAA;MACd,QAAQ,EAAA,QAAA;MACR,cAAc,EAAE,IAAI,CAAC;KACtB;IACD,IAAM,WAAW,GAAG,MAAM,KAAK,WAAW,GAAG,IAAI,GAAG,MAAM;IAE1D,OACEF,aAAAA,CAAC,KAAK,EAAA;MACJ,YAAY,EAAE,IAAI,CAAC,yBAAyB;MAC5C,kBAAkB,EAAE,SAAS;MAC7B,KAAK,EAAE;QAAE,MAAM,EAAE;MAAW,CAAE;MAC9B,QAAQ,EAAE,IAAI,CAAC,QAAQ;MACvB,SAAS,EAAE,SAAS;MACpB,UAAU,EAAE;IAAU,CAAA,EAEtBA,aAAAA,CAAC,KAAK,EAAA;MACJ,YAAY,EAAE,QAAQ;MACtB,KAAK,EAAE;QACL,QAAQ,EAAK,QAAQ,GAAA;MACtB;IAAA,CAAA,EAEDA,aAAAA,CAAC,WAAW,EAAA;MACV,OAAO,EAAE,cAAc,CAAC,QAAQ,CAAC;IAAwB,CAAA,CACzD,EAEC,CAAC,CAAC,UAAU,CAAC,MAAM,IAClBA,aAAAA,CAAC,uBAAuB,EAAA,QAAA,CAAA,CAAA,CAAA,EAClB,WAAW,EAAA;MACf,IAAI,EAAC,QAAQ;MACb,OAAO,EAAE,IAAI;MACb,aAAa,EAAE,cAAc,CAAC,UAAU;MACxC,aAAa,EAAE;IAAI,CAAA,CAAA,CAEtB,EAEHA,aAAAA,CAAC,uBAAuB,EAAA,QAAA,CAAA,CAAA,CAAA,EAClB,WAAW,EAAA;MACf,IAAI,EAAC,MAAM;MACX,aAAa,EAAE,cAAc,CAAC,QAAQ;MACtC,aAAa,EAAE;IAAI,CAAA,CAAA,CACnB,EAEC,CAAC,CAAC,UAAU,CAAC,MAAM,IAClBA,aAAAA,CAAC,uBAAuB,EAAA,QAAA,CAAA,CAAA,CAAA,EAClB,WAAW,EAAA;MACf,IAAI,EAAC,QAAQ;MACb,OAAO,EAAE,IAAI;MACb,aAAa,EAAE,cAAc,CAAC,UAAU;MACxC,aAAa,EAAE;IAAM,CAAA,CAAA,CAExB,CAEG,CACF;GAEX;EAzRM,kBAAA,CAAA,YAAY,GAAGiB,cAAY;EA0RpC,OAAA,kBAAC;CA3RD,CAAwCf,aAAmB,CAAA;ACxB3D,IAAM,cAAc,GAAG,UAAC,EAAU,EAAA;MAAR,MAAM,GAAA,EAAA,CAAA,MAAA;EAAO,OAAA,MAAM,CAAC,cAAc;AAArB,CAAqB;AAE5D;AACO,IAAM,SAAS,GAA8BH,IAAU,CAAC,UAAC,KAAK,EAAA;EAEjE,IAAA,GAAG,GAKD,KAAK,CAAA,GALJ;IACH,OAAO,GAIL,KAAK,CAAA,OAJA;IACO,GAAG,GAGf,KAAK,CAAA,YAHU;IACF,IAAI,GAEjB,KAAK,CAAA,aAFY;IACnB,cAAc,GACZ,KAAK,CAAA,cADO;EAGhB,IAAM,UAAU,GAAGE,WAAiB,CAClC,UAAC,QAAQ,EAAE,WAAW,EAAA;IAAK,OAAA,cAAe,CAAC;MAAE,QAAQ,EAAA,QAAA;MAAE,WAAW,EAAA,WAAA;MAAE,YAAY,EAAE;IAAO,CAAE,CAAC;EAAA,CAAA,EAC5F,CAAC,OAAO,EAAE,cAAc,CAAC,CAC1B;EAED,OACED,aAAAA,CAAC,GAAG,EAAA;IACF,QAAQ,EAAE,GAAG;IACb,KAAK,EAAE,WAAW,CAAC;MAAE,GAAG,EAAA;IAAA,CAAE;EAAC,CAAA,EAGzB,OAAO,CACJ,GAAG,CAAC,UAAA,MAAM,EAAA;IAAI,OACbA,aAAAA,CAAC,IAAI,EAAA;MACH,GAAG,EAAE,MAAM,CAAC,GAAG;MACf,QAAQ,EAAE,GAAG;MACb,WAAW,EAAE,MAAM;MACnB,KAAK,EAAE,cAAc,CAAC;QAAE,MAAM,EAAA;MAAA,CAAE,CAAC;MACjC,OAAO,EAAE,UAAU,CAAC,GAAG,EAAE,MAAM;IAAC,CAAA,CAChC;EAAA,CACH,CAAC,CAEF;AAEV,CAAC,CAAC;;ACpCF;AACA,IAAA,eAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAqCE,SAAAA,CAAAA,eAAAA,EAAAA,MAAAA,CAAAA;EAArC,SAAA,eAAA,GAAA;;EA6BC;EA5BC,eAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACQ,IAAA,EAAA,GAOF,IAAI,CAAC,KAAK;MANZ,IAAI,GAAA,EAAA,CAAA,IAAA;MACJ,OAAO,GAAA,EAAA,CAAA,OAAA;MACS,KAAK,GAAA,EAAA,CAAA,cAAA;MACrB,YAAY,GAAA,EAAA,CAAA,YAAA;MACZ,aAAa,GAAA,EAAA,CAAA,aAAA;MACb,cAAc,GAAA,EAAA,CAAA,cACF;IAEd,OACEF,aAAAA,CAAC,KAAK,EAAA,IAAA,EAEF,IAAI,CACD,GAAG,CAAC,UAAA,GAAG,EAAA;MAAI,OACVA,aAAAA,CAAC,SAAS,EAAA;QACR,GAAG,EAAE,GAAG,CAAC,GAAG;QACZ,GAAG,EAAE,GAAG;QACR,OAAO,EAAE,OAAO;QAChB,YAAY,EAAE,YAAY;QAC1B,aAAa,EAAE,aAAa;QAC5B,cAAc,EAAE;MAAc,CAAA,CAC9B;IAAA,CACH,CAAC,CAEA;GAEX;EACH,OAAA,eAAC;AAAD,CAAC,CA7BoCE,aAAmB,CAAA;ACAxD,IAAMe,cAAY,GAAG;EACnB,UAAU,EAAE,EAAE;EACd,UAAU,EAAE,EAAE;EACd,aAAa,EAAE,YAAA;IAAM,OAAA,IAAI;EAAA,CAAA;EACzB,eAAe,EAAE,YAAA;IAAM,OAAA,IAAI;EAAA;CAC5B;AAED;;EACuCf,SAAAA,CAAAA,iBAAAA,EAAAA,MAAAA,CAAAA;EAAvC,SAAA,iBAAA,GAAA;;EA0DC;EAvDC,iBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACQ,IAAA,EAAA,GAeF,IAAI,CAAC,KAAK;MAdZ,UAAU,GAAA,EAAA,CAAA,UAAA;MACV,QAAQ,GAAA,EAAA,CAAA,QAAA;MACR,UAAU,GAAA,EAAA,CAAA,UAAA;MACV,OAAO,GAAA,EAAA,CAAA,OAAA;MACP,QAAQ,GAAA,EAAA,CAAA,QAAA;MACY,SAAS,GAAA,EAAA,CAAA,kBAAA;MACb,KAAK,GAAA,EAAA,CAAA,cAAA;MACrB,aAAa,GAAA,EAAA,CAAA,aAAA;MACb,aAAa,GAAA,EAAA,CAAA,aAAA;MACb,eAAe,GAAA,EAAA,CAAA,eAAA;MACf,YAAY,GAAA,EAAA,CAAA,YAAA;MACZ,aAAa,GAAA,EAAA,CAAA,aAAA;MACb,cAAc,GAAA,EAAA,CAAA,cAAA;MACd,QAAQ,GAAA,EAAA,CAAA,QACI;IAEd,IAAM,WAAW,GAAG;MAClB,OAAO,EAAA,OAAA;MACP,YAAY,EAAA,YAAA;MACZ,aAAa,EAAA,aAAA;MACb,cAAc,EAAA;KACf;IAED,OACEF,aAAAA,CAAC,SAAS,EAAA,IAAA,EACRA,aAAAA,CAAC,KAAK,EAAA;MACJ,YAAY,EAAE,QAAQ;MACtB,KAAK,EAAE;QAAE,QAAQ,EAAE,OAAA,GAAQ,QAAQ,GAAA;MAAG;IAAE,CAAA,EAExCA,aAAAA,CAAC,WAAW,EAAA;MAAC,OAAO,EAAE;IAAO,CAAA,CAAI,EAChC,CAAC,CAAC,UAAU,CAAC,MAAM,IAClBA,aAAAA,CAAC,eAAe,EAAA,QAAA,CAAA;MACd,IAAI,EAAE,UAAU;MAChB,cAAc,EAAE;IAAa,CAAA,EACzB,WAAW,CAAA,CAElB,EACDA,aAAAA,CAAC,eAAe,EAAA,QAAA,CAAA;MACd,IAAI,EAAE,QAAQ;MACd,cAAc,EAAE;IAAa,CAAA,EACzB,WAAW,CAAA,CACf,EACD,CAAC,CAAC,UAAU,CAAC,MAAM,IAClBA,aAAAA,CAAC,eAAe,EAAA,QAAA,CAAA;MACd,IAAI,EAAE,UAAU;MAChB,cAAc,EAAE;IAAe,CAAA,EAC3B,WAAW,CAAA,CAElB,CACK,CACE;GAEf;EAxDM,iBAAA,CAAA,YAAY,GAAGiB,cAAY;EAyDpC,OAAA,iBAAC;CA1DD,CAAuCf,aAAmB,CAAA;;ACO1D;AACA,IAAa,aAAa,GAAG;EAC3B,OAAO,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACjB,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EACZ,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EAClB,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EAClB,GAAG,EAAE,CAAC;EACN,IAAI,EAAE,CAAC;EACP,KAAK,EAAE,GAAG;EACV,MAAM,EAAE;CACT;AAED,IAAM,oBAAoB,GAAG,UAC3B,EAAyB,EAAA;MAAvB,YAAY,GAAA,EAAA,CAAA,YAAA;EAEd,OAAO,iBAAiB,CAAC,YAAY,CAAC;AACxC,CAAC;AAED;IACa,gBAAgB,GAA0B,UAAC,KAAK,EAAE,EAO9D,EAAA;MANC,aAAa,GAAA,EAAA,CAAA,aAAA;IACb,WAAW,GAAA,EAAA,CAAA,WAAA;IACX,WAAW,GAAA,EAAA,CAAA,WAAA;IACX,YAAY,GAAA,EAAA,CAAA,YAAA;IACZ,yBAAyB,GAAA,EAAA,CAAA,yBAAA;IACzB,aAAa,GAAA,EAAA,CAAA,aAAA;EAEb,IAAA,YAAA,GAAA,aAAA,UAAA,MAAA,EAAA;IAA2BA,SAAAA,CAAAA,YAAAA,EAAAA,MAAAA,CAAAA;IAgBzB,SAAA,YAAA,CAAY,KAAK,EAAA;MAAjB,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAK,CAAC,IAAA,IAAA;MAWd,KAAA,CAAA,WAAW,GAAG,UAAC,QAAQ,EAAA;QACrB,KAAI,CAAC,QAAQ,CAAC;UAAE,QAAQ,EAAA;QAAA,CAAE,CAAC;OAC5B;MAXC,KAAI,CAAC,KAAK,GAAG;QACX,QAAQ,EAAE,aAAa;QACvB,SAAS,EAAE,SAAS;QACpB,YAAY,EAAE;OACf;MACD,KAAI,CAAC,WAAW,GAAG,UAAA,SAAS,EAAA;QAAI,OAAA,KAAI,CAAC,QAAQ,CAAC;UAAE,SAAS,EAAA;QAAA,CAAE,CAAC;MAAA,CAAA;MAC5D,KAAI,CAAC,cAAc,GAAG,UAAA,YAAY,EAAA;QAAI,OAAA,KAAI,CAAC,QAAQ,CAAC;UAAE,YAAY,EAAA;QAAA,CAAE,CAAC;MAAA,CAAA;;IACtE;IAMD,YAAA,CAAA,SAAA,CAAA,kBAAkB,GAAlB,UAAmB,CAAC,EAAE,SAAS,EAAA;MACrB,IAAW,MAAM,GAAiC,SAAS,CAAA,SAA1C;QAAgB,YAAY,GAAK,SAAS,CAAA,YAAd;MAC/C,IAAA,EAAA,GAA0D,IAAI,CAAC,KAAK;QAAvD,SAAS,GAAA,EAAA,CAAA,SAAA;QAAgB,eAAe,GAAA,EAAA,CAAA,YAAe;MAE1E,IAAI,SAAS,KAAK,SAAS,IAAI,SAAS,KAAK,MAAM,EAAE;QACnD,IAAI,CAAC,QAAQ,CAAC;UAAE,SAAS,EAAE;QAAS,CAAE,CAAC;MACxC;MACD,IAAI,eAAe,KAAK,SAAS,IAAI,YAAY,KAAK,eAAe,EAAE;QACrE,IAAI,CAAC,QAAQ,CAAC;UAAE,YAAY,EAAE;QAAS,CAAE,CAAC;MAC3C;KACF;IAED,YAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;MAAA,IAAA,KAAA,GAAA,IAAA;MACE,IAAM,EAAA,GAMF,IAAI,CAAC,KAAK;QALZ,MAAM,GAAA,EAAA,CAAA,MAAA;QACN,kBAAkB,GAAA,EAAA,CAAA,kBAAA;QACK,gBAAgB,GAAA,EAAA,CAAA,qBAAA;QACvC,QAAQ,GAAA,EAAA,CAAA,QAAA;QACL,SAAS,GAAA,MAAA,CAAA,EAAA,EALR,CAAA,QAAA,EAAA,oBAAA,EAAA,uBAAA,EAAA,UAAA,CAML,CAAa;MACR,IAAA,EAAA,GAIF,IAAI,CAAC,KAAK;QAHF,aAAa,GAAA,EAAA,CAAA,QAAA;QACZ,MAAM,GAAA,EAAA,CAAA,SAAA;QACjB,YAAY,GAAA,EAAA,CAAA,YACA;MAEd,OACEF,aAAAA,CAAC,MAAM,EAAA;QAAC,IAAI,EAAC;MAAc,CAAA,EACzBA,aAAAA,CAAC,KAAK,EAAA,QAAA,CAAA;QAAC,eAAe,EAAE;MAAa,CAAA,EAAM,SAAS,CAAA,CAAI,EAGxDA,aAAAA,CAAC,MAAM,EAAA;QAAC,IAAI,EAAC,aAAa;QAAC,MAAM,EAAE,IAAI,CAAC;MAAW,CAAA,CAAI,EACvDA,aAAAA,CAAC,MAAM,EAAA;QAAC,IAAI,EAAC,aAAa;QAAC,MAAM,EAAE,IAAI,CAAC;MAAW,CAAA,CAAI,EACvDA,aAAAA,CAAC,MAAM,EAAA;QAAC,IAAI,EAAC,gBAAgB;QAAC,MAAM,EAAE,IAAI,CAAC;MAAc,CAAA,CAAI,EAC7DA,aAAAA,CAAC,MAAM,EAAA;QAAC,IAAI,EAAC,UAAU;QAAC,KAAK,EAAE;MAAa,CAAA,CAAI,EAChDA,aAAAA,CAAC,MAAM,EAAA;QAAC,IAAI,EAAC,cAAc;QAAC,QAAQ,EAAE;MAAoB,CAAA,CAAI,EAE9DA,aAAAA,CAAC,QAAQ,EAAA;QAAC,IAAI,EAAC;MAAa,CAAA,EACzB,UAAC,MAAwB,EAAA;QAAK,OAC7BA,aAAAA,CAAC,iBAAiB,EAAA,IAAA,EACf,UACC,EAA6E,EAC7E,EAAe,EAAA;cADb,iBAAiB,GAAA,EAAA,CAAA,iBAAA;YAAE,eAAe,GAAA,EAAA,CAAA,eAAA;YAAE,aAAa,GAAA,EAAA,CAAA,aAAA;YAAE,YAAY,GAAA,EAAA,CAAA,YAAA;YAAE,QAAQ,GAAA,EAAA,CAAA,QAAA;cACzE,WAAW,GAAA,EAAA,CAAA,WAAA;UAGL,IAAA,cAAc,GAAK,KAAI,CAAC,KAAK,CAAA,cAAf;UACtB,IAAM,KAAK,GAAG,WAAW,CAAC,QAAQ,EAAE,aAAa,EAAE,YAAY,CAAC;UAEhE,cAAc,CAAC,KAAK,CAAC;UAErB,IAAM,aAAa,GAAG,iBAAiB,IAAI,aAAa,CAAC,MAAM;UAC/D,IAAM,SAAS,GAAG,YAAY,CAC5B,aAAa,EACb,aAAa,EACb,MAAM,EACN,kBAAkB,EAClB,YAAY,CACb;UAED,OACEA,aAAAA,CAAC,mBAAmB,EAAA;YAClB,MAAM,EAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACD,MAAM,CAAA,EAAA;cACT,aAAa,EAAA,aAAA;cACb,eAAe,EAAA,eAAA;cACf,YAAY,EAAA,YAAA;cACZ,MAAM,EAAA,MAAA;cACN,kBAAkB,EAAA,kBAAA;cAClB,WAAW,EAAA,WAAA;cACX,QAAQ,EAAA,QAAA;cACR,SAAS,EAAA,SAAA;cACT,YAAY,EAAA;YAAA,CAAA;UAAA,CAAA,CAEd;SAEL,CACiB;MAAA,CACrB,CACQ,EAEXA,aAAAA,CAAC,QAAQ,EAAA;QACP,IAAI,EAAC,WAAW;QAChB,SAAS,EAAE,UAAC,EAAiB,EAAA;cAAf,QAAQ,GAAA,EAAA,CAAA,QAAA;UAAY,OAAA,CAAC,CAAC,eAAe,CAAC,QAAQ,CAAC;QAAA;MAAA,CAAA,EAE5D,UAAC,MAAyB,EAAA;QAAK,OAC9BA,aAAAA,CAAC,iBAAiB,EAAA,IAAA,EACf,UAAC,EAAgB,EAAA;cAAd,YAAY,GAAA,EAAA,CAAA,YAAA;UAAO,OACrB,YAAY,GAAGA,aAAAA,CAAC,gBAAgB,EAAA,QAAA,CAAA,CAAA,CAAA,EAAK,MAAM,CAAA,CAAI,GAAGA,aAAAA,CAAC,mBAAmB,EAAA,IAAA,CAAG;SAC1E,CACiB;MAAA,CACrB,CACQ,CACJ;KAEZ;IA7HM,YAAA,CAAA,YAAY,GAAG;MACpB,kBAAkB,EAAE,yBAAyB;MAC7C,MAAM,EAAE,aAAa;MACrB,qBAAqB,EAAE,YAAY;MACnC,cAAc,EAAE,YAAA,CAAA;KACjB;IAIM,YAAA,CAAA,YAAY,GAAG,YAAY;IAC3B,YAAA,CAAA,eAAe,GAAG,eAAe;IAoH1C,OAAA,YAAC;GA/HD,CAA2BE,aAAmB,CAAA;EAiI9C,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,UAA8B,CAAC,CAAC,OAAO,CAAC,UAAC,IAAI,EAAA;IAC/D,YAAY,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC;GACjC,CAAC;EAEF,YAAY,CAAC,WAAW,GAAG,WAAW;EACtC,YAAY,CAAC,WAAW,GAAG,WAAW;EACtC,YAAY,CAAC,YAAY,GAAG,YAAY;EAExC,OAAO,YAAY;AACrB,CAAC;ACvLD,IAAA,IAAA,GAAA,aAAA,YAAA;EAME,SAAA,IAAA,CAAY,KAAa,EAAE,IAAwB,EAAA;IAHnD,IAAA,CAAA,IAAI,GAAgB,IAAI;IACxB,IAAA,CAAA,IAAI,GAAgB,IAAI;IAGtB,IAAI,CAAC,KAAK,GAAG,KAAK;IAClB,IAAI,CAAC,IAAI,GAAG,IAAI;EACjB;EACH,OAAA,IAAC;AAAD,CAAC,EAAA;AAED;AACA,IAAA,QAAA,GAAA,aAAA,YAAA;EAOE,SAAA,QAAA,CAAY,QAAgB,EAAE,QAAmC,EAAA;IAAnC,IAAA,QAAA,KAAA,KAAA,CAAA,EAAA;MAAA,QAAA,GAAW,MAAM,CAAC,iBAAiB;IAAA;IAFjE,IAAA,CAAA,KAAK,GAAG,IAAI,GAAG,EAAgB;IAG7B,IAAI,CAAC,QAAQ,GAAG,QAAQ;IACxB,IAAI,CAAC,QAAQ,GAAG,QAAQ;IACxB,IAAI,CAAC,QAAQ,EAAE;EAChB;EAED,QAAA,CAAA,SAAA,CAAA,QAAQ,GAAR,YAAA;IACE,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IAC5B,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IAC5B,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI;IAC1B,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI;GAC3B;EAED,QAAA,CAAA,SAAA,CAAA,OAAO,GAAP,UAAQ,SAAiB,EAAE,IAAwB,EAAA;IACjD,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;MAC7B,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;IAC3B;IAED,IAAM,IAAI,GAAG,IAAI,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC;IACtC,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAK;IAC5B,IAAI,CAAC,IAAI,GAAG,IAAI;IAChB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI;IACrB,IAAI,CAAC,IAAI,GAAG,IAAI;IAChB,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI;IACrB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC;IAE/B,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,EAAE;MACnC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IAAK,CAAC,KAAK,CAAC;IACvC;GACF;EAED,QAAA,CAAA,SAAA,CAAA,UAAU,GAAV,UAAW,KAAa,EAAA;IACtB,IAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAE;IACnC,IAAI,CAAC,IAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI;IAC3B,IAAI,CAAC,IAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI;IAE3B,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC;GACzB;EAED,QAAA,CAAA,SAAA,CAAA,OAAO,GAAP,UAAQ,SAAiB,EAAA;IACvB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;MAC9B,OAAO,IAAI;IACZ;IAEO,IAAA,IAAI,GAAK,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAE,CAAA,IAA/B;IACZ,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;IAC1B,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC;IAE7B,OAAO,IAAI;GACZ;EAED,QAAA,CAAA,SAAA,CAAA,KAAK,GAAL,YAAA;IACE,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE;IAClB,IAAI,CAAC,QAAQ,EAAE;GAChB;EACH,OAAA,QAAC;AAAD,CAAC,EAAA;IAEY,cAAc,GAAG,UAAC,QAAc,EAAE,QAAmC,EAAA;EAAnD,IAAA,QAAA,KAAA,KAAA,CAAA,EAAA;IAAA,QAAA,GAAA,GAAc;EAAA;EAAE,IAAA,QAAA,KAAA,KAAA,CAAA,EAAA;IAAA,QAAA,GAAW,MAAM,CAAC,iBAAiB;EAAA;EAChF,IAAM,KAAK,GAAG,IAAI,QAAQ,CAAC,QAAQ,EAAE,QAAQ,GAAG,QAAQ,CAAC;EAEzD,OAAO;IACL,OAAO,EAAE,UAAC,IAAY,EAAE,IAAY,EAAA;MAClC,IAAI,MAAM,GAAU,EAAE;MACtB,IAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;MAC5C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,IAAI,CAAC,EAAE;QACrC,IAAM,SAAS,GAAG,IAAI,GAAG,CAAC,GAAG,QAAQ;QACrC,IAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC;QAEtC,IAAI,KAAK,KAAK,IAAI,EAAE;UAClB,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;QAC9B;;QAGD,IAAI,KAAK,KAAK,IAAI,IAAK,CAAC,KAAK,SAAS,GAAG,CAAC,IAAI,KAAK,CAAC,MAAM,KAAK,QAAS,EAAE;UACxE,OAAO,MAAM;QACd;MACF;MACD,OAAO,MAAM;KACd;IACD,OAAO,EAAE,UAAC,IAAY,EAAE,IAAwB,EAAA;MAC9C,IAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;MACnD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,IAAI,CAAC,EAAE;QACrC,IAAM,SAAS,GAAG,CAAC,GAAG,QAAQ;QAC9B,IAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,SAAS,GAAG,QAAQ,CAAC;;QAG7D,IAAI,SAAS,CAAC,MAAM,KAAK,QAAQ,IAAI,CAAC,KAAK,SAAS,GAAG,CAAC,EAAE;UACxD,KAAK,CAAC,OAAO,CAAC,SAAS,GAAG,IAAI,EAAE,SAAS,CAAC;QAC3C;MACF;KACF;IACD,UAAU,EAAE,YAAA;MAAM,OAAA,KAAK,CAAC,KAAK,EAAE;IAAA;GAChC;AACH,CAAC;IChHY,sBAAsB,GACnC,UAAwC,IAAa,EAAE,IAAa,EAAA;EACpE,OAAA,UAAC,SAA+C,EAAA;IAC9C,IAAA,uBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;MAAsCA,SAAAA,CAAAA,uBAAAA,EAAAA,MAAAA,CAAAA;MAEpC,SAAA,uBAAA,CAAY,KAAK,EAAA;QAAjB,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAK,CAAC,IAAA,IAAA;QACZ,KAAI,CAAC,GAAG,GAAG;UAAE,OAAO,EAAE;QAAI,CAAE;QAC5B,KAAI,CAAC,WAAW,GAAG,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAI,CAAC;QAC9C,KAAI,CAAC,eAAe,GAAG,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAI,CAAC;;MACvD;MAED,uBAAA,CAAA,SAAA,CAAA,eAAe,GAAf,UAAgB,IAAI,EAAA;;QAClB,CAAA,EAAA,GAAC,IAAI,CAAC,GAAG,CAAC,OAAe,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAA;QACzE,IAAI,CAAC,GAAG,CAAC,OAAe,GAAG,IAAI;QAChC,CAAA,EAAA,GAAC,IAAI,CAAC,GAAG,CAAC,OAAe,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAA;OACxE;MAED,uBAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjB,YAAA;QACQ,IAAA,EAAA,GAA4D,IAAI,CAAC,KAAK;UAApE,8BAA8B,GAAA,EAAA,CAAA,8BAAA;UAAE,QAAQ,GAAA,EAAA,CAAA,QAAA;UAAE,WAAW,GAAA,EAAA,CAAA,WAAe;QAC5E,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,IAAI,8BAA8B,EAAE;UACtD,8BAA8B,CAAC;YAC7B,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,IAAI,EAAE,IAAI,IAAI,QAAQ,CAAC,GAAG;YAC1B,IAAI,EAAE,IAAI,IAAI,WAAW,CAAC,GAAG;YAC7B,MAAM,EAAE;WACT,CAAC;QACH;OACF;MAED,uBAAA,CAAA,SAAA,CAAA,oBAAoB,GAApB,YAAA;QACQ,IAAA,EAAA,GAA4D,IAAI,CAAC,KAAK;UAApE,8BAA8B,GAAA,EAAA,CAAA,8BAAA;UAAE,QAAQ,GAAA,EAAA,CAAA,QAAA;UAAE,WAAW,GAAA,EAAA,CAAA,WAAe;QAC5E,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,IAAI,8BAA8B,EAAE;UACtD,8BAA8B,CAAC;YAC7B,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,IAAI,EAAE,IAAI,IAAI,QAAQ,CAAC,GAAG;YAC1B,IAAI,EAAE,IAAI,IAAI,WAAW,CAAC,GAAG;YAC7B,MAAM,EAAE;WACT,CAAC;UACD,IAAI,CAAC,GAAG,CAAC,OAAe,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC;QAC3E;OACF;MAED,uBAAA,CAAA,SAAA,CAAA,WAAW,GAAX,UAAY,KAAK,EAAA;QACT,IAAA,EAAA,GAA+C,IAAI,CAAC,KAAK;UAAvD,QAAQ,GAAA,EAAA,CAAA,QAAA;UAAE,WAAW,GAAA,EAAA,CAAA,WAAA;UAAE,iBAAiB,GAAA,EAAA,CAAA,iBAAe;QAC/D,IAAI,iBAAiB,EAAE;UACrB,iBAAiB,CAAC;YAAE,IAAI,EAAE,IAAI,IAAI,QAAQ,CAAC,GAAG;YAAE,IAAI,EAAE,IAAI,IAAI,WAAW,CAAC,GAAG;YAAE,KAAK,EAAA;UAAA,CAAE,CAAC;QACxF;OACF;MAED,uBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;QACE,IAAM,EAAA,GAAsE,IAAI,CAAC,KAAK;UAA9E,iBAAiB,GAAA,EAAA,CAAA,iBAAA;UAAE,8BAA8B,GAAA,EAAA,CAAA,8BAAA;UAAK,SAAS,GAAA,MAAA,CAAA,EAAA,EAAjE,CAAA,mBAAA,EAAA,gCAAA,CAAmE,CAAa;QACtF,OAAOF,aAAAA,CAAC,SAAS,EAAA,QAAA,CAAA;UAAC,YAAY,EAAE,IAAI,CAAC;QAAe,CAAA,EAAM,SAAS,CAAA,CAAI;OACxE;MACH,OAAA,uBAAC;KAAA,CAnDqCE,aAAmB,CAAA;IAoDzD,OAAO,uBAAuB;GAC/B;AAtDD,CAsDC;ICxDY,iBAAiB,GAAoDH,IAAU,CAAC,UAAC,EAG7F,EAAA;MAFC,EAAA,GAAA,EAAA,CAAA,OAAiE;IAAtD,UAAU,GAAA,EAAA,CAAA,UAAA;IAAE,WAAW,GAAA,EAAA,CAAA,WAAA;IAAa,gBAAgB,GAAA,EAAA,CAAA,SAAA;IAC/D,UAAU,GAAA,EAAA,CAAA,UAAA;EACN,OACJC,aAAAA,CAACI,QAAc,EAAA,IAAA,EACZ,UAAU,CAAC,UAAU,EAAE;IAAE,WAAW,EAAA;EAAA,CAAE,CAAC,EACxCJ,aAAAA,CAAC,gBAAgB,EAAA,IAAA,CAAG,CACL;AAJb,CAKL,CAAC","sourcesContent":["import * as React from 'react';\nimport {\n  Getter, Plugin, Getters,\n} from '@devexpress/dx-react-core';\nimport { tableColumnsWithGrouping } from '@devexpress/dx-grid-core';\nimport { ShowColumnWhenGroupedGetterFn, TableColumnsWithGroupingProps } from '../../types';\n\nconst showColumnWhenGroupedGetter: ShowColumnWhenGroupedGetterFn = (\n  showColumnsWhenGrouped, columnExtensions = [],\n) => {\n  const map = columnExtensions.reduce((acc, columnExtension) => {\n    acc[columnExtension.columnName] = columnExtension.showWhenGrouped;\n    return acc;\n  }, {});\n\n  return columnName => map[columnName] || showColumnsWhenGrouped;\n};\n\n/** @internal */\nexport const TableColumnsWithGrouping: React.FunctionComponent<\n  TableColumnsWithGroupingProps\n> = React.memo(({\n  indentColumnWidth, showColumnsWhenGrouped, columnExtensions,\n}) => {\n  const tableColumnsComputed = ({\n    columns, tableColumns, grouping, draftGrouping,\n  }: Getters) => tableColumnsWithGrouping(\n    columns,\n    tableColumns,\n    grouping,\n    draftGrouping,\n    indentColumnWidth!,\n    showColumnWhenGroupedGetter(showColumnsWhenGrouped!, columnExtensions),\n  );\n\n  return (\n    <Plugin>\n      <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n    </Plugin>\n  );\n});\n\nTableColumnsWithGrouping.defaultProps = {\n  indentColumnWidth: 0,\n};\n","import * as React from 'react';\nimport {\n  Getter, Plugin,\n} from '@devexpress/dx-react-core';\nimport { rowIdGetter, cellValueGetter } from '@devexpress/dx-grid-core';\nimport { GridCoreGettersProps } from '../../types';\n\nexport const GridCoreGetters: React.FunctionComponent<GridCoreGettersProps> = React.memo(({\n  rows,\n  columns,\n  getRowId,\n  getCellValue,\n}) => (\n  <Plugin>\n    <Getter name=\"rows\" value={rows} />\n    <Getter name=\"getRowId\" value={rowIdGetter(getRowId!, rows)} />\n    <Getter name=\"columns\" value={columns} />\n    <Getter name=\"getCellValue\" value={cellValueGetter(getCellValue!, columns)} />\n  </Plugin>\n));\n","import * as React from 'react';\nimport {\n  Getter, Plugin,\n} from '@devexpress/dx-react-core';\nimport { tableColumnsWithDataRows, checkTableColumnExtensions } from '@devexpress/dx-grid-core';\nimport { Table } from '../../types';\n\nexport const TableColumnsWithDataRowsGetter: React.FunctionComponent<\n  { columnExtensions?: Table.ColumnExtension[]; }\n> = React.memo(({ columnExtensions }) => {\n  const tableColumnsComputed = React.useCallback(\n    ({ columns }) => (\n      tableColumnsWithDataRows(columns, columnExtensions!)\n    ), [columnExtensions]);\n  checkTableColumnExtensions(columnExtensions!);\n\n  return (\n    <Plugin>\n      <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n    </Plugin>\n  );\n});\n","import * as React from 'react';\nimport {\n  Getter,\n  Plugin,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  visibleTableColumns,\n} from '@devexpress/dx-grid-core';\nimport { VisibleTableColumnsProps } from '../../types';\n\nconst visibleTableColumnsComputed = (\n  { tableColumns, hiddenColumnNames }: Getters,\n) => visibleTableColumns(tableColumns, hiddenColumnNames);\n\n/** @internal */\nexport const VisibleTableColumns: React.FunctionComponent<\n  VisibleTableColumnsProps\n> = React.memo(({\n  hiddenColumnNames,\n}) => (\n  <Plugin>\n    <Getter name=\"hiddenColumnNames\" value={hiddenColumnNames} />\n    <Getter name=\"tableColumns\" computed={visibleTableColumnsComputed} />\n  </Plugin>\n));\n\nVisibleTableColumns.defaultProps = {\n  hiddenColumnNames: [],\n};\n","import * as React from 'react';\nimport {\n  Getter,\n  Plugin,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  orderedColumns,\n} from '@devexpress/dx-grid-core';\nimport { OrderedTableColumnsProps } from '../../types';\n\n/** @internal */\nexport const OrderedTableColumns: React.FunctionComponent<\n  OrderedTableColumnsProps\n> = ({\n  order,\n}) => {\n  const columnsComputed = (\n    { tableColumns }: Getters,\n  ) => orderedColumns(tableColumns, order!);\n\n  return (\n    <Plugin>\n      <Getter name=\"tableColumns\" computed={columnsComputed} />\n    </Plugin>\n  );\n};\n\nOrderedTableColumns.defaultProps = {\n  order: [],\n};\n","import * as React from 'react';\nimport {\n  Plugin, Getter, Template, TemplatePlaceholder,\n} from '@devexpress/dx-react-core';\nimport { GridProps } from '../types';\nimport { GridCoreGetters } from './internal';\n\nexport class GridCore extends React.PureComponent<GridProps, any> {\n  rootRef: React.RefObject<HTMLTableElement>;\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      ref: {},\n    };\n    this.rootRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.setState({\n      ref: this.rootRef,\n    });\n  }\n\n  render() {\n    const {\n      rootComponent: Root,\n      ...restProps\n    } = this.props;\n    const { ref } = this.state;\n\n    return (\n      <Plugin>\n        <Getter name=\"skip\" value={0} />\n        <Getter name=\"loadedRowsStart\" value={0} />\n        <Getter name=\"rootRef\" value={ref} />\n        <GridCoreGetters {...restProps} />\n\n        <Template name=\"root\">\n          <Root rootRef={this.rootRef}>\n            <TemplatePlaceholder name=\"header\" />\n            <TemplatePlaceholder name=\"body\" />\n            <TemplatePlaceholder name=\"footer\" />\n          </Root>\n        </Template>\n      </Plugin>\n    );\n  }\n}\n","import * as React from 'react';\nimport { PluginHost } from '@devexpress/dx-react-core';\nimport { GridCore } from './plugins/grid-core';\nimport { GridProps } from './types';\n\nconst GridBase: React.SFC<GridProps> = ({\n  rows,\n  columns,\n  getRowId,\n  getCellValue,\n  rootComponent,\n  children,\n}) => (\n  <PluginHost>\n    <GridCore\n      rows={rows}\n      columns={columns}\n      getRowId={getRowId}\n      getCellValue={getCellValue}\n      rootComponent={rootComponent}\n    />\n    {children}\n  </PluginHost>\n);\n\n/***\n * The Grid is a root container component designed to process and display data specified via\n * the `rows` property. You can configure columns using the `columns` property. The Grid's\n * functionality  is implemented in several plugins specified as child components.\n * See the plugins concept for details.\n * */\nexport const Grid: React.ComponentType<GridProps> = GridBase;\n","import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Template, TemplatePlaceholder, Plugin, TemplateConnector,\n} from '@devexpress/dx-react-core';\nimport { columnChooserItems } from '@devexpress/dx-grid-core';\nimport { ColumnChooserState, ColumnChooserProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'TableColumnVisibility' },\n  { name: 'Toolbar' },\n];\n\nclass ColumnChooserBase extends React.PureComponent<ColumnChooserProps, ColumnChooserState> {\n  static defaultProps = {\n    messages: {},\n  };\n  static components = {\n    overlayComponent: 'Overlay',\n    containerComponent: 'Container',\n    itemComponent: 'Item',\n    toggleButtonComponent: 'ToggleButton',\n  };\n  button!: React.ReactInstance;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      visible: false,\n    };\n\n    this.handleToggle = this.handleToggle.bind(this);\n    this.handleHide = this.handleHide.bind(this);\n    this.setButtonRef = this.setButtonRef.bind(this);\n  }\n\n  setButtonRef(button) {\n    this.button = button;\n  }\n\n  handleToggle() {\n    const { visible } = this.state;\n    this.setState({ visible: !visible });\n  }\n\n  handleHide() {\n    this.setState({ visible: false });\n  }\n\n  render() {\n    const {\n      overlayComponent: Overlay,\n      containerComponent: Container,\n      itemComponent: Item,\n      toggleButtonComponent: ToggleButton,\n      messages,\n    } = this.props;\n    const getMessage = getMessagesFormatter(messages!);\n    const { visible } = this.state;\n\n    return (\n      <Plugin\n        name=\"ColumnChooser\"\n        dependencies={pluginDependencies}\n      >\n        <Template name=\"toolbarContent\">\n          <TemplatePlaceholder />\n          <TemplateConnector>\n            {(\n              { columns, hiddenColumnNames, isColumnTogglingEnabled },\n              { toggleColumnVisibility },\n            ) => (\n              <React.Fragment>\n                <ToggleButton\n                  buttonRef={this.setButtonRef}\n                  onToggle={this.handleToggle}\n                  getMessage={getMessage}\n                  active={visible}\n                />\n                <Overlay\n                  visible={visible}\n                  target={this.button}\n                  onHide={this.handleHide}\n                >\n                  <Container>\n                    {columnChooserItems(columns, hiddenColumnNames)\n                      .map((item) => {\n                        const { name: columnName } = item.column;\n                        const togglingEnabled = isColumnTogglingEnabled(columnName);\n                        return (\n                          <Item\n                            key={columnName}\n                            item={item}\n                            disabled={!togglingEnabled}\n                            onToggle={() => toggleColumnVisibility(columnName)}\n                          />\n                        );\n                      })}\n                  </Container>\n                </Overlay>\n              </React.Fragment>\n            )}\n          </TemplateConnector>\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/***\n * The ColumnChooser plugin allows a user to toggle grid columns' visibility at runtime.\n * The column chooser lists columns with checkboxes that control a corresponding\n * column's visibility.\n * */\nexport const ColumnChooser: React.ComponentType<ColumnChooserProps> = ColumnChooserBase;\n","import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper, Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  changeColumnFilter,\n  getColumnExtensionValueGetter,\n  filterExpression,\n  ChangeFilterPayload,\n} from '@devexpress/dx-grid-core';\nimport { FilteringStateProps, FilteringStateState } from '../types';\n\nconst columnExtensionValueGetter = (columnExtensions, defaultValue) => (\n  getColumnExtensionValueGetter(columnExtensions, 'filteringEnabled', defaultValue)\n);\nconst filterExpressionComputed = (\n  { filters, filterExpression: filterExpressionValue }: Getters,\n) => filterExpression(filters, filterExpressionValue);\n\nclass FilteringStateBase extends React.PureComponent<FilteringStateProps, FilteringStateState> {\n  static defaultProps = {\n    defaultFilters: [],\n    columnFilteringEnabled: true,\n  };\n  changeColumnFilter: (payload: ChangeFilterPayload) => void;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      filters: props.filters || props.defaultFilters,\n    };\n    const stateHelper = createStateHelper(\n      this,\n      {\n        filters: () => {\n          const { onFiltersChange } = this.props;\n          return onFiltersChange;\n        },\n      },\n    );\n\n    this.changeColumnFilter = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'filters', changeColumnFilter);\n  }\n\n  // tslint:disable-next-line:member-ordering\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      filters = prevState.filters,\n    } = nextProps;\n\n    return {\n      filters,\n    };\n  }\n\n  render() {\n    const { filters } = this.state;\n    const { columnExtensions, columnFilteringEnabled } = this.props;\n\n    return (\n      <Plugin\n        name=\"FilteringState\"\n      >\n        <Getter name=\"filters\" value={filters} />\n        <Getter name=\"filterExpression\" computed={filterExpressionComputed} />\n        <Getter\n          name=\"isColumnFilteringEnabled\"\n          value={columnExtensionValueGetter(columnExtensions, columnFilteringEnabled)}\n        />\n        <Action name=\"changeColumnFilter\" action={this.changeColumnFilter} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that manages the filtering state. */\nexport const FilteringState: React.ComponentType<FilteringStateProps> = FilteringStateBase;\n","import * as React from 'react';\nimport { Getter, Plugin, Getters } from '@devexpress/dx-react-core';\nimport {\n  filteredRows,\n  filteredCollapsedRowsGetter,\n  unwrappedFilteredRows,\n  getColumnExtension,\n  defaultFilterPredicate,\n  FilterPredicate,\n} from '@devexpress/dx-grid-core';\nimport { PureComputed } from '@devexpress/dx-core';\nimport { IntegratedFilteringProps, DefaultPredicateFn } from '../types';\n\nconst pluginDependencies = [\n  { name: 'FilteringState', optional: true },\n  { name: 'SearchState', optional: true },\n];\n\nconst getCollapsedRowsComputed = ({ rows }: Getters) => filteredCollapsedRowsGetter(rows);\nconst unwrappedRowsComputed = ({ rows }: Getters) => unwrappedFilteredRows(rows);\n\nclass IntegratedFilteringBase extends React.PureComponent<IntegratedFilteringProps> {\n  static defaultPredicate: DefaultPredicateFn;\n\n  render() {\n    const { columnExtensions } = this.props;\n    const getColumnPredicate: PureComputed<\n      [string], FilterPredicate\n    > = columnName => getColumnExtension(\n      columnExtensions, columnName,\n    ).predicate!;\n\n    const rowsComputed = ({\n      rows,\n      filterExpression,\n      getCellValue,\n      getRowLevelKey,\n      getCollapsedRows,\n    }: Getters) => filteredRows(\n      rows,\n      filterExpression,\n      getCellValue,\n      getColumnPredicate,\n      getRowLevelKey,\n      getCollapsedRows,\n    );\n\n    return (\n      <Plugin\n        name=\"IntegratedFiltering\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"rows\" computed={rowsComputed} />\n        <Getter name=\"getCollapsedRows\" computed={getCollapsedRowsComputed} />\n        <Getter name=\"rows\" computed={unwrappedRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\nIntegratedFilteringBase.defaultPredicate = defaultFilterPredicate;\n\nexport const IntegratedFiltering: React.ComponentType<IntegratedFilteringProps> & {\n  /***\n   * The built-in filter predicate.\n   * The `filter` parameter accepts an object containing the 'value' field.\n   **/\n  defaultPredicate: DefaultPredicateFn;\n} = IntegratedFilteringBase;\n","import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper, StateHelper,\n} from '@devexpress/dx-react-core';\nimport {\n  createRowChangeGetter,\n  startEditRows,\n  stopEditRows,\n  addRow,\n  changeAddedRow,\n  cancelAddedRows,\n  addedRowsByIds,\n  changeRow,\n  cancelChanges,\n  changedRowsByIds,\n  deleteRows,\n  cancelDeletedRows,\n  getColumnExtensionValueGetter,\n  startEditCells,\n  stopEditCells,\n} from '@devexpress/dx-grid-core';\nimport { EditingStateProps, EditingStateState } from '../types';\n\nconst columnExtensionValueGetter = (\n  columnExtensions, defaultValue,\n) => getColumnExtensionValueGetter(columnExtensions, 'editingEnabled', defaultValue);\n\nclass EditingStateBase extends React.PureComponent<EditingStateProps, EditingStateState> {\n  static defaultProps = {\n    columnEditingEnabled: true,\n    defaultEditingRowIds: [],\n    defaultEditingCells: [],\n    defaultRowChanges: {},\n    defaultAddedRows: [],\n    defaultDeletedRowIds: [],\n  };\n  startEditRows: (payload: any) => void;\n  stopEditRows: (payload: any) => void;\n  startEditCells: (payload: any) => void;\n  stopEditCells: (payload: any) => void;\n  changeRow: (payload: any) => void;\n  cancelChangedRows: (payload: any) => void;\n  commitChangedRows: ({ rowIds }: { rowIds: any; }) => void;\n  addRow: (payload: any) => void;\n  changeAddedRow: (payload: any) => void;\n  cancelAddedRows: (payload: any) => void;\n  commitAddedRows: ({ rowIds }: { rowIds: any; }) => void;\n  deleteRows: (payload: any) => void;\n  cancelDeletedRows: (payload: any) => void;\n  commitDeletedRows: ({ rowIds }: { rowIds: any; }) => void;\n\n  constructor(props) {\n    super(props);\n    const rowChanges = props.rowChanges || props.defaultRowChanges;\n    const addedRows = props.addedRows || props.defaultAddedRows;\n    const getRowChanges = () => {\n      const { rowChanges: stateRowChanges } = this.state;\n      return stateRowChanges;\n    };\n    const getAddedRows = () => {\n      const { addedRows: stateAddedRows } = this.state;\n      return stateAddedRows;\n    };\n\n    this.state = {\n      addedRows,\n      rowChanges,\n      editingRowIds: props.editingRowIds || props.defaultEditingRowIds,\n      deletedRowIds: props.deletedRowIds || props.defaultDeletedRowIds,\n      editingCells: props.editingCells || props.defaultEditingCells,\n    };\n\n    const stateHelper: StateHelper = createStateHelper(\n      this,\n      {\n        editingRowIds: () => {\n          const { onEditingRowIdsChange } = this.props;\n          return onEditingRowIdsChange;\n        },\n        editingCells: () => {\n          const { onEditingCellsChange } = this.props;\n          return onEditingCellsChange;\n        },\n        addedRows: () => {\n          const { onAddedRowsChange } = this.props;\n          return onAddedRowsChange;\n        },\n        rowChanges: () => {\n          const { onRowChangesChange } = this.props;\n          return onRowChangesChange;\n        },\n        deletedRowIds: () => {\n          const { onDeletedRowIdsChange } = this.props;\n          return onDeletedRowIdsChange;\n        },\n      },\n    );\n\n    this.startEditRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'editingRowIds', startEditRows);\n    this.stopEditRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'editingRowIds', stopEditRows);\n\n    this.startEditCells = stateHelper.applyFieldReducer\n    .bind(stateHelper, 'editingCells', startEditCells);\n    this.stopEditCells = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'editingCells', stopEditCells);\n\n    this.changeRow = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'rowChanges', changeRow);\n    this.cancelChangedRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'rowChanges', cancelChanges);\n    this.commitChangedRows = ({ rowIds }) => {\n      const { onCommitChanges } = this.props;\n      onCommitChanges({\n        changed: changedRowsByIds(getRowChanges(), rowIds),\n      });\n      this.cancelChangedRows({ rowIds });\n    };\n\n    this.addRow = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'addedRows', addRow);\n    this.changeAddedRow = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'addedRows', changeAddedRow);\n    this.cancelAddedRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'addedRows', cancelAddedRows);\n    this.commitAddedRows = ({ rowIds }) => {\n      const { onCommitChanges } = this.props;\n      onCommitChanges({\n        added: addedRowsByIds(getAddedRows(), rowIds),\n      });\n      this.cancelAddedRows({ rowIds });\n    };\n\n    this.deleteRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'deletedRowIds', deleteRows);\n    this.cancelDeletedRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'deletedRowIds', cancelDeletedRows);\n    this.commitDeletedRows = ({ rowIds }) => {\n      const { onCommitChanges } = this.props;\n      onCommitChanges({ deleted: rowIds });\n      this.cancelDeletedRows({ rowIds });\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      editingRowIds = prevState.editingRowIds,\n      editingCells = prevState.editingCells,\n      rowChanges = prevState.rowChanges,\n      addedRows = prevState.addedRows,\n      deletedRowIds = prevState.deletedRowIds,\n    } = nextProps;\n\n    return {\n      editingRowIds,\n      editingCells,\n      rowChanges,\n      addedRows,\n      deletedRowIds,\n    };\n  }\n\n  render() {\n    const { createRowChange, columnExtensions, columnEditingEnabled } = this.props;\n    const {\n      editingRowIds, editingCells, rowChanges, addedRows, deletedRowIds,\n    } = this.state;\n\n    return (\n      <Plugin\n        name=\"EditingState\"\n      >\n        <Getter\n          name=\"createRowChange\"\n          value={createRowChangeGetter(createRowChange, columnExtensions)}\n        />\n\n        <Getter name=\"editingRowIds\" value={editingRowIds} />\n        <Action name=\"startEditRows\" action={this.startEditRows} />\n        <Action name=\"stopEditRows\" action={this.stopEditRows} />\n\n        <Getter name=\"editingCells\" value={editingCells} />\n        <Action name=\"startEditCells\" action={this.startEditCells} />\n        <Action name=\"stopEditCells\" action={this.stopEditCells} />\n\n        <Getter name=\"rowChanges\" value={rowChanges} />\n        <Action name=\"changeRow\" action={this.changeRow} />\n        <Action name=\"cancelChangedRows\" action={this.cancelChangedRows} />\n        <Action name=\"commitChangedRows\" action={this.commitChangedRows} />\n\n        <Getter name=\"addedRows\" value={addedRows} />\n        <Action name=\"addRow\" action={this.addRow} />\n        <Action name=\"changeAddedRow\" action={this.changeAddedRow} />\n        <Action name=\"cancelAddedRows\" action={this.cancelAddedRows} />\n        <Action name=\"commitAddedRows\" action={this.commitAddedRows} />\n\n        <Getter name=\"deletedRowIds\" value={deletedRowIds} />\n        <Action name=\"deleteRows\" action={this.deleteRows} />\n        <Action name=\"cancelDeletedRows\" action={this.cancelDeletedRows} />\n        <Action name=\"commitDeletedRows\" action={this.commitDeletedRows} />\n\n        <Getter\n          name=\"isColumnEditingEnabled\"\n          value={columnExtensionValueGetter(columnExtensions, columnEditingEnabled)}\n        />\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that manages grid rows' editing state. It arranges grid rows\n * by different lists depending on a row's state.\n * */\nexport const EditingState: React.ComponentType<EditingStateProps> = EditingStateBase;\n","import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper,\n} from '@devexpress/dx-react-core';\nimport { setCurrentPage, setPageSize } from '@devexpress/dx-grid-core';\nimport { PagingStateProps, PagingStateState } from '../types';\n\nclass PagingStateBase extends React.PureComponent<PagingStateProps, PagingStateState> {\n  static defaultProps = {\n    defaultPageSize: 10,\n    defaultCurrentPage: 0,\n  };\n  setCurrentPage: (payload: any) => void;\n  setPageSize: (payload: any) => void;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentPage: props.currentPage || props.defaultCurrentPage,\n      pageSize: props.pageSize !== undefined ? props.pageSize : props.defaultPageSize,\n    };\n\n    const stateHelper = createStateHelper(\n      this,\n      {\n        currentPage: () => {\n          const { onCurrentPageChange } = this.props;\n          return onCurrentPageChange;\n        },\n        pageSize: () => {\n          const { onPageSizeChange } = this.props;\n          return onPageSizeChange;\n        },\n      },\n    );\n\n    this.setCurrentPage = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'currentPage', setCurrentPage);\n    this.setPageSize = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'pageSize', setPageSize);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      currentPage = prevState.currentPage,\n      pageSize = prevState.pageSize,\n    } = nextProps;\n\n    return {\n      currentPage,\n      pageSize,\n    };\n  }\n\n  render() {\n    const { pageSize, currentPage } = this.state;\n\n    return (\n      <Plugin\n        name=\"PagingState\"\n      >\n        <Getter name=\"currentPage\" value={currentPage} />\n        <Getter name=\"pageSize\" value={pageSize} />\n        <Action name=\"setCurrentPage\" action={this.setCurrentPage} />\n        <Action name=\"setPageSize\" action={this.setPageSize} />\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that manages the paging state. It controls the total page count depending on the\n * total row count and the specified page size, controls the currently selected page number\n * and changes it in response to the corresponding actions.\n * */\nexport const PagingState: React.ComponentType<PagingStateProps> = PagingStateBase;\n","import * as React from 'react';\nimport { Getter, Plugin, Getters, Actions } from '@devexpress/dx-react-core';\nimport {\n  paginatedRows, rowsWithPageHeaders, rowCount, currentPage,\n} from '@devexpress/dx-grid-core';\nimport { IntegratedPagingProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'PagingState' },\n];\n\nconst rowsWithHeadersComputed = (\n  { rows, pageSize, getRowLevelKey }: Getters,\n) => rowsWithPageHeaders(rows, pageSize, getRowLevelKey);\nconst totalCountComputed = ({ rows }: Getters) => rowCount(rows);\nconst paginatedRowsComputed = (\n  { rows, pageSize, currentPage: page }: Getters,\n) => paginatedRows(rows, pageSize, page);\nconst currentPageComputed = (\n  { currentPage: page, totalCount, pageSize }: Getters, { setCurrentPage }: Actions,\n) => currentPage(page, totalCount, pageSize, setCurrentPage);\n\n// eslint-disable-next-line react/prefer-stateless-function\nclass IntegratedPagingBase extends React.PureComponent<IntegratedPagingProps> {\n  render() {\n    return (\n      <Plugin\n        name=\"IntegratedPaging\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"rows\" computed={rowsWithHeadersComputed} />\n        <Getter name=\"totalCount\" computed={totalCountComputed} />\n        <Getter name=\"currentPage\" computed={currentPageComputed} />\n        <Getter name=\"rows\" computed={paginatedRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that performs built-in data paging. It also changes the current page if the provided\n * one cannot be applied due to fewer available pages.\n * */\nexport const IntegratedPaging: React.ComponentType<IntegratedPagingProps> = IntegratedPagingBase;\n","import * as React from 'react';\nimport { Getter, Plugin } from '@devexpress/dx-react-core';\nimport { CustomPagingProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'PagingState' },\n];\n\nclass CustomPagingBase extends React.PureComponent<CustomPagingProps> {\n  static defaultProps = {\n    totalCount: 0,\n  };\n\n  render() {\n    const { totalCount } = this.props;\n\n    return (\n      <Plugin\n        name=\"CustomPaging\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"totalCount\" value={totalCount} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that allows implementing a custom totalCount calculation logic. */\nexport const CustomPaging: React.ComponentType<CustomPagingProps> = CustomPagingBase;\n","import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper, StateHelper, ActionFn, Getters, Actions,\n} from '@devexpress/dx-react-core';\nimport {\n  changeColumnGrouping,\n  toggleExpandedGroups,\n  draftColumnGrouping,\n  cancelColumnGroupingDraft,\n  getColumnExtensionValueGetter,\n  adjustSortIndex,\n  ChangeGroupingPayload,\n  ToggleGroupPayload,\n  ChangeSortingPayload,\n} from '@devexpress/dx-grid-core';\nimport { GroupingStateProps, GroupingStateState } from '../types';\n\nconst dependencies = [\n  { name: 'SortingState', optional: true },\n];\n\nconst columnExtensionValueGetter = (\n  columnExtensions, defaultValue,\n) => getColumnExtensionValueGetter(columnExtensions, 'groupingEnabled', defaultValue);\n\nclass GroupingStateBase extends React.PureComponent<GroupingStateProps, GroupingStateState> {\n  static defaultProps = {\n    defaultGrouping: [],\n    defaultExpandedGroups: [],\n    columnGroupingEnabled: true,\n  };\n  stateHelper: StateHelper;\n  draftColumnGrouping: ActionFn<ChangeGroupingPayload>;\n  toggleGroupExpanded: ActionFn<ToggleGroupPayload>;\n  cancelColumnGroupingDraft: ActionFn<void>;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      grouping: props.grouping || props.defaultGrouping,\n      draftGrouping: null,\n      expandedGroups: props.expandedGroups || props.defaultExpandedGroups,\n    };\n\n    this.stateHelper = createStateHelper(\n      this,\n      {\n        grouping: () => {\n          const { onGroupingChange } = this.props;\n          return onGroupingChange;\n        },\n        expandedGroups: () => {\n          const { onExpandedGroupsChange } = this.props;\n          return onExpandedGroupsChange;\n        },\n      },\n    );\n\n    this.changeColumnGrouping = this.changeColumnGrouping.bind(this);\n    this.toggleGroupExpanded = this.stateHelper.applyReducer\n      .bind(this.stateHelper, toggleExpandedGroups);\n    this.draftColumnGrouping = this.stateHelper.applyReducer\n      .bind(this.stateHelper, draftColumnGrouping);\n    this.cancelColumnGroupingDraft = this.stateHelper.applyReducer\n      .bind(this.stateHelper, cancelColumnGroupingDraft);\n    this.changeColumnSorting = this.changeColumnSorting.bind(this);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      grouping = prevState.grouping,\n      expandedGroups = prevState.expandedGroups,\n    } = nextProps;\n\n    return {\n      grouping,\n      expandedGroups,\n    };\n  }\n\n  changeColumnSorting(\n    { columnName, keepOther, ...restParams }: ChangeSortingPayload,\n    { sorting }: Getters,\n    { changeColumnSorting }: Actions,\n  ) {\n    const { grouping } = this.state;\n    const groupingIndex = grouping\n      .findIndex(columnGrouping => columnGrouping.columnName === columnName);\n    if (groupingIndex === -1) {\n      changeColumnSorting({\n        columnName,\n        keepOther: keepOther || grouping.map(columnGrouping => columnGrouping.columnName),\n        ...restParams,\n      });\n      return false;\n    }\n\n    const sortIndex = adjustSortIndex(groupingIndex, grouping, sorting);\n    changeColumnSorting({\n      columnName,\n      sortIndex,\n      keepOther: true,\n      ...restParams,\n    });\n    return false;\n  }\n\n  changeColumnGrouping(\n    { columnName, groupIndex }: ChangeGroupingPayload,\n    getters?: Getters,\n    actions?: Actions,\n  ) {\n    this.stateHelper.applyReducer(\n      changeColumnGrouping,\n      { columnName, groupIndex },\n      (nextState, state) => {\n        const { grouping } = nextState;\n        const { grouping: prevGrouping } = state;\n        const { sorting } = getters!;\n        const { changeColumnSorting } = actions!;\n\n        if (!sorting) return;\n\n        const columnSortingIndex = sorting\n          .findIndex(columnSorting => columnSorting.columnName === columnName);\n        const prevGroupingIndex = prevGrouping\n          .findIndex(columnGrouping => columnGrouping.columnName === columnName);\n        const groupingIndex = grouping\n          .findIndex(columnGrouping => columnGrouping.columnName === columnName);\n\n        if (columnSortingIndex === -1\n          || (prevGroupingIndex === prevGrouping.length - 1 && groupingIndex === -1)) return;\n\n        const sortIndex = adjustSortIndex(\n          groupingIndex === -1 ? grouping.length : groupingIndex,\n          grouping,\n          sorting,\n        );\n\n        if (columnSortingIndex === sortIndex) return;\n\n        changeColumnSorting({\n          sortIndex,\n          keepOther: true,\n          ...sorting[columnSortingIndex],\n        });\n      },\n    );\n  }\n\n  render() {\n    const { grouping, draftGrouping, expandedGroups } = this.state;\n    const { columnExtensions, columnGroupingEnabled } = this.props;\n\n    return (\n      <Plugin\n        name=\"GroupingState\"\n        dependencies={dependencies}\n      >\n        <Getter name=\"grouping\" value={grouping} />\n        <Getter name=\"draftGrouping\" value={draftGrouping || grouping} />\n        <Getter\n          name=\"isColumnGroupingEnabled\"\n          value={columnExtensionValueGetter(columnExtensions, columnGroupingEnabled)}\n        />\n        <Action name=\"changeColumnGrouping\" action={this.changeColumnGrouping} />\n        <Action name=\"draftColumnGrouping\" action={this.draftColumnGrouping} />\n        <Action name=\"cancelColumnGroupingDraft\" action={this.cancelColumnGroupingDraft} />\n\n        <Getter name=\"expandedGroups\" value={expandedGroups} />\n        <Action name=\"toggleGroupExpanded\" action={this.toggleGroupExpanded} />\n\n        <Action name=\"changeColumnSorting\" action={this.changeColumnSorting} />\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that manages the grouping state. It lists columns used for grouping and stores\n * information about expanded/collapsed groups.\n * */\nexport const GroupingState: React.ComponentType<GroupingStateProps> = GroupingStateBase;\n","import * as React from 'react';\nimport { Getter, Plugin, Getters } from '@devexpress/dx-react-core';\nimport {\n  groupRowChecker,\n  groupRowLevelKeyGetter,\n  groupCollapsedRowsGetter,\n  groupedRows,\n  expandedGroupRows,\n  getColumnExtension,\n} from '@devexpress/dx-grid-core';\nimport { IntegratedGroupingProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'GroupingState' },\n];\n\nconst getCollapsedRowsComputed = (\n  { getCollapsedRows }: Getters,\n) => groupCollapsedRowsGetter(getCollapsedRows);\nconst expandedGroupedRowsComputed = (\n  { rows, grouping, expandedGroups, isExporting }: Getters,\n) => expandedGroupRows(rows, grouping, expandedGroups, isExporting);\n\nclass IntegratedGroupingBase extends React.PureComponent<IntegratedGroupingProps> {\n  render() {\n    const { columnExtensions } = this.props;\n    const getColumnCriteria = columnName => (getColumnExtension(\n      columnExtensions, columnName,\n    ) as any).criteria;\n\n    const groupedRowsComputed = (\n      { rows, grouping, getCellValue }: Getters,\n    ) => groupedRows(rows, grouping, getCellValue, getColumnCriteria);\n\n    return (\n      <Plugin\n        name=\"IntegratedGrouping\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"isGroupRow\" value={groupRowChecker} />\n        <Getter name=\"getRowLevelKey\" value={groupRowLevelKeyGetter} />\n        <Getter name=\"getCollapsedRows\" computed={getCollapsedRowsComputed} />\n        <Getter name=\"rows\" computed={groupedRowsComputed} />\n        <Getter name=\"rows\" computed={expandedGroupedRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\n/* tslint:disable: max-line-length */\n/** A plugin that performs built-in grouping and group expanding/collapsing. */\nexport const IntegratedGrouping: React.ComponentType<IntegratedGroupingProps> = IntegratedGroupingBase;\n/* tslint:enable: max-line-length */\n","import * as React from 'react';\nimport { Getter, Plugin, Getters } from '@devexpress/dx-react-core';\nimport {\n  groupRowChecker,\n  groupRowLevelKeyGetter,\n  groupCollapsedRowsGetter,\n  customGroupingRowIdGetter,\n  customGroupedRows,\n  expandedGroupRows,\n} from '@devexpress/dx-grid-core';\nimport { CustomGroupingProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'GroupingState' },\n];\n\nconst getCollapsedRowsComputed = (\n  { getCollapsedRows }: Getters,\n) => groupCollapsedRowsGetter(getCollapsedRows);\nconst expandedGroupedRowsComputed = (\n  { rows, grouping, expandedGroups, isExporting }: Getters,\n) => expandedGroupRows(rows, grouping, expandedGroups, isExporting);\nconst getRowIdComputed = ({ getRowId, rows }: Getters) => customGroupingRowIdGetter(getRowId, rows);\n\nclass CustomGroupingBase extends React.PureComponent<CustomGroupingProps> {\n  render() {\n    const {\n      getChildGroups,\n      grouping: appliedGrouping,\n      expandedGroups: appliedExpandedGroups,\n    } = this.props;\n    const groupedRowsComputed = (\n      { rows, grouping }: Getters,\n    ) => customGroupedRows(rows, grouping, getChildGroups);\n\n    return (\n      <Plugin\n        name=\"CustomGrouping\"\n        dependencies={pluginDependencies}\n      >\n        {appliedGrouping && (\n          <Getter name=\"grouping\" value={appliedGrouping} />\n        )}\n        {appliedExpandedGroups && (\n          <Getter name=\"expandedGroups\" value={appliedExpandedGroups} />\n        )}\n        <Getter name=\"isGroupRow\" value={groupRowChecker} />\n        <Getter name=\"getRowLevelKey\" value={groupRowLevelKeyGetter} />\n        <Getter name=\"getCollapsedRows\" computed={getCollapsedRowsComputed} />\n        <Getter name=\"rows\" computed={groupedRowsComputed} />\n        <Getter name=\"getRowId\" computed={getRowIdComputed} />\n        <Getter name=\"rows\" computed={expandedGroupedRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\n// tslint:disable-next-line: max-line-length\n/** A plugin that converts custom formatted grouped data to a supported format and performs local group expanding/collapsing. */\nexport const CustomGrouping: React.ComponentType<CustomGroupingProps> = CustomGroupingBase;\n","import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper, ActionFn,\n} from '@devexpress/dx-react-core';\nimport { toggleSelection } from '@devexpress/dx-grid-core';\nimport { SelectionStateProps, SelectionStateState } from '../types';\n\nclass SelectionStateBase extends React.PureComponent<SelectionStateProps, SelectionStateState> {\n  static defaultProps = {\n    defaultSelection: [],\n  };\n  toggleSelection: ActionFn<any>;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selection: props.selection || props.defaultSelection,\n    };\n\n    const stateHelper = createStateHelper(\n      this,\n      {\n        selection: () => {\n          const { onSelectionChange } = this.props;\n          return onSelectionChange;\n        },\n      },\n    );\n\n    this.toggleSelection = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'selection', toggleSelection);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      selection = prevState.selection,\n    } = nextProps;\n\n    return {\n      selection,\n    };\n  }\n\n  render() {\n    const { selection } = this.state;\n\n    return (\n      <Plugin\n        name=\"SelectionState\"\n      >\n        <Getter name=\"selection\" value={selection} />\n        <Action name=\"toggleSelection\" action={this.toggleSelection} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that manages the selection state. */\nexport const SelectionState: React.ComponentType<SelectionStateProps> = SelectionStateBase;\n","import * as React from 'react';\nimport { Getter, Action, Plugin, Getters, Actions } from '@devexpress/dx-react-core';\nimport {\n  rowsWithAvailableToSelect,\n  someSelected,\n  allSelected,\n  unwrapSelectedRows,\n} from '@devexpress/dx-grid-core';\nimport { IntegratedSelectionProps } from '../types';\n\nconst rowsWithAvailableToSelectComputed = (\n  { rows, getRowId, isGroupRow }: Getters,\n) => rowsWithAvailableToSelect(rows, getRowId, isGroupRow);\nconst allSelectedComputed = ({ rows, selection }: Getters) => allSelected(rows, selection);\nconst someSelectedComputed = ({ rows, selection }: Getters) => someSelected(rows, selection);\nconst selectAllAvailableComputed = (\n  { rows: { availableToSelect } }: Getters,\n) => !!availableToSelect.length;\n\nconst toggleSelectAll = (\n  state, { rows: { availableToSelect } }: Getters, { toggleSelection }: Actions,\n) => {\n  toggleSelection({ state, rowIds: availableToSelect });\n};\nconst unwrapRowsComputed = ({ rows }: Getters) => unwrapSelectedRows(rows);\n\nconst pluginDependencies = [\n  { name: 'SelectionState' },\n];\n\n// eslint-disable-next-line react/prefer-stateless-function\nclass IntegratedSelectionBase extends React.PureComponent<IntegratedSelectionProps> {\n  render() {\n    return (\n      <Plugin\n        name=\"IntegratedSelection\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"rows\" computed={rowsWithAvailableToSelectComputed} />\n        <Getter name=\"allSelected\" computed={allSelectedComputed} />\n        <Getter name=\"someSelected\" computed={someSelectedComputed} />\n        <Getter name=\"selectAllAvailable\" computed={selectAllAvailableComputed} />\n        <Action name=\"toggleSelectAll\" action={toggleSelectAll} />\n        <Getter name=\"rows\" computed={unwrapRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\n/* tslint:disable: max-line-length */\n/** A plugin that performs built-in selection. */\nexport const IntegratedSelection: React.ComponentType<IntegratedSelectionProps> = IntegratedSelectionBase;\n/* tslint:enable: max-line-length */\n","import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper, ActionFn,\n} from '@devexpress/dx-react-core';\nimport {\n  changeColumnSorting,\n  getColumnExtensionValueGetter,\n  getPersistentSortedColumns,\n  calculateKeepOther,\n  ChangeSortingPayload,\n} from '@devexpress/dx-grid-core';\nimport { SortingStateProps, SortingStateState } from '../types';\n\nconst columnExtensionValueGetter = (\n  columnExtensions, defaultValue,\n) => getColumnExtensionValueGetter(columnExtensions, 'sortingEnabled', defaultValue);\n\nclass SortingStateBase extends React.PureComponent<SortingStateProps, SortingStateState> {\n  static defaultProps = {\n    defaultSorting: [],\n    columnSortingEnabled: true,\n  };\n  changeColumnSorting: ActionFn<ChangeSortingPayload>;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sorting: props.sorting || props.defaultSorting,\n    };\n\n    const stateHelper = createStateHelper(\n      this,\n      {\n        sorting: () => {\n          const { onSortingChange } = this.props;\n          return onSortingChange;\n        },\n      },\n    );\n\n    this.changeColumnSorting = stateHelper.applyReducer\n      .bind(stateHelper, (prevState, payload) => {\n        const { sorting = prevState.sorting } = this.props;\n        const persistentSortedColumns = getPersistentSortedColumns(sorting, props.columnExtensions);\n        const keepOther = calculateKeepOther(\n          prevState.sorting, payload.keepOther, persistentSortedColumns,\n        );\n        return changeColumnSorting(prevState, { ...payload, keepOther });\n      });\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      sorting = prevState.sorting,\n    } = nextProps;\n\n    return {\n      sorting,\n    };\n  }\n\n  render() {\n    const { sorting } = this.state;\n    const { columnExtensions, columnSortingEnabled } = this.props;\n\n    return (\n      <Plugin\n        name=\"SortingState\"\n      >\n        <Getter name=\"sorting\" value={sorting} />\n        <Getter\n          name=\"isColumnSortingEnabled\"\n          value={columnExtensionValueGetter(columnExtensions, columnSortingEnabled)}\n        />\n        <Action name=\"changeColumnSorting\" action={this.changeColumnSorting} />\n      </Plugin>\n    );\n  }\n}\n\n// tslint:disable-next-line: max-line-length\n/** A plugin that manages the sorting state. It controls the list of columns that participate in sorting. */\nexport const SortingState: React.ComponentType<SortingStateProps> = SortingStateBase;\n","import * as React from 'react';\nimport { Getter, Plugin, Getters } from '@devexpress/dx-react-core';\nimport { sortedRows, getColumnExtension } from '@devexpress/dx-grid-core';\nimport { IntegratedSortingProps, IntegratedSorting as IntegratedSortingNs } from '../types';\n\nconst pluginDependencies = [\n  { name: 'SortingState' },\n];\n\nclass IntegratedSortingBase extends React.PureComponent<IntegratedSortingProps> {\n  render() {\n    const { columnExtensions } = this.props;\n    const getColumnCompare = columnName => (\n      getColumnExtension(columnExtensions, columnName) as IntegratedSortingNs.ColumnExtension\n    ).compare!;\n\n    const rowsComputed = (\n      { rows, sorting, getCellValue, isGroupRow, getRowLevelKey }: Getters,\n    ) => sortedRows(rows, sorting, getCellValue, getColumnCompare, isGroupRow, getRowLevelKey);\n\n    return (\n      <Plugin\n        name=\"IntegratedSorting\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"rows\" computed={rowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that performs built-in data sorting. */\nexport const IntegratedSorting: React.ComponentType<IntegratedSortingProps> = IntegratedSortingBase;\n","import * as React from 'react';\nimport { createPortal } from 'react-dom';\nimport {\n  Plugin, Getter, Template, TemplatePlaceholder,\n  TemplateConnector,\n  DragDropProvider as DragDropProviderCore,\n} from '@devexpress/dx-react-core';\nimport { DragDropProviderProps, DragDropProviderState } from '../types';\n\nconst getTargetColumns = (payload, columns) => payload\n  .filter(item => item.type === 'column')\n  .map(item => columns.find(column => column.name === item.columnName));\n\n// tslint:disable-next-line: max-line-length\nclass DragDropProviderBase extends React.PureComponent<DragDropProviderProps, DragDropProviderState> {\n  static components = {\n    containerComponent: 'Container',\n    columnComponent: 'Column',\n  };\n  change: (object) => void;\n  bodyRef!: HTMLElement;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      payload: null,\n      clientOffset: null,\n    };\n\n    this.change = ({ payload, clientOffset }) => this.setState({ payload, clientOffset });\n  }\n\n  componentDidMount() {\n    this.bodyRef = document.body;\n  }\n\n  render() {\n    const {\n      containerComponent: Container,\n      columnComponent: Column,\n    } = this.props;\n    const {\n      payload,\n      clientOffset,\n    } = this.state;\n\n    return (\n      <Plugin\n        name=\"DragDropProvider\"\n      >\n        <Getter name=\"draggingEnabled\" value />\n        <Template name=\"root\">\n          <DragDropProviderCore\n            onChange={this.change}\n          >\n            <TemplatePlaceholder />\n          </DragDropProviderCore>\n          {payload && (\n            <TemplateConnector>\n              {({ columns }) => (\n                createPortal(\n                  <Container\n                    clientOffset={clientOffset!}\n                  >\n                    {getTargetColumns(payload, columns)\n                      .map(column => (\n                        <Column\n                          key={column.name}\n                          column={column}\n                        />\n                      ))\n                    }\n                  </Container>,\n                  this.bodyRef,\n                )\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n// tslint:disable-next-line: max-line-length\n/** A plugin that implements the drag-and-drop functionality and visualizes columns that are being dragged. */\nexport const DragDropProvider: React.ComponentType<DragDropProviderProps> = DragDropProviderBase;\n","import * as React from 'react';\nimport {\n  Getter,\n  Plugin,\n  Template,\n  PlaceholderWithRef,\n  TemplateConnector,\n  DropTarget,\n  withComponents,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  TABLE_DATA_TYPE,\n  TABLE_REORDERING_TYPE,\n  changeColumnOrder,\n  getTableTargetColumnIndex,\n  tableHeaderRowsWithReordering,\n  draftOrder as draftOrderComputed,\n  TargetColumnGeometry,\n  TableColumn,\n} from '@devexpress/dx-grid-core';\nimport { OrderedTableColumns } from './internal/ordered-table-columns';\nimport {\n  Table as TableNS, CellDimensionsGetter, TableColumnReorderingProps,\n  DragOverArgs, TableColumnReorderingState,\n} from '../types';\n\nconst pluginDependencies = [\n  { name: 'Table' },\n  { name: 'DragDropProvider', optional: true },\n];\n\nconst tableHeaderRowsComputed = (\n  { tableHeaderRows }: Getters,\n) => tableHeaderRowsWithReordering(tableHeaderRows);\n\n// tslint:disable-next-line: max-line-length\nclass TableColumnReorderingRaw extends React.PureComponent<TableColumnReorderingProps, TableColumnReorderingState> {\n  static defaultProps = {\n    defaultOrder: [],\n  };\n  static components = {\n    tableContainerComponent: 'TableContainer',\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n  };\n  cellDimensionGetters: { [colName: string]: CellDimensionsGetter } = {};\n  cellDimensions: TargetColumnGeometry[] = [];\n  onOver: (arg: DragOverArgs) => void;\n  onLeave: () => void;\n  onDrop: () => void;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      order: props.defaultOrder,\n      sourceColumnIndex: -1,\n      targetColumnIndex: -1,\n    };\n\n    this.onOver = this.handleOver.bind(this);\n    this.onLeave = this.handleLeave.bind(this);\n    this.onDrop = this.handleDrop.bind(this);\n  }\n\n  getState() {\n    const { order: orderState } = this.state;\n    const {\n      order = orderState,\n    } = this.props;\n    return {\n      ...this.state,\n      order,\n    };\n  }\n\n  getDraftOrder() {\n    const { order, sourceColumnIndex, targetColumnIndex } = this.getState();\n    return draftOrderComputed(order, sourceColumnIndex, targetColumnIndex);\n  }\n\n  getAvailableColumns() {\n    return this.getDraftOrder()\n      .filter(columnName => !!this.cellDimensionGetters[columnName]);\n  }\n\n  cacheCellDimensions() {\n    this.cellDimensions = (this.cellDimensions && this.cellDimensions.length)\n      ? this.cellDimensions\n      : this.getAvailableColumns()\n        .map(columnName => this.cellDimensionGetters[columnName]());\n  }\n\n  resetCellDimensions() {\n    this.cellDimensions = [];\n  }\n\n  ensureCellDimensionGetters(tableColumns: ReadonlyArray<TableColumn>) {\n    Object.keys(this.cellDimensionGetters)\n      .forEach((columnName) => {\n        const columnIndex = tableColumns\n          .findIndex(({ type, column }) => type === TABLE_DATA_TYPE && column!.name === columnName);\n        if (columnIndex === -1) {\n          delete this.cellDimensionGetters[columnName];\n        }\n      });\n  }\n\n// tslint:disable-next-line: max-line-length\n  storeCellDimensionsGetter(tableColumn: Readonly<TableColumn>, getter: CellDimensionsGetter, tableColumns: ReadonlyArray<TableColumn>) {\n    if (tableColumn.type === TABLE_DATA_TYPE) {\n      this.cellDimensionGetters[tableColumn.column!.name] = getter;\n    }\n    this.ensureCellDimensionGetters(tableColumns);\n  }\n\n  handleOver({ payload, clientOffset: { x } }: DragOverArgs) {\n    const sourceColumnName = payload[0].columnName;\n    const availableColumns = this.getAvailableColumns();\n    const relativeSourceColumnIndex = availableColumns.indexOf(sourceColumnName);\n\n    if (relativeSourceColumnIndex === -1) return;\n\n    this.cacheCellDimensions();\n    const cellDimensions = this.cellDimensions;\n\n    const relativeTargetIndex = getTableTargetColumnIndex(cellDimensions, x);\n\n    if (relativeTargetIndex === -1) return;\n\n    const {\n      sourceColumnIndex: prevSourceColumnIndex,\n      targetColumnIndex: prevTargetColumnIndex,\n    } = this.getState();\n    const draftOrder = this.getDraftOrder();\n    const targetColumnIndex = draftOrder.indexOf(availableColumns[relativeTargetIndex]);\n\n    if (targetColumnIndex === prevTargetColumnIndex) return;\n\n    const sourceColumnIndex = prevSourceColumnIndex === -1\n      ? draftOrder.indexOf(sourceColumnName)\n      : prevSourceColumnIndex;\n\n    this.setState({\n      sourceColumnIndex,\n      targetColumnIndex,\n    });\n  }\n\n  handleLeave() {\n    this.setState({\n      sourceColumnIndex: -1,\n      targetColumnIndex: -1,\n    });\n\n    this.resetCellDimensions();\n  }\n\n  handleDrop() {\n    const { sourceColumnIndex, targetColumnIndex, order } = this.getState();\n    const { onOrderChange } = this.props;\n\n    if (sourceColumnIndex === -1 && targetColumnIndex === -1) return;\n\n    const nextOrder = changeColumnOrder(order, {\n      sourceColumnName: order[sourceColumnIndex],\n      targetColumnName: order[targetColumnIndex],\n    }) as string[];\n\n    this.setState({\n      order: nextOrder,\n      sourceColumnIndex: -1,\n      targetColumnIndex: -1,\n    });\n\n    if (onOrderChange) {\n      onOrderChange(nextOrder);\n    }\n\n    this.resetCellDimensions();\n  }\n\n  render() {\n    const {\n      tableContainerComponent: Container,\n      rowComponent: Row,\n      cellComponent: Cell,\n    } = this.props;\n\n    this.cellDimensionGetters = {};\n\n    return (\n      <Plugin\n        name=\"TableColumnReordering\"\n        dependencies={pluginDependencies}\n      >\n        <OrderedTableColumns order={this.getDraftOrder()} />\n\n        <Getter name=\"tableHeaderRows\" computed={tableHeaderRowsComputed} />\n        <Template name=\"table\">\n          {params => (\n            <TemplateConnector>\n              {({ draggingEnabled }) => (\n                <Container\n                  {...params}\n                  onOver={this.onOver}\n                  onLeave={this.onLeave}\n                  onDrop={this.onDrop}\n                  draggingEnabled={draggingEnabled}\n                >\n                  <PlaceholderWithRef />\n                </Container>\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: Getters) => tableRow.type === TABLE_REORDERING_TYPE}\n        >\n          {params => (\n            <Row {...params} />\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow }: Getters) => tableRow.type === TABLE_REORDERING_TYPE}\n        >\n          {(params: TableNS.CellProps) => (\n            <TemplateConnector>\n              {({ tableColumns }: Getters) => (\n                <Cell\n                  {...params}\n                  getCellDimensions={getter => this.storeCellDimensionsGetter(\n                    params.tableColumn, getter, tableColumns,\n                  )}\n                />\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nconst TableContainer = ({\n  onOver, onLeave, onDrop, children, draggingEnabled,\n}) => (\n  draggingEnabled ? (\n    <DropTarget\n      onOver={onOver}\n      onLeave={onLeave}\n      onDrop={onDrop}\n    >\n      {children}\n    </DropTarget>\n  ) : children\n);\n\n/** A plugin that manages the displayed columns' order. */\nexport const TableColumnReordering: React.ComponentType<TableColumnReorderingProps>\n  = withComponents({ TableContainer })(TableColumnReorderingRaw);\n","import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Getter,\n  Template,\n  TemplatePlaceholder,\n  TemplateConnector,\n  Plugin,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  tableRowsWithDataRows,\n  tableCellColSpanGetter,\n  isNoDataTableRow,\n  isNoDataTableCell,\n  isDataTableCell,\n  isHeaderStubTableCell,\n  isDataTableRow,\n  TABLE_DATA_TYPE,\n  TABLE_NODATA_TYPE,\n} from '@devexpress/dx-grid-core';\nimport { TableProps, Table as TableNS, TableLayoutProps } from '../types';\nimport { TableColumnsWithDataRowsGetter } from './internal/table-columns-getter';\n\nconst RowPlaceholder = React.forwardRef((props, ref) => (\n  <TemplatePlaceholder name=\"tableRow\" params={{ ...props, ref }} />\n));\nconst CellPlaceholder = props => <TemplatePlaceholder name=\"tableCell\" params={props} />;\n\nconst tableHeaderRows = [];\nconst tableBodyRowsComputed = ({ rows, getRowId, isDataLoading }: Getters) => (\n  tableRowsWithDataRows(rows, getRowId, isDataLoading)\n);\nconst tableFooterRows = [];\n\nconst defaultMessages = {\n  noData: 'No data',\n};\n\nclass TableBase extends React.PureComponent<TableProps> {\n  static COLUMN_TYPE = TABLE_DATA_TYPE;\n  static ROW_TYPE = TABLE_DATA_TYPE;\n  static NODATA_ROW_TYPE = TABLE_NODATA_TYPE;\n  static defaultProps = {\n    messages: {},\n  };\n  static components = {\n    tableComponent: 'Table',\n    headComponent: 'TableHead',\n    bodyComponent: 'TableBody',\n    footerComponent: 'TableFooter',\n    containerComponent: 'Container',\n    layoutComponent: 'Layout',\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n    noDataRowComponent: 'NoDataRow',\n    noDataCellComponent: 'NoDataCell',\n    stubRowComponent: 'StubRow',\n    stubCellComponent: 'StubCell',\n    stubHeaderCellComponent: 'StubHeaderCell',\n  };\n\n  render() {\n    const {\n      layoutComponent: Layout,\n      cellComponent: Cell,\n      rowComponent: Row,\n      noDataRowComponent: NoDataRow,\n      noDataCellComponent: NoDataCell,\n      stubRowComponent: StubRow,\n      stubCellComponent: StubCell,\n      stubHeaderCellComponent: StubHeaderCell,\n      columnExtensions,\n      messages,\n      containerComponent,\n      tableComponent,\n      headComponent,\n      bodyComponent,\n      footerComponent,\n    } = this.props;\n\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n\n    return (\n      <Plugin\n        name=\"Table\"\n      >\n        <Getter name=\"tableHeaderRows\" value={tableHeaderRows} />\n        <Getter name=\"tableBodyRows\" computed={tableBodyRowsComputed} />\n        <Getter name=\"tableFooterRows\" value={tableFooterRows} />\n        <TableColumnsWithDataRowsGetter columnExtensions={columnExtensions} />\n        <Getter name=\"getTableCellColSpan\" value={tableCellColSpanGetter} />\n\n        <Template name=\"body\">\n          <TemplatePlaceholder name=\"table\" />\n        </Template>\n        <Template name=\"table\">\n          {params => (\n            <TemplateConnector>\n              {({\n                tableHeaderRows: headerRows,\n                tableBodyRows: bodyRows,\n                tableFooterRows: footerRows,\n                tableColumns: columns,\n                getTableCellColSpan,\n              }) => (\n                <TemplatePlaceholder\n                  name=\"tableLayout\"\n                  params={{\n                    ...params,\n                    tableComponent,\n                    headComponent,\n                    bodyComponent,\n                    footerComponent,\n                    containerComponent,\n                    headerRows,\n                    bodyRows,\n                    footerRows,\n                    columns,\n                    rowComponent: RowPlaceholder,\n                    cellComponent: CellPlaceholder,\n                    getCellColSpan: getTableCellColSpan,\n                  }}\n                />\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template name=\"tableLayout\">\n          {(params: TableLayoutProps) => (\n            <Layout {...params} />\n          )}\n        </Template>\n        <Template name=\"tableCell\">\n          {(params: TableNS.CellProps) => (\n            <TemplateConnector>\n              {(\n                { tableHeaderRows: headerRows },\n              ) => (isHeaderStubTableCell(params.tableRow, headerRows)\n                ? <StubHeaderCell {...params} />\n                : <StubCell {...params} />\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }: any) => isDataTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableNS.CellProps) => (\n            <TemplateConnector>\n              {({ getCellValue }) => {\n                const columnName = params.tableColumn.column!.name;\n                const value = getCellValue(params.tableRow.row, columnName);\n                return (\n                  <TemplatePlaceholder\n                    name=\"valueFormatter\"\n                    params={{\n                      value,\n                      row: params.tableRow.row,\n                      column: params.tableColumn.column,\n                    }}\n                  >\n                    {content => (\n                      <Cell\n                        {...params}\n                        row={params.tableRow.row}\n                        column={params.tableColumn.column!}\n                        value={value}\n                      >\n                        {content}\n                      </Cell>\n                    )}\n                  </TemplatePlaceholder>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow }: any) => !!isNoDataTableRow(tableRow)}\n        >\n          {(params: TableNS.CellProps) => (\n            <TemplateConnector>\n              {({ tableColumns }) => {\n                if (isNoDataTableCell(params.tableColumn, tableColumns)) {\n                  return (\n                    <NoDataCell\n                      {...params}\n                      getMessage={getMessage}\n                    />\n                  );\n                }\n                return null;\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template name=\"tableRow\">\n          {(params: TableNS.RowProps) => (\n            <StubRow {...params} />\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isDataTableRow(tableRow)}\n        >\n          {(params: TableNS.RowProps) => (\n            <Row\n              {...params}\n              row={params.tableRow.row}\n            />\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isNoDataTableRow(tableRow)}\n        >\n          {(params: TableNS.RowProps) => <NoDataRow {...params} />}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that renders Grid data as a table. This plugin enables you to customize\n * table rows and columns, and contains the Table Row and Table Cell components\n * that can be extended by other plugins\n * */\nexport const Table: React.ComponentType<TableProps> & {\n  /** The data column type's indentifier. */\n  COLUMN_TYPE: symbol;\n  /** The data row type's indentifier. */\n  ROW_TYPE: symbol;\n  /** The nodata row type's indentifier. */\n  NODATA_ROW_TYPE: symbol;\n} = TableBase;\n","import * as React from 'react';\nimport {\n  Getter, Template, Plugin,\n  TemplateConnector,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  TABLE_SELECT_TYPE,\n  tableColumnsWithSelection,\n  isSelectTableCell,\n  isSelectAllTableCell,\n  isDataTableRow,\n  isRowHighlighted,\n} from '@devexpress/dx-grid-core';\nimport { TableSelectionProps, TableCellProps, TableRowProps } from '../types';\n\nclass TableSelectionBase extends React.PureComponent<TableSelectionProps> {\n  static defaultProps = {\n    highlightRow: false,\n    selectByRowClick: false,\n    showSelectAll: false,\n    showSelectionColumn: true,\n  };\n  static components = {\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n    headerCellComponent: 'HeaderCell',\n  };\n  static COLUMN_TYPE = TABLE_SELECT_TYPE;\n\n  render() {\n    const {\n      highlightRow,\n      selectByRowClick,\n      showSelectionColumn,\n      showSelectAll,\n      headerCellComponent: HeaderCell,\n      cellComponent: Cell,\n      rowComponent: Row,\n      selectionColumnWidth,\n    } = this.props;\n\n    const tableColumnsComputed = (\n      { tableColumns }: Getters,\n    ) => tableColumnsWithSelection(tableColumns, selectionColumnWidth, showSelectionColumn);\n\n    return (\n      <Plugin\n        name=\"TableSelection\"\n        dependencies={[\n          { name: 'Table' },\n          { name: 'SelectionState' },\n          { name: 'IntegratedSelection', optional: !showSelectAll },\n        ]}\n      >\n        <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n        {highlightRow && (\n          <Getter name=\"highlightSelectedRow\" value />\n        )}\n\n        {(showSelectionColumn && showSelectAll) && (\n          <Template\n            name=\"tableCell\"\n            predicate={({\n              tableRow, tableColumn,\n            }: any) => isSelectAllTableCell(tableRow, tableColumn)}\n          >\n            {(params: TableCellProps) => (\n              <TemplateConnector>\n                {({ selectAllAvailable, allSelected, someSelected }, { toggleSelectAll }) => (\n                  <HeaderCell\n                    {...params}\n                    disabled={!selectAllAvailable}\n                    allSelected={allSelected}\n                    someSelected={someSelected}\n                    onToggle={select => toggleSelectAll(select)}\n                  />\n                )}\n              </TemplateConnector>\n            )}\n          </Template>\n        )}\n        {showSelectionColumn && (\n          <Template\n            name=\"tableCell\"\n            predicate={({ tableRow, tableColumn }: any) => isSelectTableCell(tableRow, tableColumn)}\n          >\n            {(params: TableCellProps) => (\n              <TemplateConnector>\n                {({ selection }, { toggleSelection }) => (\n                  <Cell\n                    {...params}\n                    row={params.tableRow.row}\n                    selected={selection.indexOf(params.tableRow.rowId) !== -1}\n                    onToggle={() => toggleSelection({ rowIds: [params.tableRow.rowId] })}\n                  />\n                )}\n              </TemplateConnector>\n            )}\n          </Template>\n        )}\n        {(highlightRow || selectByRowClick) && (\n          <Template\n            name=\"tableRow\"\n            predicate={({ tableRow }: any) => !!isDataTableRow(tableRow)}\n          >\n            {(params: TableRowProps) => (\n              <TemplateConnector>\n                {({ selection }, { toggleSelection }) => (\n                  <Row\n                    {...params}\n                    selectByRowClick={selectByRowClick}\n                    highlighted={isRowHighlighted(highlightRow!, selection, params.tableRow)}\n                    onToggle={() => toggleSelection({ rowIds: [params.tableRow.rowId] })}\n                  />\n                )}\n              </TemplateConnector>\n            )}\n          </Template>\n        )}\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that visualizes table rows' selection state by rendering selection checkboxes\n * and highlighting the selected rows.\n * */\nexport const TableSelection: React.ComponentType<TableSelectionProps> & {\n  /** The selection column type's indentifier. */\n  COLUMN_TYPE: symbol;\n} = TableSelectionBase;\n","import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper, ActionFn,\n} from '@devexpress/dx-react-core';\nimport { toggleDetailRowExpanded, ToggleRowPayload } from '@devexpress/dx-grid-core';\nimport { RowDetailStateProps, RowDetailStateState } from '../types';\n\n// tslint:disable-next-line: max-line-length\nclass RowDetailStateBase extends React.PureComponent<RowDetailStateProps, RowDetailStateState> {\n  static defaultProps = {\n    defaultExpandedRowIds: [],\n  };\n  toggleDetailRowExpanded: ActionFn<ToggleRowPayload>;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      expandedRowIds: props.expandedRowIds || props.defaultExpandedRowIds,\n    };\n\n    const stateHelper = createStateHelper(\n      this,\n      {\n        expandedRowIds: () => {\n          const { onExpandedRowIdsChange } = this.props;\n          return onExpandedRowIdsChange;\n        },\n      },\n    );\n\n    this.toggleDetailRowExpanded = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'expandedRowIds', toggleDetailRowExpanded);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      expandedRowIds = prevState.expandedRowIds,\n    } = nextProps;\n\n    return {\n      expandedRowIds,\n    };\n  }\n\n  render() {\n    const { expandedRowIds } = this.state;\n\n    return (\n      <Plugin\n        name=\"RowDetailState\"\n      >\n        <Getter name=\"expandedDetailRowIds\" value={expandedRowIds} />\n        <Action name=\"toggleDetailRowExpanded\" action={this.toggleDetailRowExpanded} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that manages the expanded state for table row details. */\nexport const RowDetailState: React.ComponentType<RowDetailStateProps> = RowDetailStateBase;\n","import * as React from 'react';\nimport {\n  Getter, Template, Plugin, TemplateConnector, Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  tableRowsWithExpandedDetail,\n  tableDetailCellColSpanGetter,\n  isDetailRowExpanded,\n  tableColumnsWithDetail,\n  isDetailToggleTableCell,\n  isDetailTableRow,\n  isDetailTableCell,\n  TABLE_DETAIL_TYPE,\n} from '@devexpress/dx-grid-core';\nimport { TableRowDetailProps, TableCellProps, TableRowProps } from '../types';\n\nconst getCellColSpanComputed = (\n  { getTableCellColSpan }: Getters,\n) => tableDetailCellColSpanGetter(getTableCellColSpan);\n\nconst pluginDependencies = [\n  { name: 'RowDetailState' },\n  { name: 'Table' },\n];\n\nclass TableRowDetailBase extends React.PureComponent<TableRowDetailProps> {\n  static ROW_TYPE = TABLE_DETAIL_TYPE;\n  static COLUMN_TYPE = TABLE_DETAIL_TYPE;\n  static defaultProps = {\n    contentComponent: () => null,\n  };\n  static components = {\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n    toggleCellComponent: 'ToggleCell',\n  };\n\n  render() {\n    const {\n      rowHeight,\n      contentComponent: Content,\n      toggleCellComponent: ToggleCell,\n      cellComponent: Cell,\n      rowComponent: Row,\n      toggleColumnWidth,\n    } = this.props;\n\n    const tableColumnsComputed = (\n      { tableColumns }: Getters,\n    ) => tableColumnsWithDetail(tableColumns, toggleColumnWidth);\n    const tableBodyRowsComputed = (\n      { tableBodyRows, expandedDetailRowIds }: Getters,\n    ) => tableRowsWithExpandedDetail(tableBodyRows, expandedDetailRowIds, rowHeight!);\n\n    return (\n      <Plugin\n        name=\"TableRowDetail\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n        <Getter name=\"tableBodyRows\" computed={tableBodyRowsComputed} />\n        <Getter name=\"getTableCellColSpan\" computed={getCellColSpanComputed} />\n\n        <Template\n          name=\"tableCell\"\n          predicate={(\n            { tableRow, tableColumn }: any,\n          ) => isDetailToggleTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({ expandedDetailRowIds }, { toggleDetailRowExpanded }) => (\n                <ToggleCell\n                  {...params}\n                  row={params.tableRow.row}\n                  expanded={isDetailRowExpanded(expandedDetailRowIds, params.tableRow.rowId!)}\n                  onToggle={() => toggleDetailRowExpanded({ rowId: params.tableRow.rowId })}\n                />\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow }: any) => !!isDetailTableRow(tableRow)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({ tableColumns }) => {\n                if (isDetailTableCell(params.tableColumn, tableColumns)) {\n                  return (\n                    <Cell\n                      {...params}\n                      row={params.tableRow.row}\n                    >\n                      {Content && <Content row={params.tableRow.row} />}\n                    </Cell>\n                  );\n                }\n                return null;\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isDetailTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => (\n            <Row\n              {...params}\n              row={params.tableRow.row}\n            />\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders detail rows. */\nexport const TableRowDetail: React.ComponentType<TableRowDetailProps> & {\n  /** The detail column type's identifier. */\n  COLUMN_TYPE: symbol;\n  /** The detail row type's indentifier. */\n  ROW_TYPE: symbol;\n} = TableRowDetailBase;\n","export const defaultSummaryMessages = {\n  sum: 'Sum',\n  min: 'Min',\n  max: 'Max',\n  avg: 'Avg',\n  count: 'Count',\n};\n","import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  defaultFormatlessSummaries, ColumnSummary,\n} from '@devexpress/dx-grid-core';\nimport { TemplatePlaceholder } from '@devexpress/dx-react-core';\nimport { TableSummaryContentProps, SummaryItemProps } from '../../types';\nimport { defaultSummaryMessages } from './constants';\n\nexport const TableSummaryContent: React.SFC<TableSummaryContentProps> = ({\n  column, columnSummaries, formatlessSummaryTypes,\n  itemComponent: Item,\n  messages,\n}) => {\n  const getMessage = getMessagesFormatter({ ...defaultSummaryMessages, ...messages });\n  const SummaryItem: React.SFC<SummaryItemProps> = ({ summary, children }) => (\n    <Item\n      getMessage={getMessage}\n      type={summary.type}\n      value={summary.value}\n    >\n      {children || String(summary.value)}\n    </Item>\n  );\n  const isFormatlessSummary = (summary: ColumnSummary) => (\n    summary.value === null\n    || formatlessSummaryTypes.includes(summary.type)\n    || defaultFormatlessSummaries.includes(summary.type)\n  );\n\n  return (\n    <React.Fragment>\n      {columnSummaries.map((summary) => {\n        if (isFormatlessSummary(summary)) {\n          return <SummaryItem key={summary.type} summary={summary} />;\n        }\n        return (\n          <TemplatePlaceholder\n            key={summary.type}\n            name=\"valueFormatter\"\n            params={{\n              column,\n              value: summary.value,\n            }}\n          >\n            {content => (\n              <SummaryItem summary={summary}>\n                {content}\n              </SummaryItem>\n            )}\n          </TemplatePlaceholder>\n        );\n      })}\n    </React.Fragment>\n  );\n};\n","import * as React from 'react';\nimport { TemplatePlaceholder } from '@devexpress/dx-react-core';\nimport { getGroupInlineSummaries } from '@devexpress/dx-grid-core';\nimport { GetInlineSummaryComponent, FlattenGroupInlineSummariesFn } from '../../types';\n\nconst getInlineSummaryComponent: GetInlineSummaryComponent = (\n  column, summary, formatlessSummaries,\n) => () => (\n  (summary.value === null || formatlessSummaries.includes(summary.type))\n    ? <>{summary.value}</>\n    : (\n      <TemplatePlaceholder\n        key={summary.type}\n        name=\"valueFormatter\"\n        params={{\n          column,\n          value: summary.value,\n        }}\n      >\n        {content => content || summary.value}\n      </TemplatePlaceholder>\n    )\n);\n\nexport const flattenGroupInlineSummaries: FlattenGroupInlineSummariesFn = (\n  columns, tableRow, groupSummaryItems, groupSummaryValues,\n  formatlessSummaries,\n) => (\n  getGroupInlineSummaries(\n    groupSummaryItems, columns,\n    groupSummaryValues[tableRow.row.compoundKey],\n  )\n    .map(colSummaries => ([\n      ...colSummaries.summaries.map(summary => ({\n        ...summary,\n        columnTitle: colSummaries.column.title,\n        messageKey: `${summary.type}Of`,\n        component: getInlineSummaryComponent(\n          colSummaries.column, summary, formatlessSummaries,\n        ),\n      })),\n    ]))\n    .reduce((acc, summaries) => acc.concat(summaries), [])\n);\n","import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Getter, Template, Plugin, TemplatePlaceholder, TemplateConnector, Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  tableRowsWithGrouping,\n  tableGroupCellColSpanGetter,\n  isGroupTableCell,\n  isGroupIndentTableCell,\n  isGroupTableRow,\n  TABLE_GROUP_TYPE,\n  getColumnSummaries,\n  defaultFormatlessSummaries,\n  isPreviousCellContainSummary,\n  isRowSummaryCell,\n  isGroupRowOrdinaryCell,\n  calculateGroupCellIndent,\n  isGroupIndentStubTableCell,\n  GroupSummaryItem,\n  TABLE_FLEX_TYPE,\n} from '@devexpress/dx-grid-core';\nimport { TableColumnsWithGrouping } from './internal';\nimport {\n  TableGroupRowProps, TableCellProps, TableRowProps,\n} from '../types';\nimport { TableSummaryContent } from '../components/summary/table-summary-content';\nimport { flattenGroupInlineSummaries } from '../components/summary/group-summaries';\n\nconst pluginDependencies = [\n  { name: 'GroupingState' },\n  { name: 'Table' },\n  { name: 'DataTypeProvider', optional: true },\n  { name: 'SummaryState', optional: true },\n  { name: 'CustomSummary', optional: true },\n  { name: 'IntegratedSummary', optional: true },\n  { name: 'Table' },\n  { name: 'DataTypeProvider', optional: true },\n  { name: 'TableSelection', optional: true },\n];\nconst side = 'left';\n\n/** @internal */\nexport const defaultMessages = {\n  countOf: 'Count: ',\n  sumOf: 'Sum of {columnTitle} is ',\n  maxOf: 'Max of {columnTitle} is ',\n  minOf: 'Min of {columnTitle} is ',\n  avgOf: 'Avg of {columnTitle} is ',\n};\n\nconst tableBodyRowsComputed = (\n  { tableBodyRows, isGroupRow }: Getters,\n) => tableRowsWithGrouping(tableBodyRows, isGroupRow);\nconst getCellColSpanComputed = (\n  { getTableCellColSpan, groupSummaryItems, viewport }: Getters,\n) => {\n  const firstVisibleColumnIndex = viewport?.columns[0][0];\n  return tableGroupCellColSpanGetter(\n    getTableCellColSpan,\n    groupSummaryItems,\n    firstVisibleColumnIndex,\n  );\n};\n\nclass TableGroupRowBase extends React.PureComponent<TableGroupRowProps> {\n  static ROW_TYPE = TABLE_GROUP_TYPE;\n  static COLUMN_TYPE = TABLE_GROUP_TYPE;\n  static defaultProps = {\n    showColumnsWhenGrouped: false,\n    formatlessSummaryTypes: [],\n  };\n  static components = {\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n    contentComponent: 'Content',\n    iconComponent: 'Icon',\n    containerComponent: 'Container',\n    indentCellComponent: 'IndentCell',\n    inlineSummaryComponent: 'InlineSummary',\n    inlineSummaryItemComponent: 'InlineSummaryItem',\n    summaryCellComponent: 'SummaryCell',\n    summaryItemComponent: 'SummaryItem',\n    stubCellComponent: 'StubCell',\n  };\n\n  render() {\n    const {\n      cellComponent: GroupCell,\n      contentComponent: Content,\n      iconComponent: Icon,\n      rowComponent: GroupRow,\n      containerComponent: Container,\n      indentCellComponent: GroupIndentCell,\n      inlineSummaryComponent: InlineSummary,\n      inlineSummaryItemComponent: InlineSummaryItem,\n      summaryCellComponent: SummaryCell,\n      summaryItemComponent: SummaryItem,\n      stubCellComponent: StubCell,\n      indentColumnWidth,\n      contentCellPadding,\n      showColumnsWhenGrouped,\n      columnExtensions,\n      messages,\n      formatlessSummaryTypes,\n    } = this.props;\n\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n\n    return (\n      <Plugin\n        name=\"TableGroupRow\"\n        dependencies={pluginDependencies}\n      >\n        <TableColumnsWithGrouping\n          columnExtensions={columnExtensions}\n          showColumnsWhenGrouped={showColumnsWhenGrouped}\n          indentColumnWidth={indentColumnWidth}\n        />\n        <Getter name=\"tableBodyRows\" computed={tableBodyRowsComputed} />\n        <Getter name=\"getTableCellColSpan\" computed={getCellColSpanComputed} />\n\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow }: any) => isGroupTableRow(tableRow)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {(\n                {\n                  grouping, expandedGroups, groupSummaryItems, groupSummaryValues, columns,\n                },\n                { toggleGroupExpanded },\n              ) => {\n                if (isGroupTableCell(params.tableRow, params.tableColumn)) {\n                  const formatlessSummaries = defaultFormatlessSummaries\n                    .concat(formatlessSummaryTypes!);\n\n                  const inlineSummaries = groupSummaryItems\n                    ? flattenGroupInlineSummaries(\n                      columns, params.tableRow, groupSummaryItems,\n                      groupSummaryValues, formatlessSummaries,\n                    ) : [];\n                  const cellIndent = calculateGroupCellIndent(\n                    params.tableColumn, grouping, indentColumnWidth,\n                  );\n                  const contentIndent = `calc(${cellIndent}px + ${contentCellPadding})`;\n\n                  return (\n                    <TemplatePlaceholder\n                      name=\"valueFormatter\"\n                      params={{\n                        column: params.tableColumn.column,\n                        value: params.tableRow.row.value,\n                      }}\n                    >\n                      {content => (\n                        <GroupCell\n                          {...params}\n                          contentComponent={Content}\n                          iconComponent={Icon}\n                          containerComponent={Container}\n                          row={params.tableRow.row}\n                          column={params.tableColumn.column!}\n                          expanded={expandedGroups.indexOf(params.tableRow.row.compoundKey) !== -1}\n                          onToggle={\n                            () => toggleGroupExpanded({ groupKey: params.tableRow.row.compoundKey })\n                          }\n                          inlineSummaries={inlineSummaries}\n                          inlineSummaryComponent={InlineSummary}\n                          inlineSummaryItemComponent={InlineSummaryItem}\n                          getMessage={getMessage}\n                          position={contentIndent}\n                          side={side}\n                        >\n                          {content}\n                        </GroupCell>\n                      )}\n                    </TemplatePlaceholder>\n                  );\n                }\n                if (isGroupIndentTableCell(params.tableRow, params.tableColumn, grouping)) {\n                  const fixedProps = {\n                    side,\n                    position: calculateGroupCellIndent(\n                      params.tableColumn, grouping, indentColumnWidth,\n                    ),\n                  };\n                  if (GroupIndentCell) {\n                    return (\n                      <GroupIndentCell\n                        {...params}\n                        {...fixedProps}\n                        row={params.tableRow.row}\n                        column={params.tableColumn.column!}\n                      />\n                    );\n                  }\n                  return <TemplatePlaceholder params={fixedProps} />;\n                }\n                if (isGroupIndentStubTableCell(params.tableRow, params.tableColumn, grouping)) {\n                  return <TemplatePlaceholder params={params} />;\n                }\n                return null;\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({\n            tableRow, tableColumn,\n          }: any) => (isGroupRowOrdinaryCell(tableRow, tableColumn))}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {(\n                {\n                  groupSummaryItems, groupSummaryValues, grouping, tableColumns,\n                },\n                { toggleGroupExpanded },\n              ) => {\n                const { tableColumn, tableRow } = params;\n                const onToggle = () => toggleGroupExpanded({ groupKey: tableRow.row.compoundKey });\n\n                if (isRowSummaryCell(tableRow, tableColumn, grouping, groupSummaryItems)) {\n                  const columnSummaries = getColumnSummaries(\n                    groupSummaryItems,\n                    tableColumn.column!.name,\n                    groupSummaryValues[tableRow.row.compoundKey],\n                    summaryItem => (\n                      !(summaryItem as GroupSummaryItem).showInGroupFooter! &&\n                      (summaryItem as GroupSummaryItem).alignByColumn!\n                    ),\n                  );\n\n                  return (\n                    <SummaryCell\n                      {...params}\n                      row={params.tableRow.row}\n                      column={params.tableColumn.column!}\n                      onToggle={onToggle}\n                    >\n                      <TableSummaryContent\n                        column={tableColumn.column!}\n                        columnSummaries={columnSummaries}\n                        formatlessSummaryTypes={formatlessSummaryTypes!}\n                        itemComponent={SummaryItem}\n                        messages={messages!}\n                      />\n                    </SummaryCell>\n                  );\n                }\n\n                // NOTE: ensure that right-aligned summary will fit into a column\n                if (isPreviousCellContainSummary(\n                  tableRow, tableColumn, tableColumns, grouping, groupSummaryItems,\n                ) || TABLE_FLEX_TYPE === tableColumn.type) {\n                  return <StubCell {...params} onToggle={onToggle} />;\n                }\n\n                return <TemplatePlaceholder />;\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => isGroupTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => (\n            <GroupRow\n              {...params}\n              row={params.tableRow.row}\n            />\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders group rows and enables them to expand and collapse. */\nexport const TableGroupRow: React.ComponentType<TableGroupRowProps> & {\n  /** The group column type's identifier. */\n  COLUMN_TYPE: symbol;\n  /** The group row type's identifier. */\n  ROW_TYPE: symbol;\n} = TableGroupRowBase;\n","import * as React from 'react';\nimport {\n  Getter, Template, Plugin, TemplateConnector, TemplatePlaceholder, Getters,\n} from '@devexpress/dx-react-core';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  getColumnSortingDirection,\n  tableRowsWithHeading,\n  isHeadingTableCell,\n  isHeadingTableRow,\n  getNextColumnName,\n  TABLE_DATA_TYPE,\n  TABLE_HEADING_TYPE,\n} from '@devexpress/dx-grid-core';\nimport { TableHeaderRowProps, TableCellProps, TableRowProps } from '../types';\n\nconst tableHeaderRowsComputed = (\n  { tableHeaderRows }: Getters,\n) => tableRowsWithHeading(tableHeaderRows || []);\n\nclass TableHeaderRowBase extends React.PureComponent<TableHeaderRowProps> {\n  static ROW_TYPE = TABLE_HEADING_TYPE;\n  static defaultProps = {\n    showSortingControls: false,\n    showGroupingControls: false,\n    messages: {},\n  };\n  static components = {\n    cellComponent: 'Cell',\n    rowComponent: 'Row',\n    contentComponent: 'Content',\n    sortLabelComponent: 'SortLabel',\n    titleComponent: 'Title',\n    groupButtonComponent: 'GroupButton',\n  };\n\n  render() {\n    const {\n      showSortingControls,\n      showGroupingControls,\n      cellComponent: HeaderCell,\n      rowComponent: HeaderRow,\n      contentComponent: Content,\n      sortLabelComponent: SortLabel,\n      groupButtonComponent: GroupButton,\n      titleComponent: Title,\n      messages,\n    } = this.props;\n    const getMessage = getMessagesFormatter(messages!);\n\n    return (\n      <Plugin\n        name=\"TableHeaderRow\"\n        dependencies={[\n          { name: 'Table' },\n          { name: 'SortingState', optional: !showSortingControls },\n          { name: 'GroupingState', optional: !showGroupingControls },\n          { name: 'DragDropProvider', optional: true },\n          { name: 'TableColumnResizing', optional: true },\n        ]}\n      >\n        <Getter name=\"tableHeaderRows\" computed={tableHeaderRowsComputed} />\n\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }: any) => isHeadingTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({\n                sorting, tableColumns, draggingEnabled, tableColumnResizingEnabled,\n                isColumnSortingEnabled, isColumnGroupingEnabled, columnResizingMode,\n              }, {\n                changeColumnSorting, changeColumnGrouping,\n                changeTableColumnWidth, draftTableColumnWidth, cancelTableColumnWidthDraft,\n                storeWidthGetters = () => {},\n              }) => {\n                const { name: columnName, title: columnTitle } = params.tableColumn.column!;\n                const atLeastOneDataColumn = tableColumns\n                  .filter(({ type }) => type === TABLE_DATA_TYPE).length > 1;\n                const sortingEnabled = isColumnSortingEnabled\n                  && isColumnSortingEnabled(columnName);\n                const groupingEnabled = isColumnGroupingEnabled\n                  && isColumnGroupingEnabled(columnName)\n                  && atLeastOneDataColumn;\n                const nextColumnName = getNextColumnName(tableColumns, columnName);\n\n                return (\n                  <HeaderCell\n                    {...params}\n                    column={params.tableColumn.column!}\n                    draggingEnabled={draggingEnabled && atLeastOneDataColumn}\n                    resizingEnabled={\n                      tableColumnResizingEnabled\n                      && (!!nextColumnName || columnResizingMode === 'widget')\n                    }\n                    onWidthChange={({ shift }) => changeTableColumnWidth({\n                      columnName, nextColumnName, shift,\n                    })}\n                    onWidthDraft={({ shift }) => draftTableColumnWidth({\n                      columnName, nextColumnName, shift,\n                    })}\n                    onWidthDraftCancel={() => cancelTableColumnWidthDraft()}\n                    getCellWidth={getter => storeWidthGetters({\n                      tableColumn: params.tableColumn , getter, tableColumns,\n                    })}\n                  >\n                    <TemplatePlaceholder\n                      name=\"tableHeaderCellBefore\"\n                      params={{\n                        column: params.tableColumn.column,\n                      }}\n                    />\n                    <Content\n                      column={params.tableColumn.column!}\n                      align={params.tableColumn.align!}\n                    >\n                      {showSortingControls ? (\n                        <SortLabel\n                          column={params.tableColumn.column!}\n                          align={params.tableColumn.align!}\n                          direction={getColumnSortingDirection(sorting, columnName) || null}\n                          disabled={!sortingEnabled}\n                          onSort={({ direction, keepOther }) => {\n                            changeColumnSorting({ columnName, direction, keepOther });\n                          }}\n                          getMessage={getMessage}\n                        >\n                          <Title>\n                            {columnTitle || columnName}\n                          </Title>\n                        </SortLabel>\n                      ) : (\n                        <Title>\n                          {columnTitle || columnName}\n                        </Title>\n                      )}\n                    </Content>\n                    {showGroupingControls ? (\n                      <GroupButton\n                        disabled={!groupingEnabled}\n                        onGroup={() => changeColumnGrouping({ columnName })}\n                      />\n                    ) : null}\n                  </HeaderCell>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isHeadingTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => <HeaderRow {...params} />}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nTableHeaderRowBase.components = {\n  cellComponent: 'Cell',\n  rowComponent: 'Row',\n  contentComponent: 'Content',\n  sortLabelComponent: 'SortLabel',\n  titleComponent: 'Title',\n  groupButtonComponent: 'GroupButton',\n};\n\n/***\n * A plugin that renders the table's header row. The Column's `title` field specifies the\n * column's title in the header row.The plugin also allows you to manage a column's sorting\n * and grouping state and initiate column dragging.\n * */\nexport const TableHeaderRow: React.ComponentType<TableHeaderRowProps> & {\n  /** The header row type's identifier. */\n  ROW_TYPE: symbol;\n} = TableHeaderRowBase;\n","import * as React from 'react';\nimport {\n  Getter, Template, Plugin,\n  TemplateConnector, TemplatePlaceholder, Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  getBandComponent, tableHeaderColumnChainsWithBands,\n  isBandedTableRow, isBandedOrHeaderRow,\n  tableRowsWithBands, isHeadingTableCell,\n  BAND_GROUP_CELL, BAND_HEADER_CELL,\n  BAND_EMPTY_CELL, BAND_DUPLICATE_RENDER,\n  TABLE_BAND_TYPE,\n  BAND_FILL_LEVEL_CELL,\n  bandLevelsVisibility,\n  columnBandLevels,\n  columnVisibleIntervals,\n} from '@devexpress/dx-grid-core';\nimport { TableBandHeaderProps, TableBandHeader as BandHeaderNS, TableRowProps } from '../types';\n\nconst CellPlaceholder = (props: BandHeaderNS.CellProps) => <TemplatePlaceholder params={props} />;\n\nconst bandLevelsVisibilityComputed = (\n  { columnVisibleIntervals: columnIntervals, tableHeaderColumnChains, bandLevels }: Getters,\n) => bandLevelsVisibility(\n  columnIntervals, tableHeaderColumnChains, bandLevels,\n);\n\nconst columnVisibleIntervalsComputed = (\n  { viewport, tableColumns }: Getters,\n) => columnVisibleIntervals(viewport, tableColumns);\n\nclass TableBandHeaderBase extends React.PureComponent<TableBandHeaderProps> {\n  static ROW_TYPE = TABLE_BAND_TYPE;\n  static components = {\n    cellComponent: 'Cell',\n    rowComponent: 'Row',\n    bandedHeaderCellComponent: 'BandedHeaderCell',\n    invisibleCellComponent: 'InvisibleCell',\n  };\n\n  render() {\n    const {\n      cellComponent: Cell,\n      rowComponent: Row,\n      bandedHeaderCellComponent: HeaderCell,\n      invisibleCellComponent: InvisibleCell,\n      columnBands,\n    } = this.props;\n\n    const tableHeaderRowsComputed = (\n      { tableHeaderRows, tableColumns }: Getters,\n    ) => tableRowsWithBands(\n      tableHeaderRows, columnBands, tableColumns,\n    );\n    const tableHeaderColumnChainsComputed = (\n      { tableHeaderRows, tableColumns }: Getters,\n    ) => tableHeaderColumnChainsWithBands(\n      tableHeaderRows, tableColumns, columnBands,\n    );\n    const bandLevels = columnBandLevels(columnBands);\n\n    return (\n      <Plugin\n        name=\"TableBandHeader\"\n        dependencies={[\n          { name: 'Table' },\n          { name: 'TableHeaderRow' },\n          { name: 'TableSelection', optional: true },\n          { name: 'TableEditColumn', optional: true },\n          { name: 'TableColumnVisibility', optional: true },\n          { name: 'TableGroupRow', optional: true },\n        ]}\n      >\n        <Getter name=\"tableHeaderRows\" computed={tableHeaderRowsComputed} />\n        {/* internal */}\n        <Getter name=\"columnVisibleIntervals\" computed={columnVisibleIntervalsComputed} />\n        <Getter name=\"tableHeaderColumnChains\" computed={tableHeaderColumnChainsComputed} />\n        <Getter name=\"bandLevels\" value={bandLevels} />\n        <Getter name=\"bandLevelsVisibility\" computed={bandLevelsVisibilityComputed} />\n\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow }: any) => isBandedOrHeaderRow(tableRow)}\n        >\n          {(params: BandHeaderNS.CellProps) => (\n            <TemplateConnector>\n              {({\n                tableColumns,\n                tableHeaderRows,\n                tableHeaderColumnChains,\n                columnVisibleIntervals: columnIntervals, bandLevelsVisibility: levelsVisibility,\n              }) => {\n                const bandComponent = getBandComponent(\n                  params,\n                  tableHeaderRows, tableColumns,\n                  columnBands, tableHeaderColumnChains, columnIntervals,\n                  levelsVisibility,\n                );\n                switch (bandComponent.type) {\n                  case BAND_DUPLICATE_RENDER:\n                    return <TemplatePlaceholder params={{ ...params }} />;\n\n                  case BAND_EMPTY_CELL:\n                    return <InvisibleCell />;\n\n                  case BAND_GROUP_CELL: {\n                    const { value, ...payload } = bandComponent.payload!;\n                    return (\n                      <Cell {...params} {...payload}>\n                        {value}\n                      </Cell>\n                    );\n                  }\n\n                  case BAND_HEADER_CELL:\n                    return (\n                      <TemplatePlaceholder\n                        name=\"tableCell\"\n                        params={{ ...params, ...bandComponent.payload }}\n                      />\n                    );\n\n                  case BAND_FILL_LEVEL_CELL:\n                    return (\n                      <Cell\n                        {...params}\n                        {...bandComponent.payload}\n                        style={{ whiteSpace: 'pre' }}\n                      >\n                        {' '}\n                      </Cell>\n                    );\n                  default:\n                    return null;\n                }\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }: any) => isHeadingTableCell(tableRow, tableColumn)}\n        >\n          {(params: BandHeaderNS.CellProps) => (\n            <HeaderCell component={CellPlaceholder} {...params} />\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => isBandedTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => <Row {...params} />}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nTableBandHeaderBase.components = {\n  cellComponent: 'Cell',\n  rowComponent: 'Row',\n  bandedHeaderCellComponent: 'BandedHeaderCell',\n  invisibleCellComponent: 'InvisibleCell',\n};\n\n/** A plugin that renders the banded cells. */\nexport const TableBandHeader: React.ComponentType<TableBandHeaderProps> & {\n  /** The band row type's identifier. */\n  ROW_TYPE: symbol;\n} = TableBandHeaderBase;\n","import * as React from 'react';\nimport {\n  Getter, Template, TemplatePlaceholder, TemplateConnector, Plugin, Getters, Actions,\n} from '@devexpress/dx-react-core';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  getColumnFilterConfig,\n  tableHeaderRowsWithFilter,\n  isFilterTableCell,\n  isFilterTableRow,\n  getColumnFilterOperations,\n  isFilterValueEmpty,\n  getSelectedFilterOperation,\n  TABLE_FILTER_TYPE,\n  FilterConfig,\n  TOP_POSITION,\n} from '@devexpress/dx-grid-core';\nimport { TableFilterRowProps, TableFilterRowState, TableCellProps, TableRowProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'FilteringState' },\n  { name: 'Table' },\n  { name: 'DataTypeProvider', optional: true },\n];\n\nconst defaultMessages = {\n  filterPlaceholder: 'Filter...',\n  contains: 'Contains',\n  notContains: 'Does not contain',\n  startsWith: 'Starts with',\n  endsWith: 'Ends with',\n  equal: 'Equals',\n  notEqual: 'Does not equal',\n  greaterThan: 'Greater than',\n  greaterThanOrEqual: 'Greater than or equal to',\n  lessThan: 'Less than',\n  lessThanOrEqual: 'Less than or equal to',\n};\n\nclass TableFilterRowBase extends React.PureComponent<TableFilterRowProps, TableFilterRowState> {\n  static ROW_TYPE = TABLE_FILTER_TYPE;\n  static defaultProps = {\n    showFilterSelector: false,\n    messages: {},\n  };\n  static components = {\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n    filterSelectorComponent: 'FilterSelector',\n    iconComponent: 'Icon',\n    editorComponent: 'Editor',\n    toggleButtonComponent: 'ToggleButton',\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      filterOperations: {},\n    };\n  }\n\n  render() {\n    const {\n      rowHeight,\n      showFilterSelector,\n      cellComponent: FilterCell,\n      rowComponent: FilterRow,\n      filterSelectorComponent: FilterSelector,\n      iconComponent,\n      toggleButtonComponent,\n      editorComponent: EditorComponent,\n      messages,\n    } = this.props;\n\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n\n    const tableHeaderRowsComputed = (\n      { tableHeaderRows }: Getters,\n    ) => tableHeaderRowsWithFilter(tableHeaderRows, rowHeight!);\n\n    return (\n      <Plugin\n        name=\"TableFilterRow\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableHeaderRows\" computed={tableHeaderRowsComputed} />\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }: any) => isFilterTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {(\n                { filters, isColumnFilteringEnabled, getAvailableFilterOperations, isDataRemote },\n                { changeColumnFilter, scrollToRow }: Actions,\n              ) => {\n                const { filterOperations } = this.state;\n                const { name: columnName } = params.tableColumn.column!;\n                const filter = getColumnFilterConfig(filters, columnName)!;\n                const onFilter = (\n                  config: FilterConfig | null,\n                ) => {\n                  if (isDataRemote) {\n                    scrollToRow(TOP_POSITION);\n                  }\n                  changeColumnFilter({ columnName, config });\n                };\n                const columnFilterOperations = getColumnFilterOperations(\n                  getAvailableFilterOperations, columnName,\n                );\n                const selectedFilterOperation = getSelectedFilterOperation(\n                  filterOperations, columnName, filter, columnFilterOperations,\n                );\n                const handleFilterOperationChange = (value: string) => {\n                  this.setState({\n                    filterOperations: {\n                      ...filterOperations,\n                      [columnName]: value,\n                    },\n                  });\n                  if (filter && !isFilterValueEmpty(filter.value)) {\n                    onFilter({ value: filter.value, operation: value });\n                  }\n                };\n                const handleFilterValueChange = (value: any) => onFilter(!isFilterValueEmpty(value)\n                  ? { value, operation: selectedFilterOperation }\n                  : null);\n                const filteringEnabled = isColumnFilteringEnabled(columnName);\n                return (\n                  <TemplatePlaceholder\n                    name=\"valueEditor\"\n                    params={{\n                      column: params.tableColumn.column,\n                      value: filter ? filter.value : undefined,\n                      onValueChange: handleFilterValueChange,\n                      disabled: !filteringEnabled,\n                    }}\n                  >\n                    {content => (\n                      <FilterCell\n                        {...params}\n                        getMessage={getMessage}\n                        column={params.tableColumn.column!}\n                        filter={filter}\n                        filteringEnabled={filteringEnabled}\n                        onFilter={onFilter}\n                      >\n                        {showFilterSelector\n                          ? (\n                            <FilterSelector\n                              toggleButtonComponent={toggleButtonComponent}\n                              iconComponent={iconComponent}\n                              value={selectedFilterOperation}\n                              availableValues={columnFilterOperations as string[]}\n                              onChange={handleFilterOperationChange}\n                              disabled={!filteringEnabled}\n                              getMessage={getMessage}\n                            />\n                          ) : null\n                        }\n                        {content || (\n                          <EditorComponent\n                            value={filter ? filter.value : undefined}\n                            disabled={!filteringEnabled}\n                            getMessage={getMessage}\n                            onChange={handleFilterValueChange}\n                          />\n                        )}\n                      </FilterCell>\n                    )}\n                  </TemplatePlaceholder>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isFilterTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => <FilterRow {...params} />}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders a filter row. */\nexport const TableFilterRow: React.ComponentType<TableFilterRowProps> & {\n  /** The filter row type's identifier. */\n  ROW_TYPE: symbol;\n} = TableFilterRowBase;\n","import * as React from 'react';\nimport {\n  Getter, Template, TemplatePlaceholder, TemplateConnector, Plugin, Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  getRowChange,\n  tableRowsWithEditing,\n  isEditTableRow,\n  isAddedTableRow,\n  isEditTableCell,\n  TABLE_EDIT_TYPE,\n  TABLE_ADDED_TYPE,\n} from '@devexpress/dx-grid-core';\nimport { TableEditRowProps, TableCellProps, TableRowProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'EditingState' },\n  { name: 'Table' },\n  { name: 'DataTypeProvider', optional: true },\n];\n\nclass TableEditRowBase extends React.PureComponent<TableEditRowProps> {\n  static ADDED_ROW_TYPE = TABLE_ADDED_TYPE;\n  static EDIT_ROW_TYPE = TABLE_EDIT_TYPE;\n  static components = {\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n  };\n\n  render() {\n    const {\n      cellComponent: EditCell,\n      rowComponent: EditRow,\n      rowHeight,\n    } = this.props;\n\n    const tableBodyRowsComputed = (\n      { tableBodyRows, editingRowIds, addedRows }: Getters,\n    ) => tableRowsWithEditing(tableBodyRows, editingRowIds, addedRows, rowHeight);\n\n    return (\n      <Plugin\n        name=\"TableEditRow\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableBodyRows\" computed={tableBodyRowsComputed} />\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }: any) => isEditTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({\n                getCellValue,\n                createRowChange,\n                rowChanges,\n                isColumnEditingEnabled,\n              }, {\n                changeAddedRow,\n                changeRow,\n              }) => {\n                const { rowId, row } = params.tableRow;\n                const { column } = params.tableColumn;\n                const { name: columnName } = column!;\n\n                const isNew = isAddedTableRow(params.tableRow);\n                const changedRow = isNew\n                  ? row\n                  : { ...row, ...getRowChange(rowChanges, rowId!) };\n\n                const value = getCellValue(changedRow, columnName);\n                const onValueChange = (newValue: any) => {\n                  const changeArgs = {\n                    rowId,\n                    change: createRowChange(changedRow, newValue, columnName),\n                  };\n                  if (isNew) {\n                    changeAddedRow(changeArgs);\n                  } else {\n                    changeRow(changeArgs);\n                  }\n                };\n                const editingEnabled = isColumnEditingEnabled(columnName);\n                return (\n                  <TemplatePlaceholder\n                    name=\"valueEditor\"\n                    params={{\n                      column,\n                      row,\n                      value,\n                      onValueChange,\n                      disabled: !editingEnabled,\n                    }}\n                  >\n                    {content => (\n                      <EditCell\n                        {...params}\n                        row={row}\n                        column={column!}\n                        value={value}\n                        editingEnabled={editingEnabled}\n                        onValueChange={onValueChange}\n                      >\n                        {content}\n                      </EditCell>\n                    )}\n                  </TemplatePlaceholder>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={(\n            { tableRow }: any,\n          ) => !!(isEditTableRow(tableRow) || isAddedTableRow(tableRow))}\n        >\n          {(params: TableRowProps) => (\n            <EditRow\n              {...params}\n              row={params.tableRow.row}\n            />\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders a row being edited. */\nexport const TableEditRow: React.ComponentType<TableEditRowProps> & {\n  /** The added row type's identifier. */\n  ADDED_ROW_TYPE: symbol;\n  /** The edit row type's identifier. */\n  EDIT_ROW_TYPE: symbol;\n} = TableEditRowBase;\n","import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Getter, Template, Plugin, TemplateConnector, Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  TABLE_EDIT_COMMAND_TYPE,\n  tableColumnsWithEditing,\n  isHeadingEditCommandsTableCell,\n  isEditCommandsTableCell,\n  isAddedTableRow,\n  isEditTableRow,\n} from '@devexpress/dx-grid-core';\nimport { TableEditColumnProps, TableCellProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'EditingState' },\n  { name: 'Table' },\n];\n\nconst defaultMessages = {\n  addCommand: 'New',\n  editCommand: 'Edit',\n  deleteCommand: 'Delete',\n  commitCommand: 'Save',\n  cancelCommand: 'Cancel',\n};\n\nclass TableEditColumnBase extends React.PureComponent<TableEditColumnProps> {\n  static COLUMN_TYPE = TABLE_EDIT_COMMAND_TYPE;\n  static defaultProps = {\n    showAddCommand: false,\n    showEditCommand: false,\n    showDeleteCommand: false,\n    width: 140,\n    messages: {},\n  };\n  static components = {\n    cellComponent: 'Cell',\n    headerCellComponent: 'HeaderCell',\n    commandComponent: 'Command',\n  };\n\n  render() {\n    const {\n      cellComponent: Cell,\n      headerCellComponent: HeaderCell,\n      commandComponent: Command,\n      showAddCommand,\n      showEditCommand,\n      showDeleteCommand,\n      width,\n      messages,\n    } = this.props;\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n    const tableColumnsComputed = (\n      { tableColumns }: Getters,\n    ) => tableColumnsWithEditing(tableColumns, width!);\n\n    return (\n      <Plugin\n        name=\"TableEditColumn\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n\n        <Template\n          name=\"tableCell\"\n          predicate={(\n            { tableRow, tableColumn }: any,\n          ) => isHeadingEditCommandsTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {(getters, actions) => (\n                <HeaderCell {...params}>\n                  {showAddCommand && (\n                    <Command\n                      id=\"add\"\n                      text={getMessage('addCommand')}\n                      onExecute={() => actions.addRow()}\n                    />\n                  )}\n                </HeaderCell>\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={(\n            { tableRow, tableColumn }: any,\n          ) => isEditCommandsTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {(getters, actions) => {\n                const isEdit = isEditTableRow(params.tableRow);\n                const isNew = isAddedTableRow(params.tableRow);\n                const isEditing = isEdit || isNew;\n                const rowIds = [params.tableRow.rowId];\n                return (\n                  <Cell\n                    {...params}\n                    row={params.tableRow.row}\n                  >\n                    {showEditCommand && !isEditing && (\n                      <Command\n                        id=\"edit\"\n                        text={getMessage('editCommand')}\n                        onExecute={() => actions.startEditRows({ rowIds })}\n                      />\n                    )}\n                    {showDeleteCommand && !isEditing && (\n                      <Command\n                        id=\"delete\"\n                        text={getMessage('deleteCommand')}\n                        onExecute={() => {\n                          actions.deleteRows({ rowIds });\n                          actions.commitDeletedRows({ rowIds });\n                        }}\n                      />\n                    )}\n                    {isEditing && (\n                      <Command\n                        id=\"commit\"\n                        text={getMessage('commitCommand')}\n                        onExecute={() => {\n                          if (isNew) {\n                            actions.commitAddedRows({ rowIds });\n                          } else {\n                            actions.stopEditRows({ rowIds });\n                            actions.commitChangedRows({ rowIds });\n                          }\n                        }}\n                      />\n                    )}\n                    {isEditing && (\n                      <Command\n                        id=\"cancel\"\n                        text={getMessage('cancelCommand')}\n                        onExecute={() => {\n                          if (isNew) {\n                            actions.cancelAddedRows({ rowIds });\n                          } else {\n                            actions.stopEditRows({ rowIds });\n                            actions.cancelChangedRows({ rowIds });\n                          }\n                        }}\n                      />\n                    )}\n                  </Cell>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that renders a command column. This column contains controls used for row editing,\n * creating, or deleting and committing/canceling changes.\n * */\nexport const TableEditColumn: React.ComponentType<TableEditColumnProps> & {\n  /** The edit column type's identifier. */\n  COLUMN_TYPE: symbol;\n} = TableEditColumnBase;\n","import * as React from 'react';\nimport { memoize, MemoizedComputed } from '@devexpress/dx-core';\nimport {\n  Plugin, Getter, Action, createStateHelper, StateHelper, ActionFn, Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  tableColumnsWithWidths,\n  tableColumnsWithDraftWidths,\n  changeTableColumnWidth,\n  draftTableColumnWidth,\n  cancelTableColumnWidthDraft,\n  ColumnWidthPayload,\n  TableColumnWidthInfo,\n  TABLE_DATA_TYPE,\n} from '@devexpress/dx-grid-core';\nimport { TableColumnResizingProps, TableColumnResizingState, CellWidthGetter } from '../types';\n\nconst pluginDependencies = [\n  { name: 'Table' },\n];\n\n// tslint:disable-next-line: max-line-length\nclass TableColumnResizingBase extends React.PureComponent<TableColumnResizingProps, TableColumnResizingState> {\n  static defaultProps = {\n    defaultColumnWidths: [],\n    resizingMode: 'widget',\n  };\n  changeTableColumnWidth: ActionFn<ColumnWidthPayload>;\n  draftTableColumnWidth: ActionFn<ColumnWidthPayload>;\n  cancelTableColumnWidthDraft: ActionFn<any>;\n  storeWidthGetters: ActionFn<object>;\n  storeCache: (payload) => void;\n  clearCache: () => void;\n  tableColumnsComputed: MemoizedComputed<TableColumnWidthInfo[], typeof tableColumnsWithWidths>;\n  // tslint:disable-next-line: max-line-length\n  tableColumnsDraftComputed: MemoizedComputed<TableColumnWidthInfo[], typeof tableColumnsWithDraftWidths>;\n\n  widthGetters: { [colName: string]: CellWidthGetter } = {};\n  cachedWidths: { [colName: string]: number } = {};\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      columnWidths: props.columnWidths || props.defaultColumnWidths,\n      draftColumnWidths: [],\n    };\n\n    const stateHelper: StateHelper = createStateHelper(\n      this,\n      {\n        columnWidths: () => {\n          const { onColumnWidthsChange } = this.props;\n          return onColumnWidthsChange;\n        },\n      },\n    );\n\n    this.tableColumnsComputed = memoize(\n      columnWidths => (\n        { tableColumns }: Getters,\n      ) => tableColumnsWithWidths(tableColumns, columnWidths, this.props.resizingMode!),\n    );\n    this.tableColumnsDraftComputed = memoize(\n      draftColumnWidths => (\n        { tableColumns }: Getters,\n      ) => tableColumnsWithDraftWidths(\n        tableColumns, draftColumnWidths, this.props.resizingMode!,\n      ),\n    );\n\n    this.changeTableColumnWidth = stateHelper.applyReducer.bind(\n      stateHelper, (prevState, payload) => {\n        const cachedWidths = { ...this.cachedWidths };\n        const { minColumnWidth, maxColumnWidth, columnExtensions, resizingMode } = this.props;\n        return changeTableColumnWidth(\n          prevState,\n          { ...payload, cachedWidths, resizingMode,\n            minColumnWidth, maxColumnWidth, columnExtensions },\n        );\n      },\n    );\n    this.draftTableColumnWidth = stateHelper.applyReducer.bind(\n      stateHelper, (prevState, payload) => {\n        this.storeCache(payload);\n        const cachedWidths = this.cachedWidths;\n        const { minColumnWidth, maxColumnWidth, columnExtensions, resizingMode } = this.props;\n        return draftTableColumnWidth(\n          prevState,\n          { ...payload, cachedWidths, resizingMode,\n            minColumnWidth, maxColumnWidth, columnExtensions },\n        );\n      },\n    );\n    this.cancelTableColumnWidthDraft = stateHelper.applyReducer.bind(\n      stateHelper, cancelTableColumnWidthDraft,\n    );\n\n    this.storeCache = ({ columnName, nextColumnName }) => {\n      if (Object.keys(this.cachedWidths).length === 0) {\n        this.cachedWidths[columnName] = this.widthGetters[columnName]();\n        if (nextColumnName) {\n          this.cachedWidths[nextColumnName] = this.widthGetters[nextColumnName]();\n        }\n      }\n    };\n    this.clearCache = () => {\n      Object.keys(this.cachedWidths)\n      .forEach(columnName => delete this.cachedWidths[columnName]);\n    };\n\n    this.storeWidthGetters = memoize(({ tableColumn, getter, tableColumns }) => {\n      if (tableColumn.type === TABLE_DATA_TYPE) {\n        this.widthGetters[tableColumn.column!.name] = getter;\n      }\n      Object.keys(this.widthGetters)\n      .forEach((columnName) => {\n        const columnIndex = tableColumns\n          .findIndex(({ type, column }) => type === TABLE_DATA_TYPE && column!.name === columnName);\n        if (columnIndex === -1) {\n          delete this.widthGetters[columnName];\n        }\n      });\n    });\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      columnWidths = prevState.columnWidths,\n    } = nextProps;\n\n    return {\n      columnWidths,\n    };\n  }\n\n  componentDidUpdate (_, prevState) {\n    const { columnWidths: currentWidths } = this.state;\n    const { columnWidths: prevWidths } = prevState;\n    if (currentWidths !== prevWidths) {\n      this.clearCache();\n    }\n  }\n\n  render() {\n    const { columnWidths, draftColumnWidths } = this.state;\n    const { resizingMode } = this.props;\n    const tableColumnsComputed = this.tableColumnsComputed(columnWidths);\n    const tableColumnsDraftComputed = this.tableColumnsDraftComputed(draftColumnWidths);\n\n    return (\n      <Plugin\n        name=\"TableColumnResizing\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableColumnResizingEnabled\" value />\n        <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n        <Getter name=\"tableColumns\" computed={tableColumnsDraftComputed} />\n        <Getter name=\"columnResizingMode\" value={resizingMode} />\n        <Action name=\"changeTableColumnWidth\" action={this.changeTableColumnWidth} />\n        <Action name=\"draftTableColumnWidth\" action={this.draftTableColumnWidth} />\n        <Action name=\"cancelTableColumnWidthDraft\" action={this.cancelTableColumnWidthDraft} />\n        <Action name=\"storeWidthGetters\" action={this.storeWidthGetters} />\n      </Plugin>\n    );\n  }\n}\n\n/* tslint:disable: max-line-length */\n/** A plugin that manages table column widths. */\nexport const TableColumnResizing: React.ComponentType<TableColumnResizingProps> = TableColumnResizingBase;\n/* tslint:enable: max-line-length */\n","import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Template, TemplatePlaceholder, Plugin,\n  TemplateConnector,\n} from '@devexpress/dx-react-core';\nimport { pageCount } from '@devexpress/dx-grid-core';\nimport { PagingPanelProps, TableKeyboardNavigation } from '../types';\n\nconst pluginDependencies = [\n  { name: 'PagingState' },\n];\n\nconst defaultMessages = {\n  showAll: 'All',\n  info: ({ from, to, count }) => `${from}${from < to ? `-${to}` : ''} of ${count}`,\n};\n\nclass PagingPanelBase extends React.PureComponent<PagingPanelProps> {\n  static defaultProps = {\n    pageSizes: [],\n    messages: {},\n  };\n  static components = {\n    containerComponent: 'Container',\n  };\n\n  render() {\n    const {\n      containerComponent: Pager,\n      pageSizes,\n      messages,\n    } = this.props;\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n\n    return (\n      <Plugin\n        name=\"PagingPanel\"\n        dependencies={pluginDependencies}\n      >\n        <Template name=\"footer\">\n          {(params: TableKeyboardNavigation.ExtraProps) => (\n            <React.Fragment>\n              <TemplatePlaceholder />\n              <TemplateConnector>\n              {({ currentPage, pageSize, totalCount },\n                { setCurrentPage, setPageSize }) => (\n                <Pager\n                  {...params}\n                  currentPage={currentPage}\n                  pageSize={pageSize}\n                  totalCount={totalCount}\n                  totalPages={pageCount(totalCount, pageSize)}\n                  pageSizes={pageSizes!}\n                  getMessage={getMessage}\n                  onCurrentPageChange={setCurrentPage}\n                  onPageSizeChange={setPageSize}\n                />\n              )}\n              </TemplateConnector>\n            </React.Fragment>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders the paging panel used for navigation through data pages. */\nexport const PagingPanel: React.ComponentType<PagingPanelProps> = PagingPanelBase;\n","import * as React from 'react';\nimport { DragSource } from '@devexpress/dx-react-core';\nimport { GroupingPanel as GP } from '../../types';\n\nconst defaultProps = {\n  draggingEnabled: false,\n  onDragStart: () => {},\n  onDragEnd: () => {},\n};\ntype GPItemLayoutProps = GP.GroupingItemLayoutProps & typeof defaultProps;\n\n// tslint:disable-next-line: max-line-length\nexport class ItemLayout extends React.PureComponent<GPItemLayoutProps, GP.GroupingItemLayoutState> {\n  static defaultProps = defaultProps;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      dragging: false,\n    };\n  }\n\n  render() {\n    const {\n      item,\n      itemComponent: Item,\n      itemRef,\n      draggingEnabled,\n      onDragStart,\n      onDragEnd,\n    } = this.props;\n    const { dragging } = this.state;\n\n    const itemElement = <Item item={{ ...item, draft: dragging || item.draft }} />;\n\n    return (draggingEnabled ? (\n      <DragSource\n        payload={[{ type: 'column', columnName: item.column.name }]}\n        onStart={() => {\n          this.setState({ dragging: true });\n          onDragStart();\n        }}\n        onEnd={() => {\n          this.setState({ dragging: false });\n          onDragEnd();\n        }}\n        ref={itemRef}\n      >\n        {itemElement}\n      </DragSource>\n    ) : (\n      itemElement\n    ));\n  }\n}\n","import * as React from 'react';\nimport { flushSync } from 'react-dom';\nimport { DropTarget } from '@devexpress/dx-react-core';\nimport { getGroupCellTargetIndex } from '@devexpress/dx-grid-core';\nimport { ItemLayout } from './group-panel-layout/item-layout';\nimport { GroupingPanel as GP } from '../types';\n\nconst defaultProps = {\n  onGroup: () => {},\n  draggingEnabled: false,\n  isColumnGroupingEnabled: () => false,\n  onGroupDraft: () => {},\n  onGroupDraftCancel: () => {},\n};\ntype GPLayoutProps = GP.LayoutProps & typeof defaultProps;\n\n// tslint:disable-next-line: max-line-length\nclass GroupPanelLayoutBase extends React.PureComponent<GPLayoutProps, GP.GroupingItemLayoutState> {\n  static defaultProps = defaultProps;\n  handleDragEvent: (...args: any) => void;\n  onEnter: (any) => void;\n  onOver: (any) => void;\n  itemRefs: Element[] = [];\n  draggingColumnName: string | null = null;\n  onLeave: () => void;\n  onDrop: () => void;\n  onDragStart: (columnName: any) => void;\n  onDragEnd: () => void;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sourceColumnName: null,\n      targetItemIndex: -1,\n    };\n    this.handleDragEvent = (eventHandler, { payload, ...restArgs }) => {\n      const { isColumnGroupingEnabled } = this.props;\n      const { columnName } = payload[0];\n\n      if (isColumnGroupingEnabled(columnName)) {\n        eventHandler({ payload, ...restArgs });\n      }\n    };\n    this.onEnter = ({ payload }) => {\n      flushSync(() => this.setState({\n        sourceColumnName: payload[0].columnName,\n      }));\n    };\n    this.onOver = ({ clientOffset }) => {\n      const { onGroupDraft, items } = this.props;\n      const { sourceColumnName, targetItemIndex: prevTargetItemIndex } = this.state;\n      // eslint-disable-next-line react/no-find-dom-node\n      const itemGeometries = this.itemRefs\n        .map(ref => ref.getBoundingClientRect());\n      const sourceItemIndex = items.findIndex(({ column }) => column.name === sourceColumnName);\n      const targetItemIndex = getGroupCellTargetIndex(\n        itemGeometries,\n        sourceItemIndex,\n        clientOffset,\n      );\n\n      if (prevTargetItemIndex === targetItemIndex) return;\n\n      onGroupDraft({\n        columnName: sourceColumnName,\n        groupIndex: targetItemIndex,\n      });\n      this.setState({ targetItemIndex });\n    };\n    this.onLeave = () => {\n      const { onGroupDraft } = this.props;\n      const { sourceColumnName } = this.state;\n      if (!this.draggingColumnName) {\n        this.resetState();\n        return;\n      }\n      onGroupDraft({\n        columnName: sourceColumnName,\n        groupIndex: -1,\n      });\n      this.setState({\n        targetItemIndex: -1,\n      });\n    };\n    this.onDrop = () => {\n      const { onGroup } = this.props;\n      const { sourceColumnName, targetItemIndex } = this.state;\n      this.resetState();\n      onGroup({\n        columnName: sourceColumnName,\n        groupIndex: targetItemIndex,\n      });\n    };\n    this.onDragStart = (columnName) => {\n      this.draggingColumnName = columnName;\n    };\n    this.onDragEnd = () => {\n      this.draggingColumnName = null;\n      const { sourceColumnName, targetItemIndex } = this.state;\n      const { onGroup } = this.props;\n      if (sourceColumnName && targetItemIndex === -1) {\n        onGroup({\n          columnName: sourceColumnName,\n        });\n      }\n      this.resetState();\n    };\n  }\n\n  resetState() {\n    const { onGroupDraftCancel } = this.props;\n    onGroupDraftCancel();\n    this.setState({\n      sourceColumnName: null,\n      targetItemIndex: -1,\n    });\n  }\n\n  render() {\n    const {\n      items,\n      emptyMessageComponent: EmptyMessage,\n      containerComponent: Container,\n      itemComponent: Item,\n      draggingEnabled,\n      isColumnGroupingEnabled,\n    } = this.props;\n\n    this.itemRefs = [];\n\n    const groupPanel = (items.length ? (\n      <Container>\n        {items.map((item) => {\n          const { name: columnName } = item.column;\n          return (\n            <ItemLayout\n              key={columnName}\n              item={item}\n              itemComponent={Item}\n              itemRef={element => element && this.itemRefs.push(element)}\n              draggingEnabled={draggingEnabled && isColumnGroupingEnabled(columnName)}\n              onDragStart={() => this.onDragStart(columnName)}\n              onDragEnd={this.onDragEnd}\n            />\n          );\n        })}\n      </Container>\n    ) : (\n      <EmptyMessage />\n    ));\n\n    return draggingEnabled\n      ? (\n        <DropTarget\n          onEnter={args => this.handleDragEvent(this.onEnter, args)}\n          onOver={args => this.handleDragEvent(this.onOver, args)}\n          onLeave={args => this.handleDragEvent(this.onLeave, args)}\n          onDrop={args => this.handleDragEvent(this.onDrop, args)}\n        >\n          {groupPanel}\n        </DropTarget>\n      )\n      : groupPanel;\n  }\n}\n\n/** @internal */\nexport const GroupPanelLayout: React.ComponentType<GP.LayoutProps> = GroupPanelLayoutBase;\n","import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Template, TemplatePlaceholder, Plugin, TemplateConnector, withComponents,\n  Getters, Actions,\n} from '@devexpress/dx-react-core';\nimport {\n  groupingPanelItems,\n  getColumnSortingDirection,\n  TOP_POSITION,\n  GroupingPanelItem,\n} from '@devexpress/dx-grid-core';\nimport { GroupPanelLayout as Layout } from '../components/group-panel-layout';\nimport { GroupingPanelProps } from '../types';\n\nconst defaultMessages = {\n  groupByColumn: 'Drag a column header here to group by that column',\n};\n\nconst defaultProps = {\n  showSortingControls: false,\n  showGroupingControls: false,\n  messages: {},\n};\n\nclass GroupingPanelRaw extends React.PureComponent<GroupingPanelProps & typeof defaultProps> {\n  static defaultProps = defaultProps;\n  static components = {\n    layoutComponent: 'Layout',\n    containerComponent: 'Container',\n    itemComponent: 'Item',\n    emptyMessageComponent: 'EmptyMessage',\n  };\n\n  render() {\n    const {\n      layoutComponent: LayoutComponent,\n      containerComponent: Container,\n      itemComponent: Item,\n      emptyMessageComponent: EmptyMessage,\n      showSortingControls,\n      showGroupingControls,\n      messages,\n    } = this.props;\n\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n\n    const EmptyMessagePlaceholder = ({ forwardedRef }: { forwardedRef?: React.Ref<Element> }) => (\n      <EmptyMessage\n        getMessage={getMessage}\n        forwardedRef={forwardedRef}\n      />\n    );\n\n    const ItemPlaceholder = ({\n      item, forwardedRef,\n    }: { item: GroupingPanelItem, forwardedRef?: React.Ref<Element> }) => {\n      const { name: columnName } = item.column;\n\n      return (\n        <TemplateConnector>\n          {(\n            { sorting, isColumnSortingEnabled, isColumnGroupingEnabled },\n            { changeColumnGrouping, changeColumnSorting },\n          ) => {\n            const sortingEnabled = isColumnSortingEnabled && isColumnSortingEnabled(columnName);\n            const groupingEnabled = isColumnGroupingEnabled && isColumnGroupingEnabled(columnName);\n\n            return (\n              <Item\n                forwardedRef={forwardedRef}\n                item={item}\n                sortingEnabled={sortingEnabled}\n                groupingEnabled={groupingEnabled}\n                showSortingControls={showSortingControls}\n                sortingDirection={showSortingControls\n                  ? getColumnSortingDirection(sorting, columnName)! : undefined}\n                showGroupingControls={showGroupingControls}\n                onGroup={() => changeColumnGrouping({ columnName })}\n                onSort={(\n                  { direction, keepOther },\n                ) => changeColumnSorting({ columnName, direction, keepOther })}\n              />\n            );\n          }}\n        </TemplateConnector>\n      );\n    };\n\n    return (\n      <Plugin\n        name=\"GroupingPanel\"\n        dependencies={[\n          { name: 'GroupingState' },\n          { name: 'Toolbar' },\n          { name: 'SortingState', optional: !showSortingControls },\n        ]}\n      >\n        <Template name=\"toolbarContent\">\n          <TemplateConnector>\n            {({\n              columns, grouping, draftGrouping,\n              draggingEnabled, isColumnGroupingEnabled, isDataRemote,\n            }: Getters, {\n              changeColumnGrouping, draftColumnGrouping, cancelColumnGroupingDraft, scrollToRow,\n            }: Actions) => {\n              const onGroup = (config) => {\n                if (isDataRemote) {\n                  scrollToRow(TOP_POSITION);\n                }\n                changeColumnGrouping(config);\n              };\n\n              return <LayoutComponent\n                items={groupingPanelItems(columns, grouping, draftGrouping)}\n                isColumnGroupingEnabled={isColumnGroupingEnabled}\n                draggingEnabled={draggingEnabled}\n                onGroup={onGroup}\n                onGroupDraft={draftColumnGrouping}\n                onGroupDraftCancel={cancelColumnGroupingDraft}\n                itemComponent={ItemPlaceholder}\n                emptyMessageComponent={EmptyMessagePlaceholder}\n                containerComponent={Container}\n              />;\n            }}\n          </TemplateConnector>\n          <TemplatePlaceholder />\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that renders the Grouping Panel in the Grid's header. This panel displays grouped\n * columns and allows a user to modify grouping options.Optionally, the plugin allows an end-user\n * to change grouped columns' sorting order and render sorting indicators.\n * */\nexport const GroupingPanel: React.ComponentType<GroupingPanelProps> = withComponents(\n  { Layout },\n)(GroupingPanelRaw);\n","import * as React from 'react';\nimport { Plugin, Template, Getter, Getters } from '@devexpress/dx-react-core';\nimport { getAvailableFilterOperationsGetter } from '@devexpress/dx-grid-core';\nimport {\n  DataTypeProvider as DataTypeProviderNS, DataTypeProviderProps,\n} from '../types';\n\nclass DataTypeProviderBase extends React.PureComponent<DataTypeProviderProps> {\n  render() {\n    const {\n      for: columnNames,\n      formatterComponent: Formatter,\n      editorComponent: Editor,\n      availableFilterOperations,\n    } = this.props;\n\n    const getAvailableFilterOperationsComputed = (\n      { getAvailableFilterOperations }: Getters,\n    ) => getAvailableFilterOperationsGetter(\n      getAvailableFilterOperations,\n      availableFilterOperations!,\n      columnNames,\n    );\n\n    return (\n      <Plugin name=\"DataTypeProvider\" key={columnNames.join('_')}>\n        <Getter\n          name=\"getAvailableFilterOperations\"\n          computed={getAvailableFilterOperationsComputed}\n        />\n        {Formatter\n          ? (\n            <Template\n              name=\"valueFormatter\"\n              predicate={({ column }: any) => columnNames.includes(column.name)}\n            >\n              {(params: DataTypeProviderNS.ValueFormatterProps) => <Formatter {...params} />}\n            </Template>\n          )\n          : null\n        }\n        {Editor\n          ? (\n            <Template\n              name=\"valueEditor\"\n              predicate={({ column }: any) => columnNames.includes(column.name)}\n            >\n              {(params: DataTypeProviderNS.ValueEditorProps) => <Editor {...params} />}\n            </Template>\n          )\n          : null\n        }\n      </Plugin>\n    );\n  }\n}\n\n// tslint:disable-next-line: max-line-length\n/** A plugin that allows you to customize formatting options and editors depending on the data type. */\nexport const DataTypeProvider: React.ComponentType<DataTypeProviderProps> = DataTypeProviderBase;\n","import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Action,\n  Getter,\n  Plugin,\n  Template,\n  TemplateConnector,\n  TemplatePlaceholder,\n  createStateHelper,\n  ActionFn,\n} from '@devexpress/dx-react-core';\nimport {\n  toggleColumn,\n  tableDataColumnsExist,\n  getColumnExtensionValueGetter,\n} from '@devexpress/dx-grid-core';\nimport { VisibleTableColumns } from './internal/visible-table-columns';\nimport { TableColumnVisibilityProps, TableColumnVisibilityState } from '../types';\n\nconst pluginDependencies = [\n  { name: 'Table' },\n];\n\nconst defaultMessages = {\n  noColumns: 'Nothing to show',\n};\n\nconst columnExtensionValueGetter = (\n  columnExtensions, defaultValue,\n) => getColumnExtensionValueGetter(columnExtensions, 'togglingEnabled', defaultValue);\n\n// tslint:disable-next-line: max-line-length\nclass TableColumnVisibilityBase extends React.PureComponent<TableColumnVisibilityProps, TableColumnVisibilityState> {\n  static defaultProps = {\n    defaultHiddenColumnNames: [],\n    messages: {},\n    columnTogglingEnabled: true,\n  };\n  static components = {\n    emptyMessageComponent: 'EmptyMessage',\n  };\n  toggleColumnVisibility: ActionFn<string[]>;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hiddenColumnNames: props.hiddenColumnNames || props.defaultHiddenColumnNames,\n    };\n    const stateHelper = createStateHelper(\n      this,\n      {\n        hiddenColumnNames: () => {\n          const { onHiddenColumnNamesChange } = this.props;\n          return onHiddenColumnNamesChange;\n        },\n      },\n    );\n\n    this.toggleColumnVisibility = stateHelper.applyFieldReducer.bind(\n      stateHelper, 'hiddenColumnNames', toggleColumn,\n    );\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      hiddenColumnNames = prevState.hiddenColumnNames,\n    } = nextProps;\n\n    return {\n      hiddenColumnNames,\n    };\n  }\n\n  render() {\n    const {\n      emptyMessageComponent: EmptyMessage,\n      messages,\n    } = this.props;\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n    const { hiddenColumnNames } = this.state;\n    const { columnExtensions, columnTogglingEnabled } = this.props;\n\n    return (\n      <Plugin\n        name=\"TableColumnVisibility\"\n        dependencies={pluginDependencies}\n      >\n        <VisibleTableColumns hiddenColumnNames={hiddenColumnNames} />\n\n        <Getter\n          name=\"isColumnTogglingEnabled\"\n          value={columnExtensionValueGetter(columnExtensions, columnTogglingEnabled)}\n        />\n        <Action\n          name=\"toggleColumnVisibility\"\n          action={this.toggleColumnVisibility}\n        />\n\n        <Template name=\"table\">\n          {params => (\n            <TemplateConnector>\n              {({ tableColumns }) => (tableDataColumnsExist(tableColumns)\n                ? <TemplatePlaceholder />\n                : (\n                  <EmptyMessage\n                    getMessage={getMessage}\n                    {...params}\n                  />\n                )\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nTableColumnVisibilityBase.components = {\n  emptyMessageComponent: 'EmptyMessage',\n};\n\n/* tslint:disable: max-line-length */\n/** A plugin that manages Grid columns' visibility. */\nexport const TableColumnVisibility: React.ComponentType<TableColumnVisibilityProps> = TableColumnVisibilityBase;\n/* tslint:enable: max-line-length */\n","import * as React from 'react';\n\nimport {\n  Template,\n  Plugin,\n  TemplatePlaceholder,\n} from '@devexpress/dx-react-core';\nimport { ToolbarProps, TableKeyboardNavigation } from '../types';\n\nclass ToolbarBase extends React.PureComponent<ToolbarProps> {\n  static components = {\n    rootComponent: 'Root',\n    flexibleSpaceComponent: 'FlexibleSpace',\n  };\n\n  render() {\n    const {\n      rootComponent: Root,\n      flexibleSpaceComponent: FlexibleSpaceComponent,\n    } = this.props;\n    return (\n      <Plugin\n        name=\"Toolbar\"\n      >\n        <Template name=\"header\">\n        {(params: TableKeyboardNavigation.ExtraProps) => (\n          <React.Fragment>\n            <Root {...params}>\n              <TemplatePlaceholder name=\"toolbarContent\" />\n            </Root>\n            <TemplatePlaceholder />\n          </React.Fragment>\n        )}\n        </Template>\n        <Template name=\"toolbarContent\">\n          <FlexibleSpaceComponent />\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders the Grid toolbar. */\nexport const Toolbar: React.ComponentType<ToolbarProps> = ToolbarBase;\n","import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper, ActionFn,\n} from '@devexpress/dx-react-core';\nimport { toggleRowExpanded, ToggleRowPayload } from '@devexpress/dx-grid-core';\nimport { TreeDataStateProps, TreeDataStateState } from '../types';\n\nclass TreeDataStateBase extends React.PureComponent<TreeDataStateProps, TreeDataStateState> {\n  static defaultProps = {\n    defaultExpandedRowIds: [],\n  };\n  toggleRowExpanded: ActionFn<ToggleRowPayload>;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      expandedRowIds: props.expandedRowIds || props.defaultExpandedRowIds,\n    };\n\n    const stateHelper = createStateHelper(\n      this,\n      {\n        expandedRowIds: () => {\n          const { onExpandedRowIdsChange } = this.props;\n          return onExpandedRowIdsChange;\n        },\n      },\n    );\n\n    this.toggleRowExpanded = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'expandedRowIds', toggleRowExpanded);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      expandedRowIds = prevState.expandedRowIds,\n    } = nextProps;\n\n    return {\n      expandedRowIds,\n    };\n  }\n\n  render() {\n    const { expandedRowIds } = this.state;\n\n    return (\n      <Plugin\n        name=\"TreeDataState\"\n      >\n        <Getter name=\"expandedRowIds\" value={expandedRowIds} />\n        {' '}\n        {/* collision =( */}\n        <Action name=\"toggleRowExpanded\" action={this.toggleRowExpanded} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that manages the expanded state for tree rows. */\nexport const TreeDataState: React.ComponentType<TreeDataStateProps> = TreeDataStateBase;\n","import * as React from 'react';\nimport { Getter, Plugin, Getters } from '@devexpress/dx-react-core';\nimport {\n  customTreeRowLevelKeyGetter,\n  customTreeRowIdGetter,\n  customTreeRowsWithMeta,\n  expandedTreeRows,\n  collapsedTreeRowsGetter,\n  isTreeRowLeafGetter,\n  getTreeRowLevelGetter,\n  unwrappedCustomTreeRows,\n} from '@devexpress/dx-grid-core';\nimport { CustomTreeDataProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'TreeDataState' },\n];\n\nconst expandedTreeRowsComputed = (\n  { rows, getRowId, expandedRowIds }: Getters,\n) => expandedTreeRows(rows, getRowId, expandedRowIds);\nconst getRowIdComputed = (\n  { getRowId, rows }: Getters,\n) => customTreeRowIdGetter(getRowId, rows);\nconst getRowLevelKeyComputed = (\n  { getRowLevelKey, rows }: Getters,\n) => customTreeRowLevelKeyGetter(getRowLevelKey, rows);\nconst isTreeRowLeafComputed = ({ rows }: Getters) => isTreeRowLeafGetter(rows);\nconst getTreeRowLevelComputed = ({ rows }: Getters) => getTreeRowLevelGetter(rows);\nconst collapsedTreeRowsGetterComputed = (\n  { rows, getCollapsedRows }: Getters,\n) => collapsedTreeRowsGetter(getCollapsedRows, rows);\nconst unwrappedTreeRowsComputed = ({ rows }: Getters) => unwrappedCustomTreeRows(rows);\n\nclass CustomTreeDataBase extends React.PureComponent<CustomTreeDataProps> {\n  render() {\n    const {\n      getChildRows,\n    } = this.props;\n    const treeRowsComputed = ({ rows }: Getters) => customTreeRowsWithMeta(rows, getChildRows);\n\n    return (\n      <Plugin\n        name=\"CustomTreeData\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"rows\" computed={treeRowsComputed} />\n        <Getter name=\"getRowId\" computed={getRowIdComputed} />\n        <Getter name=\"getRowLevelKey\" computed={getRowLevelKeyComputed} />\n        <Getter name=\"isTreeRowLeaf\" computed={isTreeRowLeafComputed} />\n        <Getter name=\"getTreeRowLevel\" computed={getTreeRowLevelComputed} />\n        <Getter name=\"rows\" computed={expandedTreeRowsComputed} />\n        <Getter name=\"getCollapsedRows\" computed={collapsedTreeRowsGetterComputed} />\n        <Getter name=\"rows\" computed={unwrappedTreeRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that converts custom formatted tree data to a supported format and performs\n * local row expanding/collapsing.\n * */\nexport const CustomTreeData: React.ComponentType<CustomTreeDataProps> = CustomTreeDataBase;\n","import * as React from 'react';\nimport {\n  Template, Getter, Plugin, TemplateConnector, TemplatePlaceholder,\n} from '@devexpress/dx-react-core';\nimport { isTreeTableCell } from '@devexpress/dx-grid-core';\nimport { TableTreeColumnProps, TableCellProps } from '../types';\n\nclass TableTreeColumnBase extends React.PureComponent<TableTreeColumnProps> {\n  static defaultProps = {\n    showSelectionControls: false,\n    showSelectAll: false,\n  };\n  static components = {\n    cellComponent: 'Cell',\n    contentComponent: 'Content',\n    indentComponent: 'Indent',\n    expandButtonComponent: 'ExpandButton',\n    checkboxComponent: 'Checkbox',\n  };\n\n  render() {\n    const {\n      for: forColumnName,\n      showSelectionControls,\n      showSelectAll,\n      indentComponent: Indent,\n      expandButtonComponent: ExpandButton,\n      checkboxComponent: Checkbox,\n      contentComponent: Content,\n      cellComponent: Cell,\n    } = this.props;\n    return (\n      <Plugin\n        name=\"TableTreeColumn\"\n        dependencies={[\n          { name: 'DataTypeProvider', optional: true },\n          { name: 'TreeDataState' },\n          { name: 'SelectionState', optional: !showSelectionControls },\n          { name: 'IntegratedSelection', optional: !showSelectAll },\n          { name: 'Table' },\n          { name: 'TableHeaderRow', optional: true },\n        ]}\n        key={forColumnName}\n      >\n        <Getter name=\"tableTreeColumnName\" value={forColumnName} />\n        <Template\n          name=\"tableHeaderCellBefore\"\n          predicate={({ column }: any) => column.name === forColumnName}\n        >\n          <ExpandButton\n            visible={false}\n            expanded={false}\n            onToggle={() => {}}\n          />\n          {showSelectionControls && showSelectAll && (\n            <TemplateConnector>\n              {({ selectAllAvailable, allSelected, someSelected }, { toggleSelectAll }) => (\n                <Checkbox\n                  disabled={!selectAllAvailable}\n                  checked={allSelected}\n                  indeterminate={someSelected}\n                  onChange={toggleSelectAll}\n                />\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={(\n            { tableRow, tableColumn }: any,\n          ) => isTreeTableCell(tableRow, tableColumn, forColumnName)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({\n                getCollapsedRows, expandedRowIds, selection, isTreeRowLeaf, getTreeRowLevel,\n                getCellValue,\n              }, {\n                toggleRowExpanded, toggleSelection,\n              }) => {\n                const { row, rowId } = params.tableRow;\n                const columnName = params.tableColumn.column!.name;\n                const value = getCellValue(row, columnName);\n                const collapsedRows = getCollapsedRows(row);\n                return (\n                  <TemplatePlaceholder\n                    name=\"valueFormatter\"\n                    params={{\n                      value,\n                      row,\n                      column: params.tableColumn.column,\n                    }}\n                  >\n                    {content => (\n                      <Cell\n                        {...params}\n                        row={row}\n                        column={params.tableColumn.column!}\n                        value={value}\n                      >\n                        <Indent\n                          level={getTreeRowLevel(row)}\n                        />\n                        <ExpandButton\n                          visible={collapsedRows ? !!collapsedRows.length : !isTreeRowLeaf(row)}\n                          expanded={expandedRowIds.indexOf(rowId) > -1}\n                          onToggle={() => toggleRowExpanded({ rowId })}\n                        />\n                        {showSelectionControls && (\n                          <Checkbox\n                            disabled={false}\n                            checked={selection.indexOf(rowId) > -1}\n                            indeterminate={false}\n                            onChange={() => toggleSelection({ rowIds: [rowId] })}\n                          />\n                        )}\n                        <Content>\n                          {content || value}\n                        </Content>\n                      </Cell>\n                    )}\n                  </TemplatePlaceholder>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders a table column with a toggle button and sorting indicators. */\nexport const TableTreeColumn: React.ComponentType<TableTreeColumnProps> = TableTreeColumnBase;\n","import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper, ActionFn, Getters,\n} from '@devexpress/dx-react-core';\nimport { changeSearchValue, searchFilterExpression } from '@devexpress/dx-grid-core';\nimport { SearchStateProps, SearchStateState } from '../types';\n\nclass SearchStateBase extends React.PureComponent<SearchStateProps, SearchStateState> {\n  static defaultProps = {\n    defaultValue: '',\n  };\n  changeValue: ActionFn<string>;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: props.value || props.defaultValue,\n    };\n    const stateHelper = createStateHelper(this, {\n      value: () => {\n        const { onValueChange } = this.props;\n        return onValueChange;\n      },\n    });\n\n    this.changeValue = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'value', changeSearchValue);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      value = prevState.value,\n    } = nextProps;\n\n    return {\n      value,\n    };\n  }\n\n  render() {\n    const { value } = this.state;\n    const filterExpressionComputed = (\n      { filterExpression, columns }: Getters,\n    ) => searchFilterExpression(value, columns, filterExpression);\n\n    return (\n      <Plugin\n        name=\"SearchState\"\n      >\n        <Getter name=\"filterExpression\" computed={filterExpressionComputed} />\n        <Getter name=\"searchValue\" value={value} />\n        <Action name=\"changeSearchValue\" action={this.changeValue} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that manages the search state. */\nexport const SearchState: React.ComponentType<SearchStateProps> = SearchStateBase;\n","import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Template,\n  TemplatePlaceholder,\n  Plugin,\n  TemplateConnector,\n} from '@devexpress/dx-react-core';\nimport {\n  TOP_POSITION,\n} from '@devexpress/dx-grid-core';\nimport { SearchPanelProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'Toolbar' },\n  { name: 'SearchState' },\n];\n\nconst defaultMessages = {\n  searchPlaceholder: 'Search...',\n};\n\nclass SearchPanelBase extends React.PureComponent<SearchPanelProps> {\n  static defaultProps = {\n    messages: {},\n  };\n  static components = {\n    inputComponent: 'Input',\n  };\n  ref: React.RefObject<HTMLElement> = React.createRef();\n\n  render() {\n    const { inputComponent: Input, messages } = this.props;\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n\n    return (\n      <Plugin\n        name=\"SearchPanel\"\n        dependencies={pluginDependencies}\n      >\n        <Template name=\"toolbarContent\">\n          <TemplatePlaceholder />\n          <TemplateConnector>\n            {({ searchValue, isDataRemote },\n            { changeSearchValue, scrollToRow, setSearchPanelRef }) => {\n              const onValueChange = (value) => {\n                if (isDataRemote) {\n                  scrollToRow(TOP_POSITION);\n                }\n                changeSearchValue(value);\n              };\n              if (setSearchPanelRef) {\n                setSearchPanelRef(this.ref);\n              }\n\n              return <Input\n                value={searchValue}\n                inputRef={this.ref}\n                onValueChange={onValueChange}\n                getMessage={getMessage}\n              />;\n            }}\n          </TemplateConnector>\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders the Search Panel. */\nexport const SearchPanel: React.ComponentType<SearchPanelProps> = SearchPanelBase;\n","import * as React from 'react';\nimport {\n  Getter,\n  Template,\n  Plugin,\n  TemplatePlaceholder,\n  TemplateConnector,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  isFixedTableRow,\n  tableColumnsWithFixed,\n  tableHeaderRowsWithFixed,\n  tableHeaderColumnChainsWithFixed,\n  calculateFixedColumnProps,\n  isRowHighlighted,\n} from '@devexpress/dx-grid-core';\nimport {\n  TableCellProps, TableRowProps, TableFixedColumnsProps, TableFixedColumnsState,\n} from '../types';\n\nconst tableHeaderRowsComputed = (\n  { tableHeaderRows }: Getters,\n) => tableHeaderRowsWithFixed(tableHeaderRows);\nconst tableHeaderColumnChainsComputed = (\n  { tableColumns, tableHeaderRows, tableHeaderColumnChains }: Getters,\n) => tableHeaderColumnChainsWithFixed(tableHeaderColumnChains, tableHeaderRows, tableColumns);\n\nconst CellPlaceholder = props => <TemplatePlaceholder params={props} />;\n\nconst pluginDependencies = [\n  { name: 'Table' },\n  { name: 'TableBandHeader', optional: true },\n  { name: 'TableColumnReordering', optional: true },\n  { name: 'TableEditColumn', optional: true },\n  { name: 'TableEditRow', optional: true },\n  { name: 'TableFilterRow', optional: true },\n  { name: 'TableGroupRow', optional: true },\n  { name: 'TableHeaderRow', optional: true },\n  { name: 'TableRowDetail', optional: true },\n  { name: 'TableSelection', optional: true },\n  { name: 'TableSummaryRow', optional: true },\n  { name: 'TableTreeColumn', optional: true },\n];\n\n// tslint:disable-next-line: max-line-length\nclass TableFixedColumnsBase extends React.PureComponent<TableFixedColumnsProps, TableFixedColumnsState> {\n  static components = {\n    cellComponent: 'Cell',\n    listenerRowComponent: 'ListenerRow',\n    listenerCellComponent: 'ListenerCell',\n  };\n  static defaultProps = {\n    leftColumns: [],\n    rightColumns: [],\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tableColumnDimensions: {},\n    };\n  }\n\n  handleListenerSizeChange(key, width) {\n    const { tableColumnDimensions } = this.state;\n    if (tableColumnDimensions[key] !== width) {\n      this.setState(state => ({\n        tableColumnDimensions: {\n          ...state.tableColumnDimensions,\n          [key]: width,\n        },\n      }));\n    }\n  }\n\n  render() {\n    const {\n      cellComponent: Cell,\n      listenerRowComponent: ListenerRow,\n      listenerCellComponent: ListenerCell,\n    } = this.props;\n    const leftColumns = this.props.leftColumns!;\n    const rightColumns = this.props.rightColumns!;\n\n    const tableColumnsComputed = ({ tableColumns }: Getters) => tableColumnsWithFixed(\n      tableColumns,\n      leftColumns,\n      rightColumns,\n    );\n\n    return (\n      <Plugin\n        name=\"TableFixedColumns\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableHeaderRows\" computed={tableHeaderRowsComputed} />\n        <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n        <Getter name=\"tableHeaderColumnChains\" computed={tableHeaderColumnChainsComputed} />\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableColumn }: any) => !!tableColumn.fixed}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({\n                tableColumns, tableHeaderColumnChains, selection, focused, highlightSelectedRow,\n              }) => {\n                const selected = isRowHighlighted(highlightSelectedRow, selection,\n                  params.tableRow, focused);\n                const { tableColumnDimensions } = this.state;\n                const fixedColumnProps = calculateFixedColumnProps(\n                  params,\n                  { leftColumns, rightColumns },\n                  tableColumns,\n                  tableColumnDimensions,\n                  tableHeaderColumnChains,\n                );\n\n                return (\n                  <Cell\n                    {...params}\n                    {...fixedColumnProps}\n                    component={CellPlaceholder}\n                    selected={selected}\n                  />\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isFixedTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => (\n            <ListenerRow {...params} />\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow }: any) => !!isFixedTableRow(tableRow)}\n        >\n          {(params: TableCellProps) => (\n            <ListenerCell\n              {...params}\n              listen={!!params.tableColumn.fixed}\n              onSizeChange={({\n                width,\n              }) => this.handleListenerSizeChange(params.tableColumn.key, width)}\n            />\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that enables you to fix columns to the left and right sides of the grid. */\nexport const TableFixedColumns: React.ComponentType<TableFixedColumnsProps> = TableFixedColumnsBase;\n","import * as React from 'react';\nimport { Getter, Plugin, Getters } from '@devexpress/dx-react-core';\nimport { prepareGroupSummaryItems } from '@devexpress/dx-grid-core';\nimport { SummaryStateProps } from '../types';\n\nconst groupSummaryItemsComputed = (\n  { groupSummaryItems }: Getters,\n) => prepareGroupSummaryItems(groupSummaryItems);\n\nclass SummaryStateBase extends React.PureComponent<SummaryStateProps> {\n  static defaultProps = {\n    totalItems: [],\n    groupItems: [],\n    treeItems: [],\n  };\n\n  render() {\n    const { totalItems, groupItems, treeItems } = this.props;\n\n    return (\n      <Plugin\n        name=\"SummaryState\"\n      >\n        <Getter name=\"totalSummaryItems\" value={totalItems} />\n        <Getter name=\"groupSummaryItems\" value={groupItems} />\n        <Getter name=\"groupSummaryItems\" computed={groupSummaryItemsComputed} />\n        <Getter name=\"treeSummaryItems\" value={treeItems} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that provides items for total, group, and tree summaries. */\nexport const SummaryState: React.ComponentType<SummaryStateProps> = SummaryStateBase;\n","import * as React from 'react';\nimport { Getter, Plugin, Getters } from '@devexpress/dx-react-core';\nimport {\n  defaultSummaryCalculator,\n  totalSummaryValues,\n  groupSummaryValues,\n  treeSummaryValues,\n  SummaryCalculator,\n} from '@devexpress/dx-grid-core';\nimport { IntegratedSummaryProps, SummaryType } from '../types';\n\nconst pluginDependencies = [\n  { name: 'SummaryState' },\n  { name: 'IntegratedGrouping', optional: true },\n];\n\nclass IntegratedSummaryBase extends React.PureComponent<IntegratedSummaryProps> {\n  static defaultCalculator: SummaryCalculator = defaultSummaryCalculator;\n\n  render() {\n    const { calculator } = this.props;\n\n    const totalSummaryValuesComputed = ({\n      rows,\n      totalSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n      getCollapsedRows,\n    }: Getters) => totalSummaryValues(\n      rows,\n      totalSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n      getCollapsedRows,\n      calculator,\n    );\n\n    const groupSummaryValuesComputed = ({\n      rows,\n      groupSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n      getCollapsedRows,\n    }: Getters) => groupSummaryValues(\n      rows,\n      groupSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n      getCollapsedRows,\n      calculator,\n    );\n\n    const treeSummaryValuesComputed = ({\n      rows,\n      treeSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n      getRowId,\n    }: Getters) => treeSummaryValues(\n      rows,\n      treeSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n      getRowId,\n      calculator,\n    );\n\n    return (\n      <Plugin\n        name=\"IntegratedSummary\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"totalSummaryValues\" computed={totalSummaryValuesComputed} />\n        <Getter name=\"groupSummaryValues\" computed={groupSummaryValuesComputed} />\n        <Getter name=\"treeSummaryValues\" computed={treeSummaryValuesComputed} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that performs a built-in data summary calculation. */\nexport const IntegratedSummary: React.ComponentType<IntegratedSummaryProps> & {\n  /** The built-in summary calculator. */\n  defaultCalculator: (type: SummaryType, rows: Array<any>, getValue: (row: any) => any) => any;\n} = IntegratedSummaryBase;\n","import * as React from 'react';\nimport { Getter, Plugin } from '@devexpress/dx-react-core';\nimport { CustomSummaryProps } from '../types/summary/custom-summary.types';\n\nconst pluginDependencies = [\n  { name: 'SummaryState' },\n];\n\nclass CustomSummaryBase extends React.PureComponent<CustomSummaryProps> {\n  render() {\n    const { totalValues, groupValues, treeValues } = this.props;\n\n    return (\n      <Plugin\n        name=\"CustomSummary\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"totalSummaryValues\" value={totalValues} />\n        <Getter name=\"groupSummaryValues\" value={groupValues} />\n        <Getter name=\"treeSummaryValues\" value={treeValues} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that allows you to calculate a custom summary. */\nexport const CustomSummary: React.ComponentType<CustomSummaryProps> = CustomSummaryBase;\n","import * as React from 'react';\nimport {\n  Getter,\n  Template,\n  Plugin,\n  TemplateConnector,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  tableRowsWithSummaries,\n  tableRowsWithTotalSummaries,\n  isTotalSummaryTableCell,\n  isGroupSummaryTableCell,\n  isTreeSummaryTableCell,\n  isTotalSummaryTableRow,\n  isGroupSummaryTableRow,\n  isTreeSummaryTableRow,\n  getColumnSummaries,\n  TABLE_TREE_SUMMARY_TYPE,\n  TABLE_GROUP_SUMMARY_TYPE,\n  TABLE_TOTAL_SUMMARY_TYPE,\n  isFooterSummary,\n} from '@devexpress/dx-grid-core';\nimport { TableCellProps, TableRowProps, TableSummaryRowProps } from '../types';\nimport { TableSummaryContent } from '../components/summary/table-summary-content';\n\nconst dependencies = [\n  { name: 'DataTypeProvider', optional: true },\n  { name: 'SummaryState' },\n  { name: 'CustomSummary', optional: true },\n  { name: 'IntegratedSummary', optional: true },\n  { name: 'Table' },\n  { name: 'TableTreeColumn', optional: true },\n];\n\nconst tableBodyRowsComputed = ({\n  tableBodyRows,\n  getRowLevelKey,\n  isGroupRow,\n  getRowId,\n  groupSummaryItems,\n  treeSummaryItems,\n}: Getters) => tableRowsWithSummaries(\n  tableBodyRows, groupSummaryItems, treeSummaryItems, getRowLevelKey, isGroupRow, getRowId,\n);\nconst tableFooterRowsComputed = ({\n  tableFooterRows, totalSummaryItems,\n}: Getters) => totalSummaryItems.length\n  ? tableRowsWithTotalSummaries(tableFooterRows)\n  : tableFooterRows;\n\nexport class TableSummaryRowBase extends React.PureComponent<TableSummaryRowProps> {\n  static TREE_ROW_TYPE = TABLE_TREE_SUMMARY_TYPE;\n  static GROUP_ROW_TYPE = TABLE_GROUP_SUMMARY_TYPE;\n  static TOTAL_ROW_TYPE = TABLE_TOTAL_SUMMARY_TYPE;\n  static defaultProps = {\n    formatlessSummaryTypes: [],\n    messages: {},\n  };\n  static components = {\n    totalRowComponent: 'TotalRow',\n    groupRowComponent: 'GroupRow',\n    treeRowComponent: 'TreeRow',\n    totalCellComponent: 'TotalCell',\n    groupCellComponent: 'GroupCell',\n    treeCellComponent: 'TreeCell',\n    treeColumnCellComponent: 'TableTreeCell',\n    treeColumnContentComponent: 'TableTreeContent',\n    treeColumnIndentComponent: 'TableTreeIndent',\n    itemComponent: 'Item',\n  };\n\n  renderContent(column, columnSummaries) {\n    const {\n      formatlessSummaryTypes,\n      itemComponent: Item,\n      messages,\n    } = this.props;\n\n    return (\n      <TableSummaryContent\n        column={column}\n        columnSummaries={columnSummaries}\n        formatlessSummaryTypes={formatlessSummaryTypes}\n        itemComponent={Item}\n        messages={messages!}\n      />\n    );\n  }\n\n  render() {\n    const {\n      totalRowComponent: TotalRow,\n      groupRowComponent: GroupRow,\n      treeRowComponent: TreeRow,\n      totalCellComponent: TotalCell,\n      groupCellComponent: GroupCell,\n      treeCellComponent: TreeCell,\n      treeColumnCellComponent: TreeColumnCell,\n      treeColumnContentComponent: TreeColumnContent,\n      treeColumnIndentComponent: TreeColumnIndent,\n    } = this.props;\n\n    return (\n      <Plugin\n        name=\"TableSummaryRow\"\n        dependencies={dependencies}\n      >\n        <Getter name=\"tableBodyRows\" computed={tableBodyRowsComputed} />\n        <Getter name=\"tableFooterRows\" computed={tableFooterRowsComputed} />\n        <Template\n          name=\"tableCell\"\n          predicate={(\n            { tableRow, tableColumn }: any,\n          ) => isTotalSummaryTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({ totalSummaryItems, totalSummaryValues }) => {\n                const columnSummaries = getColumnSummaries(\n                  totalSummaryItems,\n                  params.tableColumn.column!.name,\n                  totalSummaryValues,\n                );\n                return (\n                  <TotalCell\n                    {...params}\n                    column={params.tableColumn.column!}\n                  >\n                    {this.renderContent(params.tableColumn.column, columnSummaries)}\n                  </TotalCell>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={(\n            { tableRow, tableColumn }: any,\n          ) => isGroupSummaryTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({ groupSummaryItems, groupSummaryValues }) => {\n                const columnSummaries = getColumnSummaries(\n                  groupSummaryItems,\n                  params.tableColumn.column!.name,\n                  groupSummaryValues[params.tableRow.row.compoundKey],\n                  summaryItem => isFooterSummary(summaryItem),\n                );\n                return (\n                  <GroupCell\n                    {...params}\n                    column={params.tableColumn.column!}\n                  >\n                    {this.renderContent(params.tableColumn.column, columnSummaries)}\n                  </GroupCell>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={(\n            { tableRow, tableColumn }: any,\n          ) => isTreeSummaryTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({\n                treeSummaryItems,\n                treeSummaryValues,\n                tableTreeColumnName,\n                getRowId,\n                getTreeRowLevel,\n              }) => {\n                const columnSummaries = getColumnSummaries(\n                  treeSummaryItems,\n                  params.tableColumn.column!.name,\n                  treeSummaryValues[getRowId(params.tableRow.row)],\n                );\n                if (tableTreeColumnName === params.tableColumn.column!.name) {\n                  return (\n                    <TreeColumnCell\n                      {...params}\n                      column={params.tableColumn.column!}\n                    >\n                      <TreeColumnIndent\n                        level={getTreeRowLevel(params.tableRow.row)}\n                      />\n                      <TreeColumnContent>\n                        {this.renderContent(params.tableColumn.column, columnSummaries)}\n                      </TreeColumnContent>\n                    </TreeColumnCell>\n                  );\n                }\n                return (\n                  <TreeCell\n                    {...params}\n                    column={params.tableColumn.column!}\n                  >\n                    {this.renderContent(params.tableColumn.column, columnSummaries)}\n                  </TreeCell>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isTotalSummaryTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => (\n            <TotalRow\n              {...params}\n            />\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isGroupSummaryTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => (\n            <GroupRow\n              {...params}\n            />\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isTreeSummaryTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => (\n            <TreeRow\n              {...params}\n            />\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders table rows that display a total, group, and tree summary. */\nexport const TableSummaryRow: React.ComponentType<TableSummaryRowProps> & {\n  /** The tree summary row type's indentifier. */\n  TREE_ROW_TYPE: symbol;\n  /** The group summary row type's indentifier. */\n  GROUP_ROW_TYPE: symbol;\n  /** The total row type's indentifier. */\n  TOTAL_ROW_TYPE: symbol;\n} = TableSummaryRowBase;\n","import * as React from 'react';\nimport { Getter, Action, Plugin, Getters, Actions } from '@devexpress/dx-react-core';\nimport {\n  virtualRowsWithCache, trimRowsToInterval, emptyVirtualRows, plainRows, loadedRowsStart,\n  VirtualRows, Interval, getAvailableRowCount, needFetchMorePages, getReferenceIndex,\n  shouldSendRequest, getRequestMeta,\n} from '@devexpress/dx-grid-core';\nimport { VirtualTableStateProps, VirtualTableStateState } from '../../types';\n\nconst virtualRowsComputed = (\n  { skip, rows, virtualRowsCache }: Getters,\n) => virtualRowsWithCache(skip, rows, virtualRowsCache);\n\nconst rowsComputed = (\n  { virtualRows, availableRowCount }: Getters,\n) => plainRows(virtualRows, availableRowCount);\n\nconst loadedRowsStartComputed = ({ virtualRows }: Getters) => loadedRowsStart(virtualRows);\n\n// tslint:disable-next-line: max-line-length\nclass VirtualTableStateBase extends React.PureComponent<VirtualTableStateProps, VirtualTableStateState> {\n  static defaultProps = {\n    pageSize: 100,\n  };\n  requestTimer: number = 0;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      virtualRowsCache: emptyVirtualRows,\n      requestedStartIndex: 0,\n      availableRowCount: props.totalRowCount || 0,\n      requestedEndIndex: 2 * props.pageSize,\n    };\n  }\n\n  setViewport = (\n    viewport,\n    { virtualRows }: Getters,\n    { requestNextPage }: Actions,\n  ) => {\n    const { pageSize } = this.props;\n    const referenceIndex = getReferenceIndex(viewport);\n\n    if (needFetchMorePages(virtualRows, referenceIndex, pageSize!)) {\n      requestNextPage({ referenceIndex });\n    }\n  }\n\n  requestNextPageAction = (\n    { referenceIndex, forceReload },\n    { virtualRows }: Getters,\n  ) => {\n    const { pageSize, totalRowCount, infiniteScrolling } = this.props;\n    const { requestedStartIndex, requestedEndIndex } = this.state;\n    const actualVirtualRows = forceReload ? emptyVirtualRows : virtualRows;\n    const { requestedRange, actualBounds } = getRequestMeta(\n      referenceIndex, virtualRows, pageSize!, totalRowCount, forceReload, infiniteScrolling,\n    );\n\n    if (forceReload || shouldSendRequest(requestedRange, requestedStartIndex, requestedEndIndex)) {\n      this.requestNextPage(requestedRange, actualVirtualRows, actualBounds);\n    }\n  }\n\n  requestNextPage(\n    requestedRange: Interval, virtualRows: VirtualRows, actualBounds: Interval,\n  ) {\n    const { getRows, infiniteScrolling, totalRowCount } = this.props;\n    const { availableRowCount: stateAvailableCount } = this.state;\n\n    if (this.requestTimer !== 0) {\n      clearTimeout(this.requestTimer);\n    }\n    this.requestTimer = window.setTimeout(() => {\n      const { start: requestedStartIndex, end } = requestedRange;\n      const loadCount = end - requestedStartIndex;\n      const virtualRowsCache = trimRowsToInterval(virtualRows, actualBounds);\n      const availableRowCount = getAvailableRowCount(\n        infiniteScrolling,\n        actualBounds.end,\n        stateAvailableCount,\n        totalRowCount,\n      );\n\n      getRows(requestedStartIndex, loadCount);\n\n      this.setState({\n        virtualRowsCache,\n        availableRowCount,\n        requestedStartIndex,\n        requestedEndIndex: end,\n      });\n    }, 50);\n  }\n\n  requestFirstPage() {\n    const { getRows, pageSize } = this.props;\n    const startIndex = 0;\n    const endIndex = 2 * pageSize!;\n\n    if (this.requestTimer !== 0) {\n      clearTimeout(this.requestTimer);\n    }\n    this.requestTimer = window.setTimeout(() => {\n      getRows(startIndex, endIndex);\n\n      this.setState({\n        virtualRowsCache: emptyVirtualRows,\n        requestedStartIndex: startIndex,\n        requestedEndIndex: endIndex,\n      });\n    }, 50);\n  }\n\n  clearRowsCacheAction = (\n    _: any,\n    __: Getters,\n    { requestNextPage }: Actions,\n  ) => {\n    this.setState({\n      virtualRowsCache: emptyVirtualRows,\n    });\n    requestNextPage({ forceReload: true });\n  }\n\n  resetVirtualTablePosition = () => this.requestFirstPage();\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      availableRowCount: prevAvailableRowCount = prevState.availableRowCount,\n      totalRowCount,\n      pageSize,\n      infiniteScrolling,\n    } = nextProps;\n    const {\n      requestedStartIndex: prevRequestedStartIndex,\n      virtualRowsCache: prevVirtualRowCache,\n    } = prevState;\n\n    const availableRowCount = getAvailableRowCount(\n      infiniteScrolling,\n      pageSize * 2,\n      prevAvailableRowCount,\n      totalRowCount,\n    );\n    const requestedStartIndex = Math.max(\n      Math.min(prevRequestedStartIndex, availableRowCount - pageSize),\n      0,\n    );\n    const virtualRowsCache =\n      prevRequestedStartIndex === requestedStartIndex\n        ? prevVirtualRowCache\n        : emptyVirtualRows;\n\n    return {\n      availableRowCount,\n      requestedStartIndex,\n      virtualRowsCache,\n    };\n  }\n\n  componentDidMount() {\n    const { getRows, pageSize, infiniteScrolling, totalRowCount } = this.props;\n    getRows(0, 2 * pageSize!);\n\n    const newRowCount = infiniteScrolling ? 2 * pageSize! : totalRowCount;\n    this.setState({\n      availableRowCount: newRowCount,\n    });\n  }\n\n  componentWillUnmount() {\n    if (this.requestTimer !== 0) {\n      window.clearTimeout(this.requestTimer);\n    }\n  }\n\n  render() {\n    const { virtualRowsCache, availableRowCount } = this.state;\n    const { skip, pageSize, loading, infiniteScrolling } = this.props;\n\n    return (\n      <Plugin\n        name=\"VirtualTableState\"\n      >\n        <Getter name=\"isDataRemote\" value />\n        <Getter name=\"isDataLoading\" value={loading} />\n        <Getter name=\"isScrollingInfinite\" value={infiniteScrolling} />\n        <Getter name=\"skip\" value={skip} />\n        <Getter name=\"virtualRowsCache\" value={virtualRowsCache} />\n        <Getter name=\"pageSize\" value={pageSize} />\n        <Getter name=\"availableRowCount\" value={availableRowCount} />\n\n        <Getter name=\"virtualRows\" computed={virtualRowsComputed} />\n        <Getter name=\"rows\" computed={rowsComputed} />\n        <Getter name=\"loadedRowsStart\" computed={loadedRowsStartComputed} />\n\n        <Action name=\"requestNextPage\" action={this.requestNextPageAction} />\n        <Action name=\"setViewport\" action={this.setViewport} />\n        <Action name=\"clearRowCache\" action={this.clearRowsCacheAction} />\n        <Action name=\"changeColumnSorting\" action={this.clearRowsCacheAction} />\n        <Action name=\"changeColumnFilter\" action={this.resetVirtualTablePosition} />\n        <Action name=\"changeSearchValue\" action={this.resetVirtualTablePosition} />\n        <Action name=\"changeColumnGrouping\" action={this.resetVirtualTablePosition} />\n      </Plugin>\n    );\n  }\n}\n\nexport const VirtualTableState: React.ComponentType<VirtualTableStateProps> = VirtualTableStateBase;\n","import * as React from 'react';\nimport {\n  Template,\n  TemplatePlaceholder,\n  TemplateConnector,\n  Plugin,\n  Getter,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  getRowChange,\n  TABLE_DATA_TYPE,\n  rowsWithEditingCells,\n  columnsWithEditingCells,\n} from '@devexpress/dx-grid-core';\nimport { TableInlineCellEditingProps, TableCellProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'EditingState' },\n  { name: 'Table' },\n  { name: 'DataTypeProvider', optional: true },\n];\n\nconst rowsWithEditingCellsComputed = (\n  { tableBodyRows, editingCells }: Getters,\n) => rowsWithEditingCells(tableBodyRows, editingCells);\nconst columnsWithEditingCellsComputed = (\n  { tableColumns, editingCells }: Getters,\n) => columnsWithEditingCells(tableColumns, editingCells);\n\n/* tslint:disable-next-line max-line-length*/\nconst INLINE_CELL_EDITING_ERROR = 'The startEditAction property of the InlineCellEditing plugin is given an invalid value.';\n\n// tslint:disable-next-line: max-line-length\nconst TableInlineCellEditingBase: React.SFC<TableInlineCellEditingProps> & {components: {cellComponent: string}} = (props) => {\n  const { cellComponent: EditCell, startEditAction, selectTextOnEditStart } = props;\n\n  return (\n    <Plugin name=\"TableInlineCellEditing\" dependencies={pluginDependencies}>\n      <Getter name=\"tableBodyRows\" computed={rowsWithEditingCellsComputed} />\n      <Getter name=\"tableColumns\" computed={columnsWithEditingCellsComputed} />\n      <Template\n        name=\"tableCell\"\n        predicate={({ tableRow, tableColumn }: any) =>\n          tableRow.type === TABLE_DATA_TYPE &&\n          tableColumn.type === TABLE_DATA_TYPE\n        }\n      >\n        {(params: TableCellProps) => (\n          <TemplateConnector>\n            {({}, { startEditCells }) => {\n              const { tableRow : { rowId }, tableColumn: { column } } = params;\n              const { name: columnName } = column!;\n\n              if (startEditAction !== 'click' && startEditAction !== 'doubleClick') {\n                throw new Error(INLINE_CELL_EDITING_ERROR);\n              }\n\n              const startEditCellCallback = () =>\n                startEditCells({\n                  editingCells: [{ rowId, columnName }],\n                });\n              const eventName = startEditAction === 'click' ? 'onClick' : 'onDoubleClick';\n              const newParams = { ...params, [eventName]: startEditCellCallback };\n\n              return <TemplatePlaceholder params={newParams} />;\n            }}\n          </TemplateConnector>\n        )}\n      </Template>\n      <Template\n        name=\"tableCell\"\n        predicate={({ tableRow, tableColumn }: any) =>\n          tableRow.hasEditCell && tableColumn.hasEditCell\n        }\n      >\n        {(params: TableCellProps) => (\n          <TemplateConnector>\n            {(\n              { getCellValue, createRowChange, rowChanges, isColumnEditingEnabled },\n              { changeRow, stopEditCells, commitChangedRows, cancelChangedRows },\n            ) => {\n              const { tableRow : { rowId, row }, tableColumn: { column } } = params;\n              const { name: columnName } = column!;\n\n              const changedRow = {\n                ...row,\n                ...getRowChange(rowChanges, rowId!),\n              };\n\n              const value = getCellValue(changedRow, columnName);\n              const onValueChange = (newValue: any) => {\n                const changeArgs = {\n                  rowId,\n                  change: createRowChange(changedRow, newValue, columnName),\n                };\n                changeRow(changeArgs);\n              };\n              const onKeyDown = ({ key }) => {\n                if (key === 'Enter') {\n                  commitChangedRows({ rowIds: [rowId] });\n                  stopEditCells({ editingCells: [{ rowId, columnName }] });\n                } else if (key === 'Escape') {\n                  cancelChangedRows({ rowIds: [rowId] });\n                  stopEditCells({ editingCells: [{ rowId, columnName }] });\n                }\n              };\n              const onBlur = () => {\n                commitChangedRows({ rowIds: [rowId] });\n                stopEditCells({ editingCells: [{ rowId, columnName }] });\n              };\n              const onFocus = selectTextOnEditStart ? e => e.target.select() : () => {};\n              const editingEnabled = isColumnEditingEnabled(columnName);\n\n              return (\n                <TemplatePlaceholder\n                  name=\"valueEditor\"\n                  params={{\n                    column,\n                    row,\n                    value,\n                    onValueChange,\n                    disabled: !editingEnabled,\n                  }}\n                >\n                  {content => (\n                    <EditCell\n                      {...params}\n                      row={row}\n                      column={column!}\n                      value={value}\n                      editingEnabled={editingEnabled}\n                      onValueChange={onValueChange}\n                      autoFocus\n                      onKeyDown={onKeyDown}\n                      onBlur={onBlur}\n                      onFocus={onFocus}\n                    >\n                      {content}\n                    </EditCell>\n                  )}\n                </TemplatePlaceholder>\n              );\n            }}\n          </TemplateConnector>\n        )}\n      </Template>\n    </Plugin>\n  );\n};\n\nTableInlineCellEditingBase.components = {\n  cellComponent: 'Cell',\n};\n\nTableInlineCellEditingBase.defaultProps = {\n  startEditAction: 'click',\n  selectTextOnEditStart: false,\n};\n\n// tslint:disable-next-line: max-line-length\nexport const TableInlineCellEditing: React.ComponentType<TableInlineCellEditingProps> = TableInlineCellEditingBase;\n","import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Template, TemplatePlaceholder, Plugin, TemplateConnector,\n} from '@devexpress/dx-react-core';\nimport { ExportPanelProps, ExportPanelState } from '../types';\n\nconst defaultMessages = {\n  showExportMenu: 'Export',\n  exportAll: 'Export all data',\n  exportSelected: 'Export selected rows',\n};\n\nclass ExportPanelBase extends React.PureComponent<ExportPanelProps, ExportPanelState> {\n  static components = {\n    toggleButtonComponent: 'ToggleButton',\n    menuComponent: 'Menu',\n    menuItemComponent: 'MenuItem',\n  };\n  button!: React.ReactInstance;\n  state = { visible: false };\n\n  setButtonRef = button => this.button = button;\n\n  handleToggle = () => {\n    const { visible } = this.state;\n    this.setState({ visible: !visible });\n  }\n\n  handleHide = () => this.setState({ visible: false });\n\n  render() {\n    const {\n      toggleButtonComponent: ToggleButton,\n      menuComponent: Menu,\n      menuItemComponent: MenuItem,\n      messages,\n      startExport,\n    } = this.props;\n    const {\n      visible,\n    } = this.state;\n\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n\n    return (\n      <Plugin\n        name=\"ExportPanel\"\n        dependencies={[\n          { name: 'SelectionState', optional: true },\n          { name: 'Toolbar' },\n        ]}\n      >\n        <Template name=\"toolbarContent\">\n          <TemplatePlaceholder />\n          <TemplateConnector>\n            {({ selection }) => (\n              <>\n                <ToggleButton\n                  buttonRef={this.setButtonRef}\n                  onToggle={this.handleToggle}\n                  getMessage={getMessage}\n                />\n                <Menu\n                  visible={visible}\n                  onHide={this.handleHide}\n                  target={this.button}\n                >\n                  <MenuItem\n                    key=\"exportAll\"\n                    text={getMessage('exportAll')}\n                    onClick={() => {\n                      this.handleHide();\n                      startExport();\n                    }}\n                  />\n                  {selection?.length ? (\n                    <MenuItem\n                      key=\"exportSelected\"\n                      text={getMessage('exportSelected')}\n                      onClick={() => {\n                        this.handleHide();\n                        startExport({ selectedOnly: true });\n                      }}\n                    />\n                  ) : null}\n                </Menu>\n              </>\n            )}\n          </TemplateConnector>\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nexport const ExportPanel: React.ComponentType<any> = ExportPanelBase;\n","import * as React from 'react';\nimport {\n Plugin, TemplateConnector, Action, Template, TemplatePlaceholder, Getter,\n} from '@devexpress/dx-react-core';\nimport {\n  TABLE_ADDED_TYPE, TABLE_DATA_TYPE, TABLE_FLEX_TYPE,\n  getNextFocusedCell,  getPart, getIndexToFocus,\n  isCellExist, focus, isTabArrowUpDown,\n  filterHeaderRows, Elements, isDataTableRow, isRowFocused, getClosestCellByRow,\n  isCellFocused, getFocusing, RIGHT_POSITION, LEFT_POSITION,\n} from '@devexpress/dx-grid-core';\nimport {\n  TableKeyboardNavigationProps, TableKeyboardNavigationCoreProps, TableKeyboardNavigationCoreState,\n  TableCellProps, TableRowProps,\n} from '../types';\n\nconst CellPlaceholder = (props: TableCellProps) => <TemplatePlaceholder params={props} />;\nconst RowPlaceholder = (props: TableRowProps) => <TemplatePlaceholder params={props} />;\n\nclass TableKeyboardNavigationCore extends React.PureComponent<TableKeyboardNavigationCoreProps,\nTableKeyboardNavigationCoreState> {\n  elements: Elements = {};\n  searchPanelRef: React.RefObject<HTMLElement> | undefined;\n\n  constructor(props) {\n    super(props);\n\n    const focusedCell = props.focusedCell || props.defaultFocusedCell;\n\n    this.state = {\n      focusedElement: focusedCell ?\n      { part: TABLE_DATA_TYPE.toString(), ...focusedCell } : focusedCell,\n    };\n    this.handleKeyDownOnWidget = this.handleKeyDownOnWidget.bind(this);\n    this.updateRef = this.updateRef.bind(this);\n    this.setFocusedElement = this.setFocusedElement.bind(this);\n    this.setSearchPanelRef = this.setSearchPanelRef.bind(this);\n  }\n\n  static getDerivedStateFromProps(\n    props: TableKeyboardNavigationCoreProps, state: TableKeyboardNavigationCoreState,\n  ): TableKeyboardNavigationCoreState {\n    const focusedCell = props.focusedCell !== undefined ? props.focusedCell : state.focusedElement;\n    return {\n      focusedElement: focusedCell ? {\n        part: TABLE_DATA_TYPE.toString(),\n        ...focusedCell,\n      } : undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.props.rootRef.current!.addEventListener('keydown', this.handleKeyDownOnWidget);\n  }\n\n  componentWillUnmount() {\n    this.props.rootRef.current!.removeEventListener('keydown', this.handleKeyDownOnWidget);\n  }\n\n  pushRef(ref, key1, key2) {\n    const { focusedElement } = this.state;\n    const { tableColumns } = this.props;\n    if (!this.elements[key1]) {\n      this.elements[key1] = [];\n    }\n    if (!this.elements[key1][key2]) {\n      this.elements[key1][key2] = [];\n    }\n\n    this.elements[key1][key2].push(ref);\n\n    if (focusedElement?.rowKey === key1 && focusedElement?.columnKey === key2) {\n      focus(this.elements, focusedElement, undefined, this.props.onFocusedCellChange);\n    }\n\n    if (key1.toString().includes(TABLE_ADDED_TYPE.toString()) &&\n    key2 === tableColumns[0].key) {\n      this.changeFocusedElement({\n        part: TABLE_DATA_TYPE.toString(),\n        columnKey: key2,\n        rowKey: key1,\n      }, focusedElement);\n    }\n  }\n\n  setSearchPanelRef(ref) {\n    this.searchPanelRef = ref;\n  }\n\n  removeRef(key1, key2) {\n    delete this.elements[key1][key2];\n    if (Object.keys(this.elements[key1]).length === 0) {\n      delete this.elements[key1];\n    }\n  }\n\n  updateRef({ ref, key1, key2, action }) {\n    if (action === 'add') {\n      this.pushRef(ref, key1, key2);\n    } else {\n      this.removeRef(key1, key2);\n    }\n  }\n\n  changeFocusedElement(focusedCell, prevFocusedCell) {\n    const { onFocusedCellChange } = this.props;\n    this.setState({\n      focusedElement: focusedCell,\n    });\n    focus(this.elements, focusedCell, prevFocusedCell, onFocusedCellChange);\n  }\n\n  handleKeyDownOnWidget(event) {\n    const { focusedElement } = this.state;\n    const {\n      tableColumns, tableBodyRows, tableHeaderRows, expandedRowIds, scrollToColumn, inlineEditing,\n    } = this.props;\n\n    if (event.key === 'f' && (event.ctrlKey || event.metaKey)) {\n      if (this.searchPanelRef) {\n        event.preventDefault();\n        this.searchPanelRef.current?.click();\n      }\n      if (focusedElement) {\n        this.changeFocusedElement(undefined, focusedElement);\n      }\n      return;\n    }\n\n    if (focusedElement && !isCellExist(this.elements, focusedElement) && event.key === 'Tab') {\n      const focusedCell = getClosestCellByRow(tableBodyRows, focusedElement, this.elements);\n      event.preventDefault();\n      this.changeFocusedElement(focusedCell, focusedElement);\n      return;\n    }\n\n    if (focusedElement || isTabArrowUpDown(event)) {\n      const { element, scrolling } = getNextFocusedCell(tableColumns, tableBodyRows,\n        tableHeaderRows, expandedRowIds, this.elements, event, inlineEditing,\n        focusedElement, scrollToColumn);\n\n      if (element) {\n        if (scrolling) {\n          scrollToColumn(scrolling === 'left' ? LEFT_POSITION : RIGHT_POSITION);\n        }\n        event.preventDefault();\n        this.changeFocusedElement(element, focusedElement);\n      } else if (isTabArrowUpDown(event) && focusedElement) {\n        this.changeFocusedElement(undefined, focusedElement);\n      }\n    }\n  }\n\n  setFocusedElement({ key1, key2, event }) {\n    const { focusedElement } = this.state;\n    const { inlineEditing } = this.props;\n    if (key1 === 'paging' || key1 === 'toolbar') {\n      this.changeFocusedElement(undefined, focusedElement);\n    } else if (key2.includes(TABLE_FLEX_TYPE.toString())) {\n      const columnKey = this.props.tableColumns[0].key;\n      this.changeFocusedElement({\n        rowKey: key1,\n        columnKey,\n        index: -1,\n        part: getPart(key1),\n      }, focusedElement);\n    } else {\n      const part = getPart(key1);\n      this.changeFocusedElement({\n        rowKey: key1,\n        columnKey: key2,\n        index: getIndexToFocus(key1, key2, this.elements, event, inlineEditing, part),\n        part,\n      }, focusedElement);\n    }\n  }\n\n  render() {\n    const {\n      cellComponent: Cell,\n      rowComponent: Row,\n      focusedRowEnabled,\n      tableBodyRows,\n    } = this.props;\n    const { focusedElement } = this.state;\n    const getFocusedGetter = () => getFocusing(tableBodyRows, focusedElement);\n    return (\n      <Plugin\n        name=\"TableKeyboardNavigationCore\"\n      >\n        <Action name=\"setSearchPanelRef\" action={this.setSearchPanelRef} />\n        {focusedRowEnabled &&\n          <Getter name=\"highlightSelectedRow\" value />\n        }\n        {focusedRowEnabled &&\n          <Getter name=\"focused\" computed={getFocusedGetter} />\n        }\n        <Template name=\"tableCell\">\n          {(params: TableCellProps) => (\n            <Cell\n              {...params}\n              component={CellPlaceholder}\n              tabIndex={0}\n              updateRefForKeyboardNavigation={this.updateRef}\n              setFocusedElement={this.setFocusedElement}\n              focused={isCellFocused(params.tableRow, params.tableColumn, focusedElement)}\n            />\n          )}\n        </Template>\n        <Template name=\"header\">\n          <TemplatePlaceholder\n            params={{\n              updateRefForKeyboardNavigation: this.updateRef,\n              setFocusedElement: this.setFocusedElement,\n            }}\n          />\n        </Template>\n        <Template name=\"footer\">\n          <TemplatePlaceholder\n            params={{\n              updateRefForKeyboardNavigation: this.updateRef,\n              setFocusedElement: this.setFocusedElement,\n            }}\n          />\n        </Template>\n        {(focusedRowEnabled) && (\n          <Template\n            name=\"tableRow\"\n            predicate={({ tableRow }: any) => !!isDataTableRow(tableRow)}\n          >\n            {(params: TableRowProps) => (\n              <Row\n                {...params}\n                component={RowPlaceholder}\n                focused={isRowFocused(params.tableRow, focusedElement?.rowKey)}\n              />\n            )}\n          </Template>\n        )}\n      </Plugin>\n    );\n  }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nclass TableKeyboardNavigationBase extends React.PureComponent<TableKeyboardNavigationProps> {\n  static components = {\n    cellComponent: 'Cell',\n    rowComponent: 'Row',\n  };\n  render() {\n    return (\n      <Plugin\n        name=\"TableKeyboardNavigation\"\n        dependencies={[\n          { name: 'Table' },\n        ]}\n      >\n        <TemplateConnector>\n        {(\n          { tableColumns, tableBodyRows, rootRef, tableHeaderRows, expandedRowIds },\n          { scrollToColumn, stopEditCells, commitChangedRows, cancelChangedRows, startEditCells },\n        ) => {\n          return rootRef.current ? (\n            <TableKeyboardNavigationCore\n              tableColumns={tableColumns}\n              tableBodyRows={tableBodyRows}\n              rootRef={rootRef}\n              tableHeaderRows={filterHeaderRows(tableHeaderRows)}\n              expandedRowIds={expandedRowIds}\n              scrollToColumn={scrollToColumn}\n              inlineEditing={{\n                stopEditCells,\n                commitChangedRows,\n                cancelChangedRows,\n                startEditCells,\n              }}\n              {...this.props}\n            />\n          ) : null;\n        }}\n        </TemplateConnector>\n      </Plugin>\n    );\n  }\n}\n\n// tslint:disable-next-line: max-line-length\nexport const TableKeyboardNavigation: React.ComponentType<TableKeyboardNavigationProps> = TableKeyboardNavigationBase;\n","export const getRowStyle = ({ row }) => (row.height !== undefined\n  ? ({ height: `${row.height}px` })\n  : undefined);\n\nexport const isNumber = (value: string | number) =>\n  typeof value === 'number' || !Number.isNaN(Number(value));\n","/* globals requestAnimationFrame cancelAnimationFrame */\n\nimport * as React from 'react';\nimport {\n  getAnimations,\n  filterActiveAnimations,\n  evalAnimations,\n  TABLE_FLEX_TYPE,\n  ColumnAnimationMap,\n} from '@devexpress/dx-grid-core';\nimport { shallowEqual } from '@devexpress/dx-core';\nimport { TableLayoutCoreProps, TableLayoutCoreState } from '../types';\nimport { isNumber } from '../utils/helpers';\n\nclass TableLayoutBase extends React.PureComponent<TableLayoutCoreProps, TableLayoutCoreState> {\n  animations: ColumnAnimationMap;\n  savedScrollWidth: { [key: number]: number };\n  savedOffsetWidth = -1;\n  tableRef: React.RefObject<HTMLTableElement>;\n  raf = -1;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      animationState: new Map(),\n    };\n\n    this.animations = new Map();\n    this.savedScrollWidth = {};\n    this.tableRef = React.createRef();\n  }\n\n  componentDidMount() {\n    if (this.tableRef.current) {\n      const { forwardedRef } = this.props;\n      if (typeof forwardedRef === 'function') {\n        forwardedRef(this.tableRef.current);\n      } else if (forwardedRef) {\n        forwardedRef.current = this.tableRef.current;\n      }\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { columns } = this.props;\n    const { columns: prevColumns } = prevProps;\n    const { animationState } = this.state;\n\n    const activeAnimationExists = !shallowEqual(columns, prevColumns)\n      || !!animationState.size || !!this.animations.size;\n\n    // NOTE: animation should be recomputed only when columns are changed or\n    // an active animation is in progress. Otherwise it will be recalculated on\n    // each scroll event.\n    if (activeAnimationExists) {\n      this.processAnimation(prevColumns);\n    }\n  }\n\n  processAnimation(prevColumns) {\n    const { columns } = this.props;\n    const tableWidth = this.getTableWidth(prevColumns, columns);\n\n    this.animations = getAnimations(prevColumns, columns, tableWidth, this.animations);\n\n    cancelAnimationFrame(this.raf);\n    this.raf = requestAnimationFrame(this.processAnimationFrame.bind(this));\n  }\n\n  getTableWidth(prevColumns, columns) {\n    const { offsetWidth, scrollWidth } = this.tableRef.current!;\n    const { animationState } = this.state;\n\n    const widthChanged = this.savedOffsetWidth !== offsetWidth\n      || !this.savedScrollWidth[columns.length];\n    const columnCountChanged = columns.length !== prevColumns.length;\n\n    if (columnCountChanged || (widthChanged && !animationState.size)) {\n      this.savedScrollWidth = {};\n      this.savedScrollWidth[columns.length] = scrollWidth;\n      this.savedOffsetWidth = offsetWidth;\n    }\n\n    return this.savedScrollWidth[columns.length];\n  }\n\n  getColumns() {\n    const { columns } = this.props;\n    const { animationState } = this.state;\n\n    let result = columns;\n\n    const isFixedWidth = columns\n      .filter(column => column.width === undefined || column.width === 'auto')\n      .length === 0;\n    if (isFixedWidth) {\n      // presumably a flex column added here instead of in a getter in the Table plugin\n      // to make sure that all manipulations on taleColumns have already done earlier\n      result = [...result, { key: TABLE_FLEX_TYPE.toString(), type: TABLE_FLEX_TYPE }];\n    }\n\n    if (animationState.size) {\n      result = result\n        .map(column => (animationState.has(column.key)\n          ? { ...column, animationState: animationState.get(column.key) }\n          : column));\n    }\n\n    return result;\n  }\n\n  processAnimationFrame() {\n    const { animationState: animationComponentState } = this.state;\n    this.animations = filterActiveAnimations(this.animations);\n\n    if (!this.animations.size) {\n      if (animationComponentState.size) {\n        this.setState({ animationState: new Map() });\n      }\n      return;\n    }\n\n    const animationState = evalAnimations(this.animations);\n    this.setState({ animationState });\n  }\n\n  render() {\n    const {\n      layoutComponent: Layout,\n      minColumnWidth,\n      forwardedRef,\n      ...restProps\n    } = this.props;\n    const columns = this.getColumns();\n    const minWidth = columns\n      .map(column => column.width || (column.type === TABLE_FLEX_TYPE ? 0 : minColumnWidth))\n      .filter(value => value !== 'auto' && value !== 0)\n      .map(value => isNumber(value) ? `${value}px` : value)\n      .join(' + ');\n\n    return (\n      <Layout\n        {...restProps}\n        tableRef={this.tableRef}\n        columns={columns}\n        minWidth={minWidth}\n        minColumnWidth={minColumnWidth}\n      />\n    );\n  }\n}\n\n/** @internal */\nexport const TableLayout: React.ComponentType<TableLayoutCoreProps> = TableLayoutBase;\n","import * as React from 'react';\nimport { VirtualRowLayoutProps } from '../../types';\nimport { getRowStyle } from '../../utils/helpers';\n\nconst shouldUpdateRow = (prevProps, nextProps) => {\n  const { cells: prevCells, row: prevRow } = prevProps;\n  const { cells: nextCells, row: nextRow } = nextProps;\n\n  if (prevRow !== nextRow || prevCells.length !== nextCells.length) {\n    return false;\n  }\n\n  return !nextCells.some((nextCell, i) => {\n    const prevCell = prevCells[i];\n    return prevCell.column !== nextCell.column || prevCell.colSpan !== nextCell.colSpan;\n  });\n};\n\nexport const VirtualRowLayout = React.memo<VirtualRowLayoutProps>(({\n  row, cells, rowComponent: Row, cellComponent: Cell, forwardedRef,\n}) => {\n  return (\n    <Row\n      forwardedRef={forwardedRef}\n      tableRow={row}\n      style={getRowStyle({ row })}\n    >\n      {cells.map(({ column, colSpan }) => {\n        return (\n          <Cell\n            key={column.key}\n            tableRow={row}\n            tableColumn={column}\n            colSpan={colSpan}\n          />\n        );\n      })}\n    </Row>\n  );\n}, shouldUpdateRow);\n","import * as React from 'react';\nimport { VirtualTableLayoutBlockProps } from '../../types';\nimport { VirtualRowLayout } from './virtual-row-layout';\n\n// tslint:disable-next-line: max-line-length\nexport class VirtualTableLayoutBlock extends React.PureComponent<VirtualTableLayoutBlockProps, any> {\n  render() {\n    const {\n      collapsedGrid,\n      rowRefsHandler,\n      bodyComponent: Body,\n      cellComponent,\n      rowComponent,\n      isFixed,\n    } = this.props;\n\n    return (\n      <Body isFixed={isFixed}>\n        {collapsedGrid.rows.map((visibleRow) => {\n          const { row, cells = [] } = visibleRow;\n\n          return (\n            <VirtualRowLayout\n              key={row.key}\n              row={row}\n              cells={cells}\n              forwardedRef={ref => rowRefsHandler(row, ref)}\n              rowComponent={rowComponent}\n              cellComponent={cellComponent}\n            />\n          );\n        })}\n        </Body>\n    );\n  }\n\n}\n","import * as React from 'react';\nimport { TableColumn } from '@devexpress/dx-grid-core';\n\n/** @internal */\nexport class ColumnGroup extends React.PureComponent<{ columns: TableColumn[] }> {\n  render() {\n    const { columns } = this.props;\n\n    return (\n      <colgroup>\n        {columns.map(({ key, width }) => {\n          const styleWidth = typeof width === 'number' ? `${width}px` : width;\n          return (\n            <col\n              key={key}\n              style={width !== undefined\n                ? { width: styleWidth }\n                : undefined}\n            />\n          );\n        })}\n      </colgroup>\n    );\n  }\n}\n","import * as React from 'react';\nimport { MemoizedFunction, memoize } from '@devexpress/dx-core';\nimport {\n  TableColumn, GetColumnWidthFn, getCollapsedGrids,\n  getColumnWidthGetter, TABLE_STUB_TYPE, getViewport, GridViewport, getScrollLeft,\n  isColumnsWidthDifferent,\n} from '@devexpress/dx-grid-core';\nimport { VirtualTableLayoutState, VirtualTableLayoutProps } from '../../types';\nimport { VirtualTableLayoutBlock } from './virtual-table-layout-block';\nimport { Sizer } from '@devexpress/dx-react-core';\nimport { ColumnGroup } from './column-group';\n\nconst AUTO_HEIGHT = 'auto';\nconst MAX_WINDOW_HEIGHT = 10000000;\nconst FACTOR = 3;\n\nconst defaultProps = {\n  headerRows: [],\n  footerRows: [],\n  headComponent: () => null,\n  footerComponent: () => null,\n  tableComponent: () => null,\n  containerComponent: React.forwardRef(() => null),\n};\ntype PropsType = VirtualTableLayoutProps & typeof defaultProps;\n\n/** @internal */\n// tslint:disable-next-line: max-line-length\nexport class VirtualTableLayout extends React.PureComponent<PropsType, VirtualTableLayoutState> {\n  static defaultProps = defaultProps;\n  getColumnWidthGetter: MemoizedFunction<[TableColumn[], number, number], GetColumnWidthFn>;\n  rowRefs = new Map<any, HTMLElement>();\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      viewportTop: 0,\n      skipItems: [0, 0],\n      containerHeight: 600,\n      containerWidth: 800,\n      viewportLeft: 0,\n    };\n\n    this.getColumnWidthGetter = memoize(\n      (tableColumns, tableWidth, minColumnWidth) => (\n        getColumnWidthGetter(tableColumns, tableWidth, minColumnWidth)\n      ),\n    );\n  }\n\n  getCountSkipRows() {\n    const containerHeight = this.props.totalRowCount * this.props.estimatedRowHeight;\n    if (containerHeight > MAX_WINDOW_HEIGHT) {\n      return Math.round(this.props.totalRowCount - MAX_WINDOW_HEIGHT /\n        this.props.estimatedRowHeight);\n    }\n    return 0;\n  }\n\n  registerRowRef = (row, ref) => {\n    if (row.type === TABLE_STUB_TYPE) {\n      return;\n    }\n    if (ref === null) {\n      this.rowRefs.delete(row.key);\n    } else {\n      this.rowRefs.set(row.key, ref);\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { bodyRows, columns } = this.props;\n    // NOTE: the boundaries depend not only on scroll position and container dimensions\n    // but on body rows too. This boundaries update is especially important when\n    // lazy loading is used because by the time that all involved events are handled\n    // no rows are loaded yet.\n    const bodyRowsChanged = prevProps.bodyRows !== bodyRows;\n    // Also it's the only place where we can respond to the column count change\n    const columnCountChanged = prevProps.columns.length !== columns.length;\n\n    const { viewportTop, viewportLeft, containerWidth, containerHeight } = this.state;\n    const viewportTopChanged = prevState.viewportTop !== viewportTop;\n    const viewportLeftChanged = prevState.viewportLeft !== viewportLeft;\n    const containerWidthChanged = prevState.containerWidth !== containerWidth;\n    const containerHeightChanged = prevState.containerHeight !== containerHeight;\n\n    if (prevProps.totalRowCount !== this.props.totalRowCount) {\n      const countSkipRows = this.getCountSkipRows();\n      const { skipItems } = this.state;\n      if (countSkipRows !== 0 && skipItems[0] === 0 && skipItems[1] === 0) {\n        this.setState({\n          skipItems: [0, countSkipRows],\n        });\n      }\n    }\n\n    if (bodyRowsChanged || columnCountChanged || columns[0].width !== undefined &&\n      isColumnsWidthDifferent(prevProps.columns, columns) || viewportTopChanged ||\n      viewportLeftChanged || containerWidthChanged || containerHeightChanged\n      ) {\n      this.updateViewport();\n    }\n  }\n\n  getRowHeight = (row) => {\n    if (row) {\n      const realHeight = this.rowRefs.get(row.key)?.getBoundingClientRect().height;\n      return row.height || realHeight || this.props.estimatedRowHeight;\n    }\n    return this.props.estimatedRowHeight;\n  }\n\n  onScroll = (e) => {\n    const node = e.target;\n\n    if (this.shouldSkipScrollEvent(e)) {\n      return;\n    }\n\n    const { scrollTop: viewportTop, scrollLeft: viewportLeft } = node;\n    const {\n      containerHeight,\n      skipItems,\n      viewportTop: prevViewPort,\n    } = this.state;\n\n    const countSkipRows = this.getCountSkipRows();\n    const dif = viewportTop - prevViewPort;\n    const pxInPercent = viewportTop / MAX_WINDOW_HEIGHT;\n    // on scrolling with touchpad or mouse viewport difference less then FACTOR * container height\n    // and skipItems must not recalculated\n    const isDif = Math.abs(dif) < FACTOR * containerHeight;\n    const top = Math.min(Math.round(pxInPercent * countSkipRows), countSkipRows);\n\n    this.setState({\n      viewportTop,\n      viewportLeft,\n      skipItems: isDif ? skipItems : [top, countSkipRows - top],\n    });\n  }\n\n  handleContainerSizeChange = ({ width, height }) => {\n    this.setState({\n      containerHeight: height,\n      containerWidth: width,\n    });\n  }\n\n  shouldSkipScrollEvent(e) {\n    const node = e.target;\n\n    // NOTE: prevent nested scroll to update viewport\n    if (node !== e.currentTarget) {\n      return true;\n    }\n    // NOTE: normalize position:\n    // in Firefox and Chrome (zoom > 100%) when scrolled to the bottom\n    // in Edge when scrolled to the right edge\n    const correction = 1;\n    const nodeHorizontalOffset = parseInt(node.scrollLeft + node.clientWidth, 10) - correction;\n    const nodeVerticalOffset = parseInt(node.scrollTop + node.clientHeight, 10) - correction;\n    // NOTE: prevent iOS to flicker in bounces and correct rendering on high dpi screens\n    if (node.scrollTop < 0\n      || node.scrollLeft < 0\n      || nodeHorizontalOffset > Math.max(node.scrollWidth, node.clientWidth)\n      || nodeVerticalOffset > Math.max(node.scrollHeight, node.clientHeight)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  updateViewport() {\n    const { viewport, setViewport } = this.props;\n    const newViewport = this.calculateViewport();\n\n    if (viewport !== newViewport) {\n      setViewport(newViewport);\n    }\n  }\n\n  calculateViewport() {\n    const { viewportTop, skipItems, viewportLeft, containerHeight, containerWidth } = this.state;\n    const {\n      loadedRowsStart,\n      bodyRows,\n      headerRows,\n      footerRows,\n      columns,\n      minColumnWidth,\n      isDataRemote,\n      viewport,\n    } = this.props;\n    const getColumnWidth = this.getColumnWidthGetter(columns, containerWidth, minColumnWidth!);\n\n    return getViewport(\n      { viewportTop, skipItems, viewportLeft, containerHeight, containerWidth },\n      { loadedRowsStart, columns, bodyRows, headerRows, footerRows, isDataRemote, viewport },\n      this.getRowHeight, getColumnWidth,\n    );\n  }\n\n  getCollapsedGrids(viewport: GridViewport) {\n    const { containerWidth, viewportLeft, skipItems } = this.state;\n    const {\n      headerRows, bodyRows, footerRows,\n      columns, loadedRowsStart, totalRowCount,\n      getCellColSpan, minColumnWidth,\n    } = this.props;\n    const getColumnWidth = this.getColumnWidthGetter(columns, containerWidth, minColumnWidth!);\n\n    return getCollapsedGrids({\n      headerRows,\n      bodyRows,\n      footerRows,\n      columns,\n      loadedRowsStart,\n      totalRowCount,\n      getCellColSpan,\n      viewportLeft,\n      containerWidth,\n      viewport,\n      skipItems,\n      getRowHeight: this.getRowHeight,\n      getColumnWidth,\n    });\n  }\n\n  render() {\n    const {\n      containerComponent: Container,\n      tableComponent: Table,\n      headComponent: Head,\n      bodyComponent: Body,\n      footerComponent: Footer,\n      tableRef,\n      height,\n      headerRows,\n      footerRows,\n      minColumnWidth,\n      minWidth,\n      cellComponent,\n      rowComponent,\n      viewport,\n      scrollTop,\n      columns,\n      nextColumnId,\n    } = this.props;\n\n    const scrollLeft = getScrollLeft(columns.length, minColumnWidth!, nextColumnId);\n    const collapsedGrids = this.getCollapsedGrids(viewport);\n    const commonProps = {\n      cellComponent,\n      rowComponent,\n      minColumnWidth,\n      minWidth,\n      rowRefsHandler: this.registerRowRef,\n    };\n    const sizerHeight = height === AUTO_HEIGHT ? null : height;\n\n    return (\n      <Sizer\n        onSizeChange={this.handleContainerSizeChange}\n        containerComponent={Container}\n        style={{ height: sizerHeight }}\n        onScroll={this.onScroll}\n        scrollTop={scrollTop}\n        scrollLeft={scrollLeft}\n      >\n        <Table\n          forwardedRef={tableRef}\n          style={{\n            minWidth: `${minWidth}px`,\n          }}\n        >\n          <ColumnGroup\n            columns={collapsedGrids.bodyGrid.columns as TableColumn[]}\n          />\n          {\n            (!!headerRows.length) && (\n              <VirtualTableLayoutBlock\n                {...commonProps}\n                name=\"header\"\n                isFixed={true}\n                collapsedGrid={collapsedGrids.headerGrid}\n                bodyComponent={Head}\n              />\n            )\n          }\n          <VirtualTableLayoutBlock\n            {...commonProps}\n            name=\"body\"\n            collapsedGrid={collapsedGrids.bodyGrid}\n            bodyComponent={Body}\n          />\n          {\n            (!!footerRows.length) && (\n              <VirtualTableLayoutBlock\n                {...commonProps}\n                name=\"footer\"\n                isFixed={true}\n                collapsedGrid={collapsedGrids.footerGrid}\n                bodyComponent={Footer}\n              />\n            )\n          }\n        </Table>\n      </Sizer>\n    );\n  }\n}\n","import * as React from 'react';\nimport { RowLayoutProps } from '../../types';\nimport { getRowStyle } from '../../utils/helpers';\n\nconst getColumnStyle = ({ column }) => column.animationState;\n\n/** @internal */\nexport const RowLayout: React.SFC<RowLayoutProps> = React.memo((props) => {\n  const {\n    row,\n    columns,\n    rowComponent: Row,\n    cellComponent: Cell,\n    getCellColSpan,\n  } = props;\n\n  const getColSpan = React.useCallback(\n    (tableRow, tableColumn) => getCellColSpan!({ tableRow, tableColumn, tableColumns: columns }),\n    [columns, getCellColSpan],\n  );\n\n  return (\n    <Row\n      tableRow={row}\n      style={getRowStyle({ row })}\n    >\n      {\n        columns\n          .map(column => (\n            <Cell\n              key={column.key}\n              tableRow={row}\n              tableColumn={column}\n              style={getColumnStyle({ column })}\n              colSpan={getColSpan(row, column)}\n            />\n          ))\n      }\n    </Row>\n  );\n});\n","import * as React from 'react';\nimport { RowLayout } from './row-layout';\nimport { RowsBlockLayoutProps } from '../../types';\n\n/** @internal */\nexport class RowsBlockLayout extends React.PureComponent<RowsBlockLayoutProps> {\n  render() {\n    const {\n      rows,\n      columns,\n      blockComponent: Block,\n      rowComponent,\n      cellComponent,\n      getCellColSpan,\n    } = this.props;\n\n    return (\n      <Block>\n        {\n          rows\n            .map(row => (\n              <RowLayout\n                key={row.key}\n                row={row}\n                columns={columns}\n                rowComponent={rowComponent}\n                cellComponent={cellComponent}\n                getCellColSpan={getCellColSpan}\n              />\n            ))\n        }\n      </Block>\n    );\n  }\n}\n","import * as React from 'react';\nimport { ColumnGroup } from './column-group';\nimport { RowsBlockLayout } from './rows-block-layout';\nimport { TableLayoutProps } from '../../types';\n\nconst defaultProps = {\n  headerRows: [],\n  footerRows: [],\n  headComponent: () => null,\n  footerComponent: () => null,\n};\n\n/** @internal */\nexport class StaticTableLayout extends React.PureComponent<TableLayoutProps & typeof defaultProps> {\n  static defaultProps = defaultProps;\n\n  render() {\n    const {\n      headerRows,\n      bodyRows,\n      footerRows,\n      columns,\n      minWidth,\n      containerComponent: Container,\n      tableComponent: Table,\n      headComponent,\n      bodyComponent,\n      footerComponent,\n      rowComponent,\n      cellComponent,\n      getCellColSpan,\n      tableRef,\n    } = this.props;\n\n    const commonProps = {\n      columns,\n      rowComponent,\n      cellComponent,\n      getCellColSpan,\n    };\n\n    return (\n      <Container>\n        <Table\n          forwardedRef={tableRef}\n          style={{ minWidth: `calc(${minWidth})` }}\n        >\n          <ColumnGroup columns={columns} />\n          {!!headerRows.length && (\n            <RowsBlockLayout\n              rows={headerRows}\n              blockComponent={headComponent}\n              {...commonProps}\n            />\n          )}\n          <RowsBlockLayout\n            rows={bodyRows}\n            blockComponent={bodyComponent}\n            {...commonProps}\n          />\n          {!!footerRows.length && (\n            <RowsBlockLayout\n              rows={footerRows}\n              blockComponent={footerComponent}\n              {...commonProps}\n            />\n          )}\n        </Table>\n      </Container>\n    );\n  }\n}\n","import * as React from 'react';\nimport {\n  Plugin, Template, Action,\n  PluginComponents,\n  TemplateConnector,\n  TemplatePlaceholder,\n  Getter,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  isStubTableCell, checkColumnWidths, getScrollTop,\n  TOP_POSITION, BOTTOM_POSITION, getTopRowId,\n} from '@devexpress/dx-grid-core';\nimport {\n  VirtualTableProps,\n  Table as TableNS,\n  TableLayoutProps,\n  VirtualTablePluginState,\n} from '../../types';\n\n/** @internal */\nexport const emptyViewport = {\n  columns: [[0, 0]],\n  rows: [0, 0],\n  headerRows: [0, 0],\n  footerRows: [0, 0],\n  top: 0,\n  left: 0,\n  width: 800,\n  height: 600,\n};\n\nconst tableColumnsComputed = (\n  { tableColumns }: Getters,\n) => {\n  return checkColumnWidths(tableColumns);\n};\n\n/** @internal */\nexport const makeVirtualTable: (...args: any) => any = (Table, {\n  VirtualLayout,\n  FixedHeader,\n  FixedFooter,\n  SkeletonCell,\n  defaultEstimatedRowHeight,\n  defaultHeight,\n}) => {\n  class VirtualTable extends React.PureComponent<VirtualTableProps, VirtualTablePluginState> {\n    static defaultProps = {\n      estimatedRowHeight: defaultEstimatedRowHeight,\n      height: defaultHeight,\n      skeletonCellComponent: SkeletonCell,\n      onTopRowChange: () => {},\n    };\n    static FixedHeader: React.ComponentType;\n    static FixedFooter: React.ComponentType;\n    static SkeletonCell: React.ComponentType;\n    static TOP_POSITION = TOP_POSITION;\n    static BOTTOM_POSITION = BOTTOM_POSITION;\n\n    scrollToRow: (prop: number | string | symbol) => void;\n    scrollToColumn: (prop: symbol) => void;\n\n    constructor(props) {\n      super(props);\n\n      this.state = {\n        viewport: emptyViewport,\n        nextRowId: undefined,\n        nextColumnId: undefined,\n      };\n      this.scrollToRow = nextRowId => this.setState({ nextRowId });\n      this.scrollToColumn = nextColumnId => this.setState({ nextColumnId });\n    }\n\n    setViewport = (viewport) => {\n      this.setState({ viewport });\n    }\n\n    componentDidUpdate(_, prevState) {\n      const { nextRowId: prevId, nextColumnId: prevColumnId } = prevState;\n      const { nextRowId: currentId, nextColumnId: currentColumnId } = this.state;\n\n      if (currentId !== undefined && currentId === prevId) {\n        this.setState({ nextRowId: undefined });\n      }\n      if (currentColumnId !== undefined && prevColumnId === currentColumnId) {\n        this.setState({ nextColumnId: undefined });\n      }\n    }\n\n    render() {\n      const {\n        height,\n        estimatedRowHeight,\n        skeletonCellComponent: SkeletonStubCell,\n        children,\n        ...restProps\n      } = this.props;\n      const {\n        viewport: stateViewport,\n        nextRowId: nextId,\n        nextColumnId,\n      } = this.state;\n\n      return (\n        <Plugin name=\"VirtualTable\">\n          <Table layoutComponent={VirtualLayout} {...restProps} />\n\n          {/* prevents breaking change */}\n          <Action name=\"setViewport\" action={this.setViewport} />\n          <Action name=\"scrollToRow\" action={this.scrollToRow} />\n          <Action name=\"scrollToColumn\" action={this.scrollToColumn} />\n          <Getter name=\"viewport\" value={stateViewport} />\n          <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n\n          <Template name=\"tableLayout\">\n            {(params: TableLayoutProps) => (\n              <TemplateConnector>\n                {(\n                  { availableRowCount, loadedRowsStart, tableBodyRows, isDataRemote, viewport },\n                  { setViewport },\n                ) => {\n\n                  const { onTopRowChange } = this.props;\n                  const rowId = getTopRowId(viewport, tableBodyRows, isDataRemote);\n\n                  onTopRowChange(rowId);\n\n                  const totalRowCount = availableRowCount || tableBodyRows.length;\n                  const scrollTop = getScrollTop(\n                    tableBodyRows,\n                    totalRowCount,\n                    nextId,\n                    estimatedRowHeight,\n                    isDataRemote,\n                  );\n\n                  return (\n                    <TemplatePlaceholder\n                      params={{\n                        ...params,\n                        totalRowCount,\n                        loadedRowsStart,\n                        isDataRemote,\n                        height,\n                        estimatedRowHeight,\n                        setViewport,\n                        viewport,\n                        scrollTop,\n                        nextColumnId,\n                      }}\n                    />\n                  );\n                }}\n              </TemplateConnector>\n            )}\n          </Template>\n\n          <Template\n            name=\"tableCell\"\n            predicate={({ tableRow }: any) => !!isStubTableCell(tableRow)}\n          >\n            {(params: TableNS.CellProps) => (\n              <TemplateConnector>\n                {({ isDataRemote }) => (\n                  isDataRemote ? <SkeletonStubCell {...params} /> : <TemplatePlaceholder />\n                )}\n              </TemplateConnector>\n            )}\n          </Template>\n        </Plugin>\n      );\n    }\n  }\n\n  Object.values(Table.components as PluginComponents).forEach((name) => {\n    VirtualTable[name] = Table[name];\n  });\n\n  VirtualTable.FixedHeader = FixedHeader;\n  VirtualTable.FixedFooter = FixedFooter;\n  VirtualTable.SkeletonCell = SkeletonCell;\n\n  return VirtualTable;\n};\n","import { RowCache } from '../types';\n\nclass Node {\n  start: number;\n  rows: ReadonlyArray<any>;\n  prev: Node | null = null;\n  next: Node | null = null;\n\n  constructor(start: number, rows: ReadonlyArray<any>) {\n    this.start = start;\n    this.rows = rows;\n  }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nclass LRUCache {\n  pageSize: number;\n  capacity: number;\n  head!: Node;\n  tail!: Node;\n  pages = new Map<number, Node>();\n\n  constructor(pageSize: number, capacity = Number.POSITIVE_INFINITY) {\n    this.pageSize = pageSize;\n    this.capacity = capacity;\n    this.initList();\n  }\n\n  initList() {\n    this.head = new Node(-1, []);\n    this.tail = new Node(-1, []);\n    this.head.next = this.tail;\n    this.tail.prev = this.head;\n  }\n\n  addPage(pageStart: number, rows: ReadonlyArray<any>) {\n    if (this.pages.has(pageStart)) {\n      this.removePage(pageStart);\n    }\n\n    const node = new Node(pageStart, rows);\n    const last = this.tail.prev!;\n    last.next = node;\n    node.next = this.tail;\n    node.prev = last;\n    this.tail.prev = node;\n    this.pages.set(pageStart, node);\n\n    if (this.pages.size > this.capacity) {\n      this.removePage(this.head.next!.start);\n    }\n  }\n\n  removePage(start: number) {\n    const node = this.pages.get(start)!;\n    node.prev!.next = node.next;\n    node.next!.prev = node.prev;\n\n    this.pages.delete(start);\n  }\n\n  getPage(pageStart: number) {\n    if (!this.pages.has(pageStart)) {\n      return null;\n    }\n\n    const { rows } = this.pages.get(pageStart)!;\n    this.removePage(pageStart);\n    this.addPage(pageStart, rows);\n\n    return rows;\n  }\n\n  clear() {\n    this.pages.clear();\n    this.initList();\n  }\n}\n\nexport const createRowCache = (pageSize = 100, capacity = Number.POSITIVE_INFINITY): RowCache => {\n  const cache = new LRUCache(pageSize, capacity / pageSize);\n\n  return {\n    getRows: (skip: number, take: number) => {\n      let result: any[] = [];\n      const pageCount = Math.ceil(take / pageSize);\n      for (let i = 0; i < pageCount; i += 1) {\n        const pageStart = skip + i * pageSize;\n        const chunk = cache.getPage(pageStart);\n\n        if (chunk !== null) {\n          result = result.concat(chunk);\n        }\n\n        // yield if last page is incomplete\n        if (chunk === null || (i !== pageCount - 1 && chunk.length !== pageSize)) {\n          return result;\n        }\n      }\n      return result;\n    },\n    setRows: (skip: number, rows: ReadonlyArray<any>) => {\n      const pageCount = Math.ceil(rows.length / pageSize);\n      for (let i = 0; i < pageCount; i += 1) {\n        const pageStart = i * pageSize;\n        const rowsChunk = rows.slice(pageStart, pageStart + pageSize);\n\n        // put incomplete page only if it is last one\n        if (rowsChunk.length === pageSize || i === pageCount - 1) {\n          cache.addPage(pageStart + skip, rowsChunk);\n        }\n      }\n    },\n    invalidate: () => cache.clear(),\n  };\n};\n","import * as React from 'react';\nimport { KeyboardNavigationComponent, Table } from '../types';\n\nexport const withKeyboardNavigation =\n<T extends KeyboardNavigationComponent>(key1?: string, key2?: string) =>\n(Component: React.ComponentType<Table.CellProps>): React.ComponentType<T> => {\n  class ComponentWithNavigation extends React.PureComponent<T> {\n    ref: React.RefObject<T>;\n    constructor(props) {\n      super(props);\n      this.ref = { current: null };\n      this.handleClick = this.handleClick.bind(this);\n      this.setForwardedRef = this.setForwardedRef.bind(this);\n    }\n\n    setForwardedRef(node) {\n      (this.ref.current as any)?.removeEventListener('mouseup', this.handleClick);\n      (this.ref.current as any) = node;\n      (this.ref.current as any)?.addEventListener('mouseup', this.handleClick);\n    }\n\n    componentDidMount() {\n      const { updateRefForKeyboardNavigation, tableRow, tableColumn } = this.props;\n      if (this.ref.current && updateRefForKeyboardNavigation) {\n        updateRefForKeyboardNavigation({\n          ref: this.ref,\n          key1: key1 || tableRow.key,\n          key2: key2 || tableColumn.key,\n          action: 'add',\n        });\n      }\n    }\n\n    componentWillUnmount() {\n      const { updateRefForKeyboardNavigation, tableRow, tableColumn } = this.props;\n      if (this.ref.current && updateRefForKeyboardNavigation) {\n        updateRefForKeyboardNavigation({\n          ref: this.ref,\n          key1: key1 || tableRow.key,\n          key2: key2 || tableColumn.key,\n          action: 'remove',\n        });\n        (this.ref.current as any).removeEventListener('mouseup', this.handleClick);\n      }\n    }\n\n    handleClick(event) {\n      const { tableRow, tableColumn, setFocusedElement } = this.props;\n      if (setFocusedElement) {\n        setFocusedElement({ key1: key1 || tableRow.key, key2: key2 || tableColumn.key, event });\n      }\n    }\n\n    render() {\n      const { setFocusedElement, updateRefForKeyboardNavigation, ...restProps } = this.props;\n      return <Component forwardedRef={this.setForwardedRef} {...restProps} />;\n    }\n  }\n  return ComponentWithNavigation;\n};\n","import * as React from 'react';\nimport { TableGroupRow } from '../../types';\n\nexport const InlineSummaryItem: React.SFC<TableGroupRow.InlineSummaryItemProps> = React.memo(({\n  summary: { messageKey, columnTitle, component: SummaryComponent },\n  getMessage,\n}) => (\n  <React.Fragment>\n    {getMessage(messageKey, { columnTitle })}\n    <SummaryComponent />\n  </React.Fragment>\n));\n"]},"metadata":{},"sourceType":"module"}